namespace Agent.Interaction.Desktop
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Diagnostics;
    using System.Drawing;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Runtime.InteropServices;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Controls.Primitives;
    using System.Windows.Data;
    using System.Windows.Input;
    using System.Windows.Interop;
    using System.Windows.Media;
    using System.Windows.Media.Effects;
    using System.Windows.Media.Imaging;
    using System.Windows.Resources;
    using System.Windows.Threading;

    using Agent.Interaction.Desktop.ApplicationReader;
    using Agent.Interaction.Desktop.ChannelsHandler;
    using Agent.Interaction.Desktop.Helpers;
    using Agent.Interaction.Desktop.Settings;
    using Agent.Interaction.Desktop.WebBrowserOverlay;

    using Genesyslab.Platform.ApplicationBlocks.ConfigurationObjectModel.CfgObjects;
    using Genesyslab.Platform.Commons.Collections;
    using Genesyslab.Platform.Commons.Protocols;
    using Genesyslab.Platform.Contacts.Protocols.ContactServer;
    using Genesyslab.Platform.Contacts.Protocols.ContactServer.Events;
    using Genesyslab.Platform.Voice.Protocols.TServer;
    using Genesyslab.Platform.Voice.Protocols.TServer.Events;

    using Microsoft.Win32;

    using mshtml;

    using Pointel.Configuration.Manager;
    using Pointel.Connection.Manager;
    using Pointel.Desktop.Access.Control;
    using Pointel.Integration.PlugIn;
    using Pointel.Interactions.Contact.Core;
    using Pointel.Interactions.Core;
    using Pointel.Interactions.DispositionCodes.UserControls;
    using Pointel.Interactions.DispositionCodes.Utilities;
    using Pointel.Interactions.IPlugins;
    using Pointel.NotifyIconManager.Interop;
    using Pointel.Salesforce.Plugin;
    using Pointel.Softphone.Voice;
    using Pointel.Softphone.Voice.Core;
    using Pointel.Tools;

    using Application = System.Windows.Application;

    using Binding = System.Windows.Data.Binding;

    using Brush = System.Windows.Media.Brush;

    using Brushes = System.Windows.Media.Brushes;

    using Button = System.Windows.Controls.Button;

    using Color = System.Drawing.Color;

    using ColorConverter = System.Windows.Media.ColorConverter;

    using ComboBox = System.Windows.Controls.ComboBox;

    using ContextMenu = System.Windows.Controls.ContextMenu;

    using DataGridBeginningEditEventArgs = Microsoft.Windows.Controls.DataGridBeginningEditEventArgs;

    using DataGridCell = Microsoft.Windows.Controls.DataGridCell;

    using DataGridRow = Microsoft.Windows.Controls.DataGridRow;

    using DataGridRowEventArgs = Microsoft.Windows.Controls.DataGridRowEventArgs;

    using Image = System.Windows.Controls.Image;

    using KeyEventArgs = System.Windows.Input.KeyEventArgs;

    using MenuItem = System.Windows.Controls.MenuItem;

    using MouseEventArgs = System.Windows.Input.MouseEventArgs;

    using OutputValues = Pointel.Softphone.Voice.Common.OutputValues;

    using RadioButton = System.Windows.Controls.RadioButton;

    using TextBox = System.Windows.Controls.TextBox;

    using UserControl = System.Windows.Controls.UserControl;

    /// <summary>
    /// Interaction logic for SoftPhoneBar.xaml
    /// </summary>
    public partial class SoftPhoneBar : Window, ISoftphoneListener, IDesktopCommunicator, IPluginCallBack, IConfigListener
    {
        #region Fields

        public const Int32 MF_BYPOSITION = 0x400;

        public static int RequeueIntervalTime = 0;

        public int RequeueTimeout = 0;
        public string _agentstate = string.Empty;
        public string _imagePath = string.Empty;
        public List<string> _recentContacts = new List<string>();

        private const int CU_Close = 1002;
        private const int CU_Minimize = 1000;
        private const int CU_Normal = 1001;
        private const int CU_Restore = 1003;
        private const int MF_BYCOMMAND = 0x00000000;
        private const int MF_DISABLED = 0x2;
        private const int MF_ENABLED = 0x0;
        private const int MF_GRAYED = 0x1;
        private const int SC_Close = 0x0000f060;
        private const int SC_Maximize = 0x0000f030;
        private const int SC_Minimize = 0x0000f020;
        private const int SC_Move = 0x0000f010;
        private const int SC_Restore = 0x0000f120;
        private const int SC_Size = 0x0000f000;
        private const Int32 WM_SYSCOMMAND = 0x112;

        private readonly Dictionary<string, string> _dicSendDispositionCode = new Dictionary<string, string>();

        private GridLength baseheight = new GridLength(480);
        private byte browsercount = 0;
        private ContactService conatctService = new ContactService();
        private bool contactLoad = false;
        private DialPad dialpad;
        private Dictionary<string, WebBrowser> dicWebbrowser = new Dictionary<string, WebBrowser>();
        private DTMF dtmf;
        private bool firstTime = false;
        private Image imgPinClose = new Image();
        private Image imgPinOpen = new Image();
        private Image imgPin_EnterClose = new Image();
        private Image imgPin_EnterOpen = new Image();
        private InteractionService interactionService = new InteractionService();
        private bool isDispositionUpdate = false;
        private bool IsMyHistoryLoaded = false;

        // Added by sakthi to avoid the repeated workbin notification to TeamCommunicator.
        // 07-05-2015.
        private bool IsSendWorkbinToTeamCommunicator = false;
        private LogonInfo logonInfo;
        private List<string> lstHookedWindow = new List<string>();
        private List<string> lstOverrideDuplication = new List<string>();
        private TaskbarIcon notifyIcon;
        private OutboundScreenPop objOutboundScreenPop = null;
        private string OldConnectionId;
        private string ProxyId = string.Empty;
        private IntPtr SystemMenu;
        private DispatcherTimer winHideTimer;
        private About _aboutus;
        private int _afterCallWorktTime;
        private AgentState _agentState = new AgentState();
        private DispatcherTimer _agentStateTimer = new DispatcherTimer();
        private DispatcherTimer _agentWrapupTimer = new DispatcherTimer();
        private bool _alivestatus;
        private BroadCastNotifier _broadCastNotifier = new BroadCastNotifier();

        //private string[] splitValue;
        private string[] _broadcastPriority = { "Minimal", "Low", "Normal", "High", "Important" };
        private int _broadCastStayOpenTime = 0;
        private IPluginCallBack _chatListener;
        private ContextMenu _cmStatus = new ContextMenu();
        private ContextMenu _cmVoiceNotReadyCode = new ContextMenu();
        private ConfigContainer _configContainer = ConfigContainer.Instance();
        private string _contactId = string.Empty;
        private int _currentDNDOnTime;
        private int _currentLogoutTime;
        private int _currentNReadyTime;
        private int _currentReadyTime;
        private Datacontext _dataContext = Datacontext.GetInstance();
        private DispositionForm _dispositionForm;
        private Disposition _dispositionUC;
        private IPluginCallBack _emailListener;
        private string _emailStatusMessage = string.Empty;
        private int _errorCount;
        private KeyValueCollection _errorMessage = new KeyValueCollection();
        private bool _evasLoggedIn;
        private string _feedbackNumber = string.Empty;
        private Dictionary<string, string> _formPostDetails = new Dictionary<string, string>();
        private SoftPhoneStatusController _getNotReadyButtonStatus;
        private int _holdTime;
        private IDesktopMessenger _iDesktopMessenger = null;
        private ImageDatacontext _imageDatacontext = ImageDatacontext.GetInstance();
        private bool _isACWByUser = false;
        private bool _isAgentClickNRCodeOnCall;

        //private bool _isIXNLoginFirstTime = false;
        private bool _isAgentLoginClicked = false;
        private bool _isbottom = false;
        private bool _isCaseDataManualBeginEdit;
        private bool _isDispositionSent = false;
        private bool _isDNDFromAID = false;
        private bool _isFailedAgentLogin = false;
        private bool _isfirstBottomHeightSet = true;
        private bool _isfirstBottomWidthSet = false;
        private bool _isLogoutFromAID = false;
        private bool _isNrReasonCode = false;
        private bool _isopendbyUser = false;
        private bool _isServerdown;
        private bool _isShowBroadCast = true;
        private bool _isStatGadgetClosedByUser;
        private bool _isTransferClick = false;
        private bool _isVoiceLoginFirstTime = false;
        private InteractionHandler _ixnHandler = new InteractionHandler();
        private DateTime _lastCallStartTime;
        private Pointel.Logger.Core.ILog _logger = Pointel.Logger.Core.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType,
            "AID");
        private Dictionary<string, int> _mediaListWithState = new Dictionary<string, int>();
        private string _mid;
        private Thread _needtoReconnectInteractionTH;
        private Thread _needtoReconnectVoiceTH;

        //private string _selectedMenu;
        private string _number = string.Empty;
        private bool _nvasLoggedIn;
        private object _objWorbin;
        private IPluginCallBack _outboundListener;
        private int _outOfServiceTime;
        private int _ownerId;
        private PluginCollection _plugins = PluginCollection.GetInstance();
        private bool _popupTabEnabled = false;
        private bool _prevVoiceStatus = false;
        private int _seconds;
        private int _serverDownTime;
        private DropShadowBitmapEffect _shadowEffect = new DropShadowBitmapEffect();
        private ContextMenu _sysTray;
        private int _talkTime;
        private Notifier _taskbarNotifier = new Notifier();
        private bool _voiceCurrentStatus = false;
        private string _voiceInteractionID = string.Empty;

        //private bool isContactInfoVisible = false;
        private int _x;
        private int _y;

        #endregion Fields

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="SoftPhoneBar" /> class.
        /// </summary>
        public SoftPhoneBar()
        {
            InitializeComponent();
            WindowResizer winResize = new WindowResizer(this);
            winResize.addResizerDown(BottomSideRect);
            winResize.addResizerRight(RightSideRect);
            winResize.addResizerRightDown(RightbottomSideRect);
            winResize = null;
            DataContext = Datacontext.GetInstance();

            SetHotKey();
            try
            {
                _logger.Debug("SoftphoneBar:Constructor() Entry");
                _ownerId = _configContainer.PersonDbId;
                SystemEvents.SessionSwitch += SystemEvents_SessionSwitch;
                StateChanged += Window_StateChanged;
                DataTabControl.Items.Remove(popUpUrl);
                _ixnHandler.channelStates += SoftPhoneBar_channelStates;
                _ixnHandler.EventNeedToConnectServer += SoftPhoneBar__needToConnectServer;

                _dataContext.StatesContextMenu.Items.Clear();
                foreach (MenuItem item in VoiceStatusMenu())
                    _dataContext.StatesContextMenu.Items.Add(item);

                _dataContext.EmailContextMenu.Items.Clear();
                foreach (MenuItem item in EserviceStatusMenu(Datacontext.Channels.Email))
                    _dataContext.EmailContextMenu.Items.Add(item);

                _dataContext.ChatContextMenu.Items.Clear();
                foreach (MenuItem item in EserviceStatusMenu(Datacontext.Channels.Chat))
                    _dataContext.ChatContextMenu.Items.Add(item);

                _dataContext.OutboundContextMenu.Items.Clear();
                foreach (MenuItem item in EserviceStatusMenu(Datacontext.Channels.OutboundPreview))
                    _dataContext.OutboundContextMenu.Items.Add(item);

                //Code added by Manikandan to implement global status menu
                _dataContext.GlobalStatesContextMenu.Items.Clear();
                _dataContext.GlobalStatesContextMenu.Closed += GlobalStatesContextMenu_Closed;
                foreach (MenuItem item in GlobalStatusMenu())
                    _dataContext.GlobalStatesContextMenu.Items.Add(item);
                //End

                _dataContext.StatesContextMenu.Closed += StatesContextMenu_Closed;
                if (_dataContext.Forward.Items.Count == 0)
                {
                    var item1 = new MenuItem();
                    item1.Click += ForwardMenuitem_Click;
                    item1.Header = "Forward";
                    var item2 = new MenuItem();
                    item2.Click += ForwardMenuitem_Click;
                    item2.Header = "Cancel Forward";
                    _dataContext.Forward.Style = (Style)FindResource("Contextmenu");
                    _dataContext.Forward.Items.Add(item1);
                    _dataContext.Forward.Items.Add(item2);
                }
                BroadCastInitialSet();
                _dataContext.cmshow.Closed += cmshow_Closed;

                if (_configContainer.AllKeys.Contains("voice.requeue.time-out"))
                    RequeueTimeout = Convert.ToInt32(_configContainer.GetValue("voice.requeue.time-out"));

                if (_configContainer.AllKeys.Contains("enable.display-timer") && !_configContainer.GetAsBoolean("enable.display-timer", true))
                    _dataContext.TimerEnabled = System.Windows.Visibility.Collapsed;

                notifyIcon = new TaskbarIcon(Datacontext.GetInstance());
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar:Constructor():" + commonException);
            }
            _logger.Debug("SoftphoneBar:Constructor() Exit");
        }

        #endregion Constructors

        #region Enumerations

        public enum AgentStateType
        {
            None, Global, Channel
        }

        #endregion Enumerations

        #region Delegates

        public delegate void CommonMessageListener(VoiceEvents voiceEventsDelegate, object callDataDelegate);

        public delegate void configMessageListener(Dictionary<string, string> ConfigData);

        public delegate void NeedToConnectServer(string serverName);

        public delegate void NotifyAgentStats(Pointel.Softphone.Voice.AgentStatus agentStatus);

        public delegate void NotifyListener(SoftPhoneStatusController status);

        public delegate void SetOutPutCallback(OutputValues SetText);

        public delegate void setPhonestatus(SoftPhoneStatusController phoneStatus);

        public delegate void SetTextCallback(Dictionary<string, string> SetText);

        public delegate void StatisticDisplayMessage(string statisticName, string statisticValue, string statType, string toolTip, Color color);

        #endregion Delegates

        #region Nested Interfaces

        [ComImport,
        Guid("6D5140C1-7436-11CE-8034-00AA006009FA"),
        InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
        private interface IOleServiceProvider
        {
            #region Methods

            [PreserveSig]
            int QueryService([In] ref Guid guidService, [In] ref Guid riid, [MarshalAs(UnmanagedType.IDispatch)] out object ppvObject);

            #endregion Methods
        }

        #endregion Nested Interfaces

        #region Events

        //private static event StatisticDisplayMessage _statDisplayMessage;
        public static event CommonMessageListener _commonMessagelistener;

        public static event NeedToConnectServer _needToConnectServer;

        private static event NotifyAgentStats _agentStatusListener;

        private static event NotifyListener _listener;

        #endregion Events

        #region Methods

        /// <summary>
        /// Clears the clipboard.
        /// </summary>
        public static void ClearClipboard()
        {
            if (OpenClipboard(IntPtr.Zero))
            {
                EmptyClipboard();
                CloseClipboard();
            }
        }

        /// <summary>
        /// Gets the bitmap image.
        /// </summary>
        /// <param name="uri">The URI.</param>
        /// <returns></returns>
        public static BitmapImage GetBitmapImage(Uri uri)
        {
            StreamResourceInfo imageInfo = System.Windows.Application.GetResourceStream(uri);
            var bitmap = new BitmapImage();
            try
            {
                byte[] imageBytes = ReadFully(imageInfo.Stream);
                using (Stream stream = new MemoryStream(imageBytes))
                {
                    bitmap.BeginInit();
                    bitmap.StreamSource = stream;
                    bitmap.CacheOption = BitmapCacheOption.OnLoad;
                    bitmap.EndInit();
                    bitmap.UriSource = uri;
                    if (bitmap.CanFreeze)
                        bitmap.Freeze();
                }
                imageBytes = null;
                return bitmap;
            }
            catch
            {
                return null;
            }
            finally
            {
                imageInfo = null;
                bitmap = null;
            }
        }

        public static int GetChatWindowInstanceCount()
        {
            return Application.Current.Windows.Cast<Window>().Where(x => x.Name.Equals("ChatWindow")).ToList().Count;
        }

        public static int GetEmailWindowInstanceCount()
        {
            return Application.Current.Windows.Cast<Window>().Where(x => x.Title.Equals("Email")).ToList().Count;
        }

        public static SoftPhoneStatusController GetLogoutStatus()
        {
            var status = new SoftPhoneStatusController();

            status.LoginButtonStatus = true;
            status.LogoutButtonStatus = false;
            status.ReadyButtonStatus = false;
            status.NotreadyButtonStatus = false;
            status.HoldButtonStatus = false;
            status.RetrieveButtonStatus = false;
            status.AnswerButtonStatus = false;
            status.ReleaseButtonStatus = false;
            status.ConferenceInitiateStatus = false;
            status.CompleteConferenceStatus = false;
            status.TransferInitiateStatus = false;
            status.TransferCompleteStatus = false;
            status.CancelConferenceStatus = false;
            status.CancelTransferStatus = false;
            status.DialButtonStatus = false;
            return status;
        }

        /// <summary>
        /// Gets the visual child.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="parent">The parent.</param>
        /// <returns></returns>
        public static T GetVisualChild<T>(Visual parent)
            where T : Visual
        {
            T child = default(T);
            int numVisuals = VisualTreeHelper.GetChildrenCount(parent);
            var vw = (Visual)VisualTreeHelper.GetChild(parent, 0);
            for (int i = 0; i < numVisuals; i++)
            {
                var v = (Visual)VisualTreeHelper.GetChild(parent, i);
                child = v as T ?? GetVisualChild<T>(v);
                if (child != null)
                {
                    break;
                }
            }
            return child;
        }

        /// <summary>
        /// Determines whether [is window open] [the specified name].
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="name">The name.</param>
        /// <returns></returns>
        public static T IsWindowOpen<T>(string name = null)
            where T : Window
        {
            var windows = Application.Current.Windows.OfType<T>();
            return string.IsNullOrEmpty(name) ? windows.FirstOrDefault() : windows.FirstOrDefault(w => w.Name.Equals(name));
        }

        /// <summary>
        /// Reads the fully.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns></returns>
        public static byte[] ReadFully(Stream input)
        {
            byte[] buffer = new byte[16 * 1024];
            using (MemoryStream ms = new MemoryStream())
            {
                int read;
                while ((read = input.Read(buffer, 0, buffer.Length)) > 0)
                {
                    ms.Write(buffer, 0, read);
                }
                return ms.ToArray();
            }
        }

        public void AssignPreviousCall(string connectionID, string partyState)
        {
            _isAgentLoginClicked = true;

            _dataContext.IsReconnectClicked = false;
            _dataContext.IsInitiateConfClicked = false;
            _dataContext.IsInitiateTransClicked = false;
            _dataContext.isOnCall = false;
            Datacontext.isRinging = true;
            if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("LoggedIn") || _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Unknown"))
            {
                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "Logout";
                _dataContext.UserState = "Logout";
                _dataContext.VoiceStateImageSource = _imageDatacontext.ImgLogoutStatus;
                //_dataContext.VoiceStateImageSource =
                //                GetBitmapImage(new Uri(
                //                    "/Agent.Interaction.Desktop;component/Images/Logout-state.png", UriKind.Relative));
            }
            //_agentstate = "OnCall";
            //if (_plugins.PluginCollections.ContainsKey(Plugins.Salesforce))
            //    ((ISalesforcePlugin)_plugins.PluginCollections[Plugins.Salesforce]).ApplicationState(MediaTypes.Voice, AgentMediaStatus.LoggedIn);
            //code Added for the purpose of when the dn is on call before agent use the same dn - Smoorthy
            // 09-04-2014
            var softPhone = new SoftPhone();
            //Get the Call status
            softPhone.GetCallStatus(connectionID, partyState);
            softPhone = null;

            #region Open Call Window

            //ShowDisposition(connectionID);

            if (!(_configContainer.AllKeys.Contains("voice.enable.popup-disposition")
                && Convert.ToBoolean(_configContainer.GetValue("voice.enable.popup-disposition"))))
                SetDispositionCode(connectionID);

            #endregion Open Call Window
        }

        public void AssignPreviousState(string agentStatus, string agentWorkMode, Dictionary<string, string> reasons)
        {
            var softPhone = new SoftPhone();
            string NotReadyCodeKey = string.Empty;
            string NotReadyKey = string.Empty;
            string keyCode = string.Empty;
            string reason = string.Empty;
            string reasoncode = string.Empty;
            try
            {
                switch (agentStatus)
                {
                    //case "0":
                    //    _agentstate = "Logout";
                    //    break;

                    case "2":
                        softPhone.Ready();
                        break;

                    case "3":
                        if (reasons != null && reasons.Count > 0)
                        {
                            if (_configContainer.AllKeys.Contains("not-ready.code-name") &&
                               ((string)_configContainer.GetValue("not-ready.code-name")) != string.Empty)
                                NotReadyCodeKey = ((string)_configContainer.GetValue("not-ready.code-name"));

                            if (_configContainer.AllKeys.Contains("not-ready.key-name") &&
                                    ((string)_configContainer.GetValue("not-ready.key-name")) != string.Empty)
                                NotReadyKey = ((string)_configContainer.GetValue("not-ready.key-name"));
                            if (NotReadyKey != string.Empty && NotReadyCodeKey != string.Empty)
                            {
                                if (reasons.ContainsKey(NotReadyKey))
                                    reason = reasons[NotReadyKey];
                                if (reasons.ContainsKey(NotReadyCodeKey))
                                    reasoncode = reasons[NotReadyCodeKey];
                            }
                            if (!string.IsNullOrEmpty(reason))
                            {
                                if (_configContainer.AllKeys.Contains("GlobalNotReadyReasonCodes"))
                                {
                                    if (((Dictionary<string, string>)_configContainer.GetValue("GlobalNotReadyReasonCodes")).ContainsKey(reason))
                                    {
                                        keyCode = ((Dictionary<string, string>)_configContainer.GetValue("GlobalNotReadyReasonCodes"))[reason];
                                    }
                                }
                                if (_configContainer.AllKeys.Contains("VoiceNotReadyReasonCodes"))
                                {
                                    if (((Dictionary<string, string>)_configContainer.GetValue("VoiceNotReadyReasonCodes")).ContainsKey(reason))
                                    {
                                        keyCode = ((Dictionary<string, string>)_configContainer.GetValue("VoiceNotReadyReasonCodes"))[reason];
                                    }
                                }
                                if (!string.IsNullOrEmpty(keyCode))
                                {
                                    softPhone.NotReady(reason, keyCode);
                                    _isNrReasonCode = true;
                                    _dataContext.VoiceNotReadyReasonCode = reason;
                                }
                                else
                                    SetNotReady();
                                //else
                                //{
                                //    if (!string.IsNullOrEmpty(reasoncode))
                                //    {
                                //        softPhone.NotReady(reason, reasoncode);
                                //        _isNrReasonCode = true;
                                //        _dataContext.VoiceNotReadyReasonCode = reason;
                                //    }
                                //}
                            }
                            else
                                SetNotReady();
                        }
                        else
                            SetNotReady();
                        break;

                    case "4":
                        if (agentWorkMode == "3")
                        {
                            softPhone.NotReadyACW();
                            _dataContext.VoiceNotReadyReasonCode = string.Empty;
                            _isACWByUser = true;
                        }
                        break;
                }
            }
            catch (Exception generalException)
            {
                _logger.Error("Error occurred as " + generalException.Message);
            }
            finally
            {
                softPhone = null;
                NotReadyCodeKey = null;
                NotReadyKey = null;
                keyCode = null;
            }
        }

        /// <summary>
        ///     Binds the grid.
        /// </summary>
        public void BindGrid()
        {
            try
            {
                if (_dataContext.userAttachData.Count != 0)
                {
                    _dataContext.NotifyCallData.Clear();
                    foreach (var pair in _dataContext.userAttachData)
                    {
                        //commented by vinoth on 06th Nov, but need to check
                        //if (pair.Key == "ANI" || pair.Key == "OtherDN")
                        //_dataContext.TitleText = pair.Value + " - Agent Interaction Desktop";
                        //end
                        if (_dataContext.NotifyCallData.Count(p => p.Key == pair.Key) == 0)
                        {
                            Datacontext.GetInstance()
                                .NotifyCallData.Add(new CallData(pair.Key, pair.Value,
                                    _dataContext.KeyFontFamily, _dataContext.KeyFontWeight));
                        }
                    }
                    _dataContext.NotifyCallData = new ObservableCollection<ICallData>(_dataContext.NotifyCallData.OrderBy(callData => callData.Key));
                }
                if (_dataContext.NotifyCallData.Count <= 0)
                {
                    DGAttachData.Visibility = Visibility.Collapsed;
                    txtAttachDataInfo.Visibility = Visibility.Visible;
                }
                else
                {
                    DGAttachData.Visibility = Visibility.Visible;
                    txtAttachDataInfo.Visibility = Visibility.Collapsed;
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        /// <summary>
        ///     Binds the grid in Notifer window.
        /// </summary>
        public void BindGridForNotifer()
        {
            Dispatcher.BeginInvoke((Action)(delegate
            {
                try
                {
                    if (_dataContext.userAttachData.Count != 0)
                    {
                        _dataContext.NotifyCallData.Clear();
                        lock (_dataContext.userAttachData)
                        {
                            foreach (var pair in _dataContext.userAttachData)
                            {
                                Datacontext.GetInstance()
                                    .NotifyCallData.Add(new CallData(pair.Key, pair.Value,
                                        _dataContext.KeyFontFamily, _dataContext.KeyFontWeight));
                            }
                        }
                        _dataContext.NotifyCallData = new ObservableCollection<ICallData>(_dataContext.NotifyCallData.OrderBy(callData => callData.Key));
                    }
                    if (_dataContext.NotifyCallData.Count <= 0)
                    {
                        DGAttachData.Visibility = Visibility.Collapsed;
                        txtAttachDataInfo.Visibility = Visibility.Visible;
                    }
                    else
                    {
                        DGAttachData.Visibility = Visibility.Visible;
                        txtAttachDataInfo.Visibility = Visibility.Collapsed;
                    }
                }
                catch (Exception generalException)
                {
                    _logger.Error("Error occurred as " + generalException.Message);
                }
            }));
        }

        public void BroadCastInitialSet()
        {
            _dataContext.BroadCastAttributes.Clear();

            if (_configContainer.AllKeys.Contains("broadcast.color.high-priority"))
                _dataContext.BroadCastAttributes.Add("High", (string)_configContainer.GetValue("broadcast.color.high-priority"));

            if (_configContainer.AllKeys.Contains("broadcast.color.important-priority"))
                _dataContext.BroadCastAttributes.Add("Important", (string)_configContainer.GetValue("broadcast.color.important-priority"));

            if (_configContainer.AllKeys.Contains("broadcast.color.low-priority"))
                _dataContext.BroadCastAttributes.Add("Low", (string)_configContainer.GetValue("broadcast.color.low-priority"));

            if (_configContainer.AllKeys.Contains("broadcast.color.minimal-priority"))
                _dataContext.BroadCastAttributes.Add("Minimal", (string)_configContainer.GetValue("broadcast.color.minimal-priority"));

            if (_configContainer.AllKeys.Contains("broadcast.color.normal-priority"))
                _dataContext.BroadCastAttributes.Add("Normal", (string)_configContainer.GetValue("broadcast.color.normal-priority"));

            if (_configContainer.AllKeys.Contains("broadcast.displayed-columns"))
                _dataContext.BroadCastAttributes.Add("broadcast.displayed-columns", (string)_configContainer.GetValue("broadcast.displayed-columns"));

            if (_configContainer.AllKeys.Contains("broadcast.mark-read-timeout"))
                _dataContext.BroadCastAttributes.Add("broadcast.mark-read-timeout", (string)_configContainer.GetValue("broadcast.mark-read-timeout"));

            if (_configContainer.AllKeys.Contains("broadcast.message-content"))
                _dataContext.BroadCastAttributes.Add("broadcast.message-content", (string)_configContainer.GetValue("broadcast.message-content"));

            if (_configContainer.AllKeys.Contains("broadcast.preview-timeout"))
                _dataContext.BroadCastAttributes.Add("broadcast.preview-timeout", (string)_configContainer.GetValue("broadcast.preview-timeout"));

            if (_configContainer.AllKeys.Contains("broadcast.subscribed.topics"))
                _dataContext.BroadCastAttributes.Add("broadcast.subscribed.topics", (string)_configContainer.GetValue("broadcast.subscribed.topics"));

            if (_configContainer.AllKeys.Contains("broadcast.toast-summary"))
                _dataContext.BroadCastAttributes.Add("broadcast.toast-summary", (string)_configContainer.GetValue("broadcast.toast-summary"));

            //string[] temptoast = _dataContext.BroadCastAttributes["broadcast.toast-summary"].Split(',');
            string[] temptoast = ((string)_configContainer.GetValue("broadcast.toast-summary")).Split(',');
            //_dataContext.Msgsummary = _dataContext.BroadCastAttributes["broadcast.message-content"].Split(',');
            _dataContext.Msgsummary = ((string)_configContainer.GetValue("broadcast.message-content")).Split(',');
            int integ = 0;
            foreach (string item in temptoast)
            {
                _dataContext.BroadCastToastOrder[integ] = item.ToLower().TrimStart().TrimEnd();
                integ++;
            }
            //_broadCastStayOpenTime = Convert.ToInt32(_dataContext.BroadCastAttributes["broadcast.preview-timeout"]) * 1000;
            _broadCastStayOpenTime = Convert.ToInt32(_configContainer.GetValue("broadcast.preview-timeout")) * 1000;
            //string[] temptopics = _dataContext.BroadCastAttributes["broadcast.subscribed.topics"].Replace("$", " ")
            string[] temptopics = _configContainer.GetValue("broadcast.subscribed.topics").Replace("$", " ")
                    .Split(',');
            int i = 0;
            _dataContext.BroadCastSubscribTopics = new string[temptopics.Length];
            foreach (string item in temptopics)
            {
                string temp = item.ToLower().TrimStart().TrimEnd();
                if (temp == "agentgroup")
                {
                    _dataContext.BroadCastSubscribTopics[i] = _dataContext.AgentGroupName;
                }
                else if (temp == "agent")
                {
                    _dataContext.BroadCastSubscribTopics[i] = _dataContext.UserName;
                }
                else
                    _dataContext.BroadCastSubscribTopics[i] = item.TrimStart();
                i++;
            }
        }

        /// <summary>
        ///     Handles the Click event of the btnReady control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        public void btnReady_Click(object sender, RoutedEventArgs e)
        {
            _logger.Debug("SoftphoneBar:btnReady_Click() Entry");
            try
            {
                if (_dataContext.ReadyText != "Ready")
                {
                    if (_configContainer.AllKeys.Contains("VoiceNotReadyReasonCodes") &&
                        _configContainer.GetValue("VoiceNotReadyReasonCodes") != null)
                    {
                        if (_configContainer.GetAsBoolean("voice.enable.request.notready-onclick"))
                        {
                            var reasoncode = _configContainer.GetAsString("voice.default.notready.reason-code");
                            SetNotReady(reasoncode, true);
                        }
                        if (_cmVoiceNotReadyCode.Items.Count <= 0)
                        {
                            foreach (string key in ((Dictionary<string, string>)_configContainer.GetValue("VoiceNotReadyReasonCodes")).Keys)
                            {
                                var menuVoiceNotReadyCode = new MenuItem();
                                menuVoiceNotReadyCode.Click += menuVoiceNotReadyCode_Click;
                                menuVoiceNotReadyCode.Header = key;
                                _cmVoiceNotReadyCode.Items.Add(menuVoiceNotReadyCode);
                            }
                        }
                        _cmVoiceNotReadyCode.StaysOpen = true;
                        _cmVoiceNotReadyCode.Style = (Style)FindResource("Contextmenu");
                        _cmVoiceNotReadyCode.PlacementTarget = btnReady;
                        _cmVoiceNotReadyCode.Placement = PlacementMode.Bottom;
                        _cmVoiceNotReadyCode.IsOpen = true;
                        _cmVoiceNotReadyCode.Focus();
                    }
                    else
                    {
                        SetNotReady();
                    }
                }
                else
                {
                    _dataContext.isAgentExtendACWTime = false;
                    var softReady = new SoftPhone();
                    softReady.Ready();
                    _dataContext.VoiceNotReadyReasonCode = "";
                    _dataContext.IsAgentClickedReady = true;
                    _dataContext.isDND = false;
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar:btnReady_Click:" + commonException);
            }
            _logger.Debug("SoftphoneBar:btnReady_Click() Exit");
        }

        /// <summary>
        ///     Changes the voice status.
        /// </summary>
        /// <param name="status">The status.</param>
        public void ChangeVoiceStatus(string status)
        {
            try
            {
                var softPhnone = new SoftPhone();
                switch (status)
                {
                    case "Login":
                        _dataContext.TitleBgColor = null;
                        _dataContext.TitleStatusText = "   " + _dataContext.UserName + " - " +
                                                                    _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                        tlblStatus.Text = "[00:00:00]";
                        _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                        _dataContext.IsVoiceStateTimer = Visibility.Visible;
                        Datacontext.isRinging = false;
                        Datacontext.isDialling = false;
                        break;

                    case "Logout (Do Not Disturb)":
                        if (_agentstate == "Logout (Do Not Disturb)")
                        {
                            _currentLogoutTime = _currentLogoutTime + 1;
                        }
                        else
                        {
                            lock (_agentWrapupTimer)
                            {
                                if (_agentWrapupTimer.IsEnabled)
                                    _agentWrapupTimer.Stop();
                            }
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgLogoutStatus;
                            if (_dataContext.isOnCall || Datacontext.isRinging || Datacontext.isDialling)
                            {
                                _dataContext.UserState = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                //_dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                //                                            " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "Logout (Do Not Disturb)";
                                _dataContext.StatusChangeOnVoiceInteraction = status;
                                _dataContext.VoiceNotReadyReasonCode = string.Empty;
                                _currentLogoutTime = 0;
                                _dataContext.IsVoiceStateTimer = Visibility.Collapsed;
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                  _dataContext.IsVoiceStateTimer, tlblStatus.Text);
                            }
                            else
                            {
                                _dataContext.UserState = status;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "Logout (Do Not Disturb)";
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                            " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource,
                                    _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(), _dataContext.IsVoiceStateTimer,
                                    "[00:00:00]");
                                _currentLogoutTime = 0;
                                _dataContext.TitleBgColor = null;
                                Datacontext.isRinging = false;
                                Datacontext.isDialling = false;

                                if (_isAgentLoginClicked)
                                {
                                    OutputValues loginResponse = null;
                                    string workMode = "optional";
                                    loginResponse = softPhnone.Login(_dataContext.Place, _dataContext.UserName, workMode, _dataContext.Queue, _dataContext.AgentLoginId, _dataContext.AgentPassword);
                                    if (loginResponse.MessageCode == "200" || loginResponse.MessageCode == "201")
                                    {
                                        _isLogoutFromAID = false;
                                        if (_configContainer.AllKeys.Contains("login.voice.enable.auto-ready") &&
                                           ((string)_configContainer.GetValue("login.voice.enable.auto-ready")).ToLower().Equals("true"))
                                        {
                                            softPhnone.Ready();
                                        }
                                        _isAgentLoginClicked = false;
                                    }
                                    else if (loginResponse.MessageCode == "2004")
                                    {
                                        PlaceAlreadyTaken(loginResponse);
                                    }
                                }
                            }

                            //_agentstate = "Logout (Do Not Disturb)";
                            //_dataContext.UserState = status;
                            //_dataContext.VoiceStateImageSource = _imageDatacontext.ImgLogoutStatus;
                            //_dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "Logout (Do Not Disturb)";
                            //_dataContext.IsVoiceStateTimer = Visibility.Visible;
                            //_dataContext.TitleStatusText = "   " + _dataContext.UserName +
                            //                                            " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            //SoftPhoneBar_channelStates(Datacontext.Channels.Voice.ToString(), _dataContext.VoiceStateImageSource, status, System.Windows.Visibility.Visible, "[00:00:00]");
                            //_currentLogoutTime = 0;
                            //_dataContext.TitleBgColor = (Brush)new BrushConverter().ConvertFromString("#4DBF4D");
                            //Datacontext.isRinging = false;
                            //Datacontext.isDialling = false;
                        }
                        break;

                    case "Logout":
                        if (_agentstate == "Logout")
                        {
                            _currentLogoutTime = _currentLogoutTime + 1;
                        }
                        else
                        {
                            lock (_agentWrapupTimer)
                            {
                                if (!_agentWrapupTimer.IsEnabled)
                                {
                                }
                                else
                                {
                                    _agentWrapupTimer.Stop();
                                }
                            }
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgLogoutStatus;
                            //_dataContext.VoiceStateImageSource =
                            //    GetBitmapImage(new Uri(_imagePath.Replace("\\Voice", "") + "\\Logout-state.png", UriKind.Relative));
                            if (_dataContext.isOnCall || Datacontext.isRinging || Datacontext.isDialling)
                            {
                                _dataContext.UserState = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                //_dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                //                                            " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.StatusChangeOnVoiceInteraction = status;
                                _dataContext.VoiceNotReadyReasonCode = string.Empty;
                                _currentLogoutTime = 0;
                                _dataContext.IsVoiceStateTimer = Visibility.Collapsed;
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                  _dataContext.IsVoiceStateTimer, tlblStatus.Text);
                            }
                            else
                            {
                                _dataContext.UserState = status;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                            " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource,
                                    _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(), _dataContext.IsVoiceStateTimer,
                                    "[00:00:00]");
                                _currentLogoutTime = 0;
                                _dataContext.TitleBgColor = null;
                                Datacontext.isRinging = false;
                                Datacontext.isDialling = false;

                                if (_isAgentLoginClicked)
                                {
                                    OutputValues loginResponse = null;
                                    string workMode = "optional";
                                    loginResponse = softPhnone.Login(_dataContext.Place, _dataContext.UserName, workMode, _dataContext.Queue, _dataContext.AgentLoginId, _dataContext.AgentPassword);
                                    if (loginResponse.MessageCode == "200" || loginResponse.MessageCode == "201")
                                    {
                                        _isLogoutFromAID = false;
                                        if (_configContainer.AllKeys.Contains("login.voice.enable.auto-ready") &&
                                           ((string)_configContainer.GetValue("login.voice.enable.auto-ready")).ToLower().Equals("true"))
                                        {
                                            softPhnone.Ready();
                                        }
                                        _isAgentLoginClicked = false;
                                    }
                                    else if (loginResponse.MessageCode == "2004")
                                    {
                                        PlaceAlreadyTaken(loginResponse);
                                    }
                                }
                            }
                        }
                        break;

                    case "Out Of Service":
                        if (_agentstate == "Out Of Service")
                        {
                            _outOfServiceTime = _outOfServiceTime + 1;
                            _serverDownTime = _serverDownTime + 1;
                            if (_serverDownTime >= 5 && _isServerdown)
                            {
                                //below code used to background process
                                _needToConnectServer.BeginInvoke("Voice", null, null);
                                _serverDownTime = 0;
                            }
                        }
                        else
                        {
                            _dataContext.UserState = status;
                            _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                            _dataContext.IsVoiceStateTimer = Visibility.Visible;
                            _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                        " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                            SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                _dataContext.IsVoiceStateTimer, "[00:00:00]");
                            _outOfServiceTime = 0;
                            _serverDownTime = 0;
                            _dataContext.TitleBgColor =
                                (Brush)new BrushConverter().ConvertFromString("#EF0C08");
                            Datacontext.isRinging = false;
                            Datacontext.isDialling = false;
                            _dataContext.CallTypeStatus = string.Empty;
                            _dataContext.A_DataTabVisibility = Visibility.Collapsed;
                            _dataContext.TabSelectedIndex = 0;
                        }
                        break;

                    case "Out Of Service1":
                        if (_agentstate == "Out Of Service1")
                        {
                            _outOfServiceTime = _outOfServiceTime + 1;
                        }
                        else
                        {
                            _dataContext.UserState = status;
                            _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "Out Of Service";
                            _dataContext.IsVoiceStateTimer = Visibility.Visible;
                            _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                        " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                            //_dataContext.VoiceStateImageSource =
                            //    GetBitmapImage(new Uri(
                            //        "/Agent.Interaction.Desktop;component/Images/Out_of_Service.png", UriKind.Relative));
                            SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                _dataContext.IsVoiceStateTimer, "[00:00:00]");
                            _outOfServiceTime = 0;
                            _serverDownTime = 0;
                            _dataContext.TitleBgColor =
                                (Brush)new BrushConverter().ConvertFromString("#EF0C08");
                            Datacontext.isRinging = false;
                            Datacontext.isDialling = false;
                            _dataContext.CallTypeStatus = string.Empty;
                            _dataContext.A_DataTabVisibility = Visibility.Collapsed;
                            _dataContext.TabSelectedIndex = 0;
                        }
                        break;

                    case "Out Of Service2":
                        if (_agentstate == "Out Of Service2")
                        {
                            _outOfServiceTime = _outOfServiceTime + 1;
                        }
                        else
                        {
                            _dataContext.UserState = status;
                            _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "Out Of Service";
                            _dataContext.IsVoiceStateTimer = Visibility.Visible;
                            _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                        " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                            btnLogin.IsEnabled = false;
                            _dataContext.LogImageSource = _imageDatacontext.ImgLogoutDisabled;
                            _dataContext.LogText = (String)FindResource("keyLogout");
                            //_dataContext.VoiceStateImageSource =
                            //    GetBitmapImage(new Uri(
                            //        "/Agent.Interaction.Desktop;component/Images/Out_of_Service.png", UriKind.Relative));
                            SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                _dataContext.IsVoiceStateTimer, "[00:00:00]");
                            _outOfServiceTime = 0;
                            _serverDownTime = 0;
                            _dataContext.TitleBgColor =
                                (Brush)new BrushConverter().ConvertFromString("#EF0C08");
                            Datacontext.isRinging = false;
                            Datacontext.isDialling = false;
                            _dataContext.CallTypeStatus = string.Empty;
                            _dataContext.A_DataTabVisibility = Visibility.Collapsed;
                            _dataContext.TabSelectedIndex = 0;
                        }
                        break;

                    case "Do Not Disturb":
                        if (_agentstate == "Do Not Disturb")
                        {
                            _currentDNDOnTime = _currentDNDOnTime + 1;
                        }
                        else
                        {
                            lock (_agentWrapupTimer)
                            {
                                if (!_agentWrapupTimer.IsEnabled)
                                {
                                }
                                else
                                {
                                    _agentWrapupTimer.Stop();
                                }
                            }
                            _agentstate = "Do Not Disturb";
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgDNDStatus;
                            //_dataContext.VoiceStateImageSource =
                            //        GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/DontDis.png",
                            //            UriKind.Relative));
                            if (_dataContext.isOnCall || Datacontext.isRinging || Datacontext.isDialling)
                            {
                                _isAgentClickNRCodeOnCall = false;
                                _dataContext.StatusChangeOnVoiceInteraction = status;
                                _dataContext.VoiceNotReadyReasonCode = string.Empty;
                                _dataContext.IsAgentClickedReady = false;
                                status = status + " [Pending]";
                                _dataContext.UserState = status;
                                //_dataContext.UserState = status;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Collapsed;
                                //SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                //    _dataContext.IsVoiceStateTimer, "[00:00:00]");
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                  _dataContext.IsVoiceStateTimer, tlblStatus.Text);
                                _currentReadyTime = 0;
                                _currentDNDOnTime = 0;
                                _dataContext.TitleBgColor = null;
                                Datacontext.isRinging = false;
                                Datacontext.isDialling = false;
                            }
                            else if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Do Not Disturb")
                            {
                                _dataContext.CallTypeStatus = string.Empty;
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                TimeSpan time = TimeSpan.FromSeconds(_currentDNDOnTime);
                                string timer = "[" +
                                                string.Format("{0:D2}:{1:D2}:{2:D2}", time.Hours, time.Minutes,
                                                    time.Seconds) + "]";
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource,
                                    _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(), _dataContext.IsVoiceStateTimer, timer);
                            }
                            else
                            {
                                _dataContext.UserState = status;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                            " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();

                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                    _dataContext.IsVoiceStateTimer, "[00:00:00]");
                                _currentDNDOnTime = 0;
                                _dataContext.TitleBgColor = null;
                                Datacontext.isRinging = false;
                                Datacontext.isDialling = false;
                            }
                        }
                        break;

                    case "Ready":
                        if (_agentstate == "Ready")
                        {
                            _currentReadyTime = _currentReadyTime + 1;
                            if (_currentReadyTime <= Datacontext.loadThresholdValues["ready.threshold1.time"])
                            {
                                if (Datacontext.loadThresholdColor["ready.threshold1.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["ready.threshold1.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["ready.threshold1.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["ready.threshold1.color"].ToString()));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                }
                            }
                            else if (_currentReadyTime >= Datacontext.loadThresholdValues["ready.threshold1.time"]
                                        && _currentReadyTime <= Datacontext.loadThresholdValues["ready.threshold2.time"])
                            {
                                if (Datacontext.loadThresholdColor["ready.threshold2.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["ready.threshold2.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["ready.threshold2.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["ready.threshold2.color"].ToString()));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                }
                            }
                            else if (_currentReadyTime > Datacontext.loadThresholdValues["ready.threshold2.time"])
                            {
                                if (Datacontext.loadThresholdColor["ready.threshold3.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["ready.threshold3.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["ready.threshold3.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["ready.threshold3.color"].ToString()));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                }
                            }
                        }
                        else
                        {
                            lock (_agentWrapupTimer)
                            {
                                if (!_agentWrapupTimer.IsEnabled)
                                {
                                }
                                else
                                {
                                    _agentWrapupTimer.Stop();
                                }
                            }
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgReadyStatus;
                            //_dataContext.VoiceStateImageSource =
                            //    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png",
                            //        UriKind.Relative));
                            if (_dataContext.isOnCall || Datacontext.isRinging || Datacontext.isDialling)
                            {
                                _isAgentClickNRCodeOnCall = true;
                                _dataContext.StatusChangeOnVoiceInteraction = status;
                                _dataContext.VoiceNotReadyReasonCode = string.Empty;
                                _dataContext.IsAgentClickedReady = true;
                                _dataContext.UserState = status;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Collapsed;
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                  _dataContext.IsVoiceStateTimer, tlblStatus.Text);
                                _currentReadyTime = 0;
                            }
                            else if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Ready")
                            {
                                _dataContext.CallTypeStatus = string.Empty;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                            " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                TimeSpan time = TimeSpan.FromSeconds(_currentReadyTime);
                                string timer = "[" +
                                                string.Format("{0:D2}:{1:D2}:{2:D2}", time.Hours, time.Minutes,
                                                    time.Seconds) + "]";
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource,
                                    _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(), _dataContext.IsVoiceStateTimer, timer);
                            }
                            else
                            {
                                _dataContext.CallTypeStatus = string.Empty;
                                _dataContext.UserState = status;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                            " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource,
                                    _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(), _dataContext.IsVoiceStateTimer, "[00:00:00]");
                                _currentReadyTime = 0;
                                Datacontext.isRinging = false;
                                Datacontext.isDialling = false;
                            }
                        }
                        break;

                    case "After Call Work":
                        if (_agentstate == "After Call Work")
                        {
                            _afterCallWorktTime = _afterCallWorktTime + 1;
                            _dataContext.TitleBgColor = null;
                        }
                        else
                        {
                            if (_dataContext.isOnCall || Datacontext.isRinging || Datacontext.isDialling)
                            {
                                _dataContext.StatusChangeOnVoiceInteraction = status;
                                _agentstate = status;
                                _dataContext.VoiceNotReadyReasonCode = status;
                                _dataContext.IsAgentClickedReady = false;
                                _dataContext.UserState = status;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Collapsed;
                                _afterCallWorktTime = 0;
                                _dataContext.VoiceStateImageSource = _imageDatacontext.ImgACWStatus;
                                //_dataContext.VoiceStateImageSource =
                                //    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/ACW.png",
                                //        UriKind.Relative));
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                    _dataContext.IsVoiceStateTimer, "[00:00:00]");
                            }
                            else
                            {
                                lock (_agentWrapupTimer)
                                {
                                    if (!_agentWrapupTimer.IsEnabled)
                                    {
                                    }
                                    else
                                    {
                                        _agentWrapupTimer.Stop();
                                    }
                                }

                                //Code added by smoorthy for changing not ready with workmode  ACW - 21-02-2015
                                _dataContext.UserState = status;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                           " - " +
                                                                           _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                _dataContext.VoiceStateImageSource = _imageDatacontext.ImgACWStatus;
                                //_dataContext.VoiceStateImageSource =
                                //    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/ACW.png",
                                //        UriKind.Relative));
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                    _dataContext.IsVoiceStateTimer, "[00:00:00]");
                                Datacontext.isRinging = false;
                                Datacontext.isDialling = false;
                                _afterCallWorktTime = 0;
                            }
                        }
                        break;

                    case "AfterCallWork1":
                        if (_agentstate == "AfterCallWork1")
                        {
                            _afterCallWorktTime = _afterCallWorktTime + 1;
                            _dataContext.TitleBgColor = null;
                        }
                        else
                        {
                            lock (_agentWrapupTimer)
                            {
                                if (!_agentWrapupTimer.IsEnabled)
                                {
                                }
                                else
                                {
                                    _agentWrapupTimer.Stop();
                                }
                            }
                            if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "After Call Work")
                            {
                                _dataContext.UserState = "After Call Work";
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                           " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                _dataContext.VoiceStateImageSource = _imageDatacontext.ImgACWStatus;
                                TimeSpan time = TimeSpan.FromSeconds(_afterCallWorktTime);
                                string timer = "[" +
                                                string.Format("{0:D2}:{1:D2}:{2:D2}", time.Hours, time.Minutes,
                                                    time.Seconds) + "]";
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource,
                             _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(), _dataContext.IsVoiceStateTimer, timer);
                            }
                            else
                            {
                                _dataContext.UserState = "After Call Work";
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "After Call Work";
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                           " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                _dataContext.VoiceStateImageSource = _imageDatacontext.ImgACWStatus;
                                //_dataContext.VoiceStateImageSource =
                                //    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/ACW.png",
                                //        UriKind.Relative));
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                    _dataContext.IsVoiceStateTimer, "[00:00:00]");
                                Datacontext.isRinging = false;
                                Datacontext.isDialling = false;
                                _afterCallWorktTime = 0;
                            }
                        }
                        break;

                    case "Not Ready":
                        if (_agentstate == "Not Ready")
                        {
                            _currentNReadyTime = _currentNReadyTime + 1;
                            if (_currentNReadyTime <= Datacontext.loadThresholdValues["not-ready.threshold1.time"])
                            {
                                if (Datacontext.loadThresholdColor["not-ready.threshold1.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["not-ready.threshold1.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["not-ready.threshold1.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString((Datacontext.loadThresholdColor["not-ready.threshold1.color"].ToString())));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(("#4DBF4D")));
                                }
                                //_dataContext.TitleBgColor =
                                //    (Brush)
                                //        new BrushConverter().ConvertFromString(
                                //            Datacontext.loadThresholdColor["not-ready.threshold1.color"]);
                            }
                            else if (_currentNReadyTime >= Datacontext.loadThresholdValues["not-ready.threshold1.time"] &&
                                        _currentNReadyTime <= Datacontext.loadThresholdValues["not-ready.threshold2.time"])
                            {
                                if (Datacontext.loadThresholdColor["not-ready.threshold2.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["not-ready.threshold2.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["not-ready.threshold2.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["not-ready.threshold2.color"].ToString()));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                }
                            }
                            else if (_currentNReadyTime >=
                                        Datacontext.loadThresholdValues["not-ready.threshold2.time"])
                            {
                                if (Datacontext.loadThresholdColor["not-ready.threshold3.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["not-ready.threshold3.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["not-ready.threshold3.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["not-ready.threshold3.color"].ToString()));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                }
                            }
                        }
                        else
                        {
                            lock (_agentWrapupTimer)
                            {
                                if (!_agentWrapupTimer.IsEnabled)
                                {
                                }
                                else
                                {
                                    _agentWrapupTimer.Stop();
                                }
                            }
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgNotReadyStatus;
                            //_dataContext.VoiceStateImageSource =
                            //    GetBitmapImage(new Uri(
                            //        "/Agent.Interaction.Desktop;component/Images/Not_Ready.png", UriKind.Relative));

                            if (_dataContext.isOnCall || Datacontext.isRinging || Datacontext.isDialling)
                            {
                                _isAgentClickNRCodeOnCall = true;
                                _dataContext.StatusChangeOnVoiceInteraction = status;
                                _dataContext.VoiceNotReadyReasonCode = string.Empty;
                                _dataContext.IsAgentClickedReady = false;
                                _dataContext.UserState = status;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Collapsed;
                                //SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                //    _dataContext.IsVoiceStateTimer, "[00:00:00]");
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                    _dataContext.IsVoiceStateTimer, tlblStatus.Text);
                                _currentNReadyTime = 0;
                            }
                            else if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Not Ready")
                            {
                                _dataContext.CallTypeStatus = string.Empty;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                _dataContext.TitleStatusText = "   " +
                                                                            _dataContext.UserName +
                                                                            " - " +
                                                                       _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                TimeSpan time = TimeSpan.FromSeconds(_currentNReadyTime);
                                string timer = "[" +
                                                string.Format("{0:D2}:{1:D2}:{2:D2}", time.Hours, time.Minutes,
                                                    time.Seconds) + "]";
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                    _dataContext.IsVoiceStateTimer, timer);
                            }
                            else
                            {
                                _dataContext.CallTypeStatus = string.Empty;
                                _dataContext.UserState = status;
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                            " - " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                    _dataContext.IsVoiceStateTimer, "[00:00:00]");
                                _currentNReadyTime = 0;
                                Datacontext.isRinging = false;
                                Datacontext.isDialling = false;
                            }
                        }
                        break;

                    case "OnCall":
                        if (_agentstate == "OnCall")
                        {
                            _talkTime = _talkTime + 1;

                            if (_talkTime <= Datacontext.loadThresholdValues["answer.threshold1.time"])
                            {
                                if (Datacontext.loadThresholdColor["answer.threshold1.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["answer.threshold1.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["answer.threshold1.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["answer.threshold1.color"].ToString()));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                }
                                //_dataContext.TitleBgColor =
                                //    (Brush)
                                //        new BrushConverter().ConvertFromString(
                                //            Datacontext.loadThresholdColor["answer.threshold1.color"]);
                            }
                            else if (_talkTime >= Datacontext.loadThresholdValues["answer.threshold1.time"] &&
                                        _talkTime <= Datacontext.loadThresholdValues["answer.threshold2.time"])
                            {
                                if (Datacontext.loadThresholdColor["answer.threshold2.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["answer.threshold2.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["answer.threshold2.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["answer.threshold2.color"].ToString()));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                }
                            }
                            else if (_talkTime > Datacontext.loadThresholdValues["answer.threshold2.time"])
                            {
                                if (Datacontext.loadThresholdColor["answer.threshold3.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["answer.threshold3.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["answer.threshold3.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["answer.threshold3.color"].ToString()));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                }
                            }
                        }
                        else
                        {
                            _dataContext.IsVoiceStateTimer = Visibility.Collapsed;
                            _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                        " - " + status;

                            TimeSpan time = TimeSpan.FromSeconds(_talkTime);
                            string timer = "[" +
                                            string.Format("{0:D2}:{1:D2}:{2:D2}", time.Hours, time.Minutes,
                                                time.Seconds) + "]";
                            //_talkTime = 0;
                            if (_dataContext.isOnCall)
                            {
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            }
                            else
                            {
                                _dataContext.UserState = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            }
                            SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                _dataContext.IsVoiceStateTimer, timer);
                            Datacontext.isRinging = false;
                            Datacontext.isDialling = false;
                            _dataContext.A_DataTabVisibility = Visibility.Visible;
                        }
                        break;

                    case "OnHold":
                        if (_agentstate == "OnHold")
                        {
                            _holdTime = _holdTime + 1;
                            if (_holdTime <= Datacontext.loadThresholdValues["hold.threshold1.time"])
                            {
                                if (Datacontext.loadThresholdColor["hold.threshold1.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["hold.threshold1.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["hold.threshold1.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["hold.threshold1.color"].ToString()));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                }
                            }
                            else if (_holdTime >= Datacontext.loadThresholdValues["hold.threshold1.time"] &&
                                        _holdTime <= Datacontext.loadThresholdValues["hold.threshold2.time"])
                            {
                                if (Datacontext.loadThresholdColor["hold.threshold2.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["hold.threshold2.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["hold.threshold2.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["hold.threshold2.color"].ToString()));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                }
                            }
                            else if (_holdTime > Datacontext.loadThresholdValues["hold.threshold2.time"])
                            {
                                if (Datacontext.loadThresholdColor["hold.threshold3.color"].ToString().Contains("#"))
                                {
                                    _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["hold.threshold3.color"].ToString()));
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["hold.threshold3.color"].ToString()))
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["hold.threshold3.color"].ToString()));
                                    else
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                }
                            }
                        }
                        else
                        {
                            _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                        " - " + status;
                            // _holdTime = 0;

                            TimeSpan time = TimeSpan.FromSeconds(_holdTime);
                            string timer = "[" +
                                            string.Format("{0:D2}:{1:D2}:{2:D2}", time.Hours, time.Minutes,
                                                time.Seconds) + "]";
                            if (_dataContext.isOnCall)
                            {
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            }
                            else
                            {
                                _dataContext.UserState = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            }
                            _dataContext.IsVoiceStateTimer = Visibility.Collapsed;
                            SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                _dataContext.IsVoiceStateTimer, timer);
                            Datacontext.isRinging = false;
                            Datacontext.isDialling = false;
                        }
                        break;

                    case "OnRinging":
                        if (_agentstate == "OnRinging")
                        {
                            _dataContext.TitleBgColor = null;
                        }
                        else
                        {
                            lock (_agentWrapupTimer)
                            {
                                if (!_agentWrapupTimer.IsEnabled)
                                {
                                }
                                else
                                {
                                    _agentWrapupTimer.Stop();
                                }
                            }
                            _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                        " - " + status;
                            if (_dataContext.isOnCall)
                            {
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            }
                            else
                            {
                                _dataContext.UserState = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            }
                            _dataContext.IsVoiceStateTimer = Visibility.Collapsed;
                            SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                _dataContext.IsVoiceStateTimer, "[00:00:00]");
                            if (!_dataContext.IsCallWindowEnabled)
                                _dataContext.A_DataTabVisibility = Visibility.Visible;
                            Datacontext.isRinging = true;
                            Datacontext.isDialling = false;
                        }
                        break;

                    case "OnDialing":
                        if (_agentstate == "OnDialing")
                        {
                            _dataContext.TitleBgColor = null;
                        }
                        else
                        {
                            lock (_agentWrapupTimer)
                            {
                                if (!_agentWrapupTimer.IsEnabled)
                                {
                                }
                                else
                                {
                                    _agentWrapupTimer.Stop();
                                }
                            }
                            _dataContext.TitleStatusText = "   " + _dataContext.UserName +
                                                                        " -" + status;
                            _dataContext.TitleBgColor = null;
                            if (_dataContext.isOnCall)
                            {
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            }
                            else
                            {
                                _dataContext.UserState = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                            }
                            _dataContext.IsVoiceStateTimer = Visibility.Collapsed;
                            SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                _dataContext.IsVoiceStateTimer, "[00:00:00]");
                            Datacontext.isRinging = false;
                            Datacontext.isDialling = true;
                            //if (_dataContext.IsEnableStatusChangeOncall)
                            //{
                            //    if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Equals("Ready [Pending]"))
                            //    {
                            //        _dataContext.ReadyImageSource =
                            //                GetBitmapIamge(new Uri(_imagePath + "\\Call.NotReady.png",
                            //                    UriKind.Relative));

                            //        _dataContext.ReadyText = (String)FindResource("keyNotReady");
                            //    }
                            //    else
                            //    {
                            //        _dataContext.ReadyImageSource =
                            //           GetBitmapIamge(new Uri(_imagePath + "\\Call.Ready.png",
                            //               UriKind.Relative));
                            //        _dataContext.ReadyText = (String)FindResource("keyReady");
                            //    }
                            //    _dataContext.IsReadyEnabled = true;
                            //}
                        }
                        break;

                    default:
                        if (status.Contains("Not Ready -"))
                        {
                            if (_agentstate == status)
                            {
                                _currentNReadyTime = _currentNReadyTime + 1;

                                if (_currentNReadyTime <= Datacontext.loadThresholdValues["not-ready.threshold1.time"])
                                {
                                    if (Datacontext.loadThresholdColor["not-ready.threshold1.color"].ToString().Contains("#"))
                                    {
                                        _dataContext.TitleBgColor = (Brush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["not-ready.threshold1.color"].ToString()));
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["not-ready.threshold1.color"].ToString()))
                                            _dataContext.TitleBgColor = (Brush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["not-ready.threshold1.color"].ToString()));
                                        else
                                            _dataContext.TitleBgColor = (Brush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                    }
                                }
                                else if (_currentNReadyTime >=
                                            Datacontext.loadThresholdValues["not-ready.threshold1.time"] &&
                                            _currentNReadyTime <=
                                            Datacontext.loadThresholdValues["not-ready.threshold2.time"])
                                {
                                    if (Datacontext.loadThresholdColor["not-ready.threshold2.color"].ToString().Contains("#"))
                                    {
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["not-ready.threshold2.color"].ToString()));
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["not-ready.threshold2.color"].ToString()))
                                            _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["not-ready.threshold2.color"].ToString()));
                                        else
                                            _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                    }
                                }
                                else if (_currentNReadyTime >=
                                            Datacontext.loadThresholdValues["not-ready.threshold2.time"])
                                {
                                    if (Datacontext.loadThresholdColor["not-ready.threshold3.color"].ToString().Contains("#"))
                                    {
                                        _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["not-ready.threshold3.color"].ToString()));
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Datacontext.loadThresholdColor["not-ready.threshold3.color"].ToString()))
                                            _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString(Datacontext.loadThresholdColor["not-ready.threshold3.color"].ToString()));
                                        else
                                            _dataContext.TitleBgColor = (SolidColorBrush)(new BrushConverter().ConvertFromString("#4DBF4D"));
                                    }
                                    //_dataContext.TitleBgColor =
                                    //    (Brush)
                                    //        new BrushConverter().ConvertFromString(
                                    //            Datacontext.loadThresholdColor["not-ready.threshold3.color"]);
                                }
                            }
                            else
                            {
                                lock (_agentWrapupTimer)
                                {
                                    if (!_agentWrapupTimer.IsEnabled)
                                    {
                                    }
                                    else
                                    {
                                        _agentWrapupTimer.Stop();
                                    }
                                }

                                _dataContext.VoiceStateImageSource = _imageDatacontext.ImgNotReadyStatus;
                                //_dataContext.VoiceStateImageSource =
                                //    GetBitmapImage(
                                //        new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                //            UriKind.Relative));
                                if (_dataContext.isOnCall || Datacontext.isRinging || Datacontext.isDialling)
                                {
                                    _isAgentClickNRCodeOnCall = true;
                                    _dataContext.StatusChangeOnVoiceInteraction = status;
                                    _dataContext.IsAgentClickedNotReady = true;
                                    _dataContext.IsAgentClickedReady = false;
                                    _dataContext.UserState = status;
                                    _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                    _dataContext.IsVoiceStateTimer = Visibility.Collapsed;
                                    //SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                    //    _dataContext.IsVoiceStateTimer, "[00:00:00]");
                                    SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource, _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(),
                                       _dataContext.IsVoiceStateTimer, tlblStatus.Text);
                                    _currentNReadyTime = 0;
                                }
                                else if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == status)
                                {
                                    _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                    _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                    _dataContext.TitleStatusText = "   " +
                                                                                _dataContext.UserName +
                                                                                " - " +
                                                                           _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                    TimeSpan time = TimeSpan.FromSeconds(_currentNReadyTime);
                                    string timer = "[" +
                                                    string.Format("{0:D2}:{1:D2}:{2:D2}", time.Hours, time.Minutes,
                                                        time.Seconds) + "]";
                                    SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource,
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(), _dataContext.IsVoiceStateTimer,
                                        timer);
                                }
                                else
                                {
                                    _dataContext.UserState = status;
                                    _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = status;
                                    _dataContext.IsVoiceStateTimer = Visibility.Visible;
                                    _dataContext.TitleStatusText = "   " +
                                                                                _dataContext.UserName +
                                                                                " - " +
                                                                           _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                    //_dataContext.VoiceStateImageSource =
                                    //    GetBitmapIamge(
                                    //        new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                    //            UriKind.Relative));
                                    SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource,
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(), _dataContext.IsVoiceStateTimer,
                                        "[00:00:00]");
                                    _currentNReadyTime = 0;
                                    Datacontext.isRinging = false;
                                    Datacontext.isDialling = false;
                                }
                            }
                        }
                        break;
                }
                softPhnone = null;
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar:ChangeVoiceStatus():" + commonException);
            }
        }

        /// <summary>
        /// Changing phones the status.
        /// </summary>
        /// <param name="phoneStatus">The phone status.</param>
        public void ChangingphoneStatus(SoftPhoneStatusController phoneStatus)
        {
            Dispatcher.Invoke((Action)(delegate
            {
                _logger.Info("Button state set to : " + phoneStatus.ToString());
                try
                {
                    //Code Added - This Condition has been added to handle Button state when an agent is oncall and choosing notready reasoncode
                    //V.Palaniappan - 11.12.2013
                    //if (!_isAgentClickNRCodeOnCall)
                    //{
                    if (!phoneStatus.ReleaseButtonStatus && !phoneStatus.HoldButtonStatus &&
                        !phoneStatus.RetrieveButtonStatus && !phoneStatus.CancelConferenceStatus &&
                        !phoneStatus.CancelTransferStatus)
                    {
                        if (string.Compare(_agentstate, "OnCall") != 0 && string.Compare(_agentstate, "OnHold") != 0 && !string.IsNullOrEmpty(_agentstate))
                        {
                            _dataContext.isOnCall = false;
                            btnLogin.IsEnabled = true;
                            _dataContext.LogImageSource = _imageDatacontext.ImgLoginEnabled;
                            //_dataContext.LogImageSource =
                            //    GetBitmapImage(new Uri(_imagePath + "\\Login-in-icon.png", UriKind.Relative));
                            _dataContext.LogText = (String)FindResource("keyLogin");
                        }
                        else
                        {
                            if (string.Compare(_agentstate, "Logout") == 0 && !string.IsNullOrEmpty(_agentstate))
                            {
                                btnLogin.IsEnabled = true;
                                _dataContext.LogImageSource = _imageDatacontext.ImgLogoutEnabled;
                                //_dataContext.LogImageSource =
                                //    GetBitmapImage(new Uri(_imagePath + "\\Login-out-icon.png", UriKind.Relative));
                                _dataContext.LogText = (String)FindResource("keyLogout");
                            }
                            else if (string.Compare(_agentstate, "OnHold") == 0 && !string.IsNullOrEmpty(_agentstate))
                            {
                                btnLogin.IsEnabled = false;
                                _dataContext.LogImageSource = _imageDatacontext.ImgLogoutDisabled;
                                //_dataContext.LogImageSource =
                                //    GetBitmapImage(new Uri(_imagePath + "\\Login-out-icon.Disable.png", UriKind.Relative));
                                _dataContext.LogText = (String)FindResource("keyLogout");
                                _dataContext.isOnCall = true;
                                //Code added by vinoth to show DTMF text in dial button
                                //25th July 2014
                                if (_configContainer.AllKeys.Contains("voice.enable.dtmf") &&
                           ((string)_configContainer.GetValue("voice.enable.dtmf")).ToLower().Equals("true"))
                                {
                                    _dataContext.IsDialEnabled = true;
                                    _dataContext.DialText = (String)FindResource("KeyDTMF");
                                    _dataContext.DialImageSource = _imageDatacontext.ImgDialPadEnabled;
                                    //_dataContext.DialImageSource =
                                    //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.png", UriKind.Relative));
                                }
                                else
                                {
                                    _logger.Info("voice.enable.dtmf key fails and showing dial button text");
                                    _dataContext.IsDialEnabled = false;
                                    _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                                    //_dataContext.DialImageSource =
                                    //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png", UriKind.Relative));
                                    _dataContext.DialText = (String)FindResource("KeyDial");
                                }
                            }
                        }
                    }
                    else
                    {
                        btnLogin.IsEnabled = false;
                        _dataContext.LogImageSource = _imageDatacontext.ImgLogoutDisabled;
                        //_dataContext.LogImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Login-out-icon.Disable.png", UriKind.Relative));
                        _dataContext.LogText = (String)FindResource("keyLogout");
                        _dataContext.isOnCall = true;
                        //Code added by vinoth to show DTMF text in dial button
                        //25th July 2014
                        if (_configContainer.AllKeys.Contains("voice.enable.dtmf") &&
                         ((string)_configContainer.GetValue("voice.enable.dtmf")).ToLower().Equals("true"))
                        {
                            _dataContext.IsDialEnabled = true;
                            _dataContext.DialText = (String)FindResource("KeyDTMF");
                            _dataContext.DialImageSource = _imageDatacontext.ImgDialPadEnabled;
                            //_dataContext.DialImageSource =
                            //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.png", UriKind.Relative));
                        }
                        else
                        {
                            _logger.Info("voice.enable.dtmf key fails and showing dial button text");
                            _dataContext.IsDialEnabled = false;
                            _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                            //_dataContext.DialImageSource =
                            //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png", UriKind.Relative));
                            _dataContext.DialText = (String)FindResource("KeyDial");
                        }
                        //End
                    }

                    //Login and Logout button Status
                    if (phoneStatus.LoginButtonStatus)
                    {
                        if (!_dataContext.isOnCall)
                        {
                            #region Old Code commented after checking with IWS

                            //if (_agentstate.Contains("Out Of Service"))
                            //{
                            //    btnLogin.IsEnabled = false;
                            //    _dataContext.LogImageSource = _imageDatacontext.ImgLoginDisabled;
                            //    _dataContext.LogText = (String)FindResource("keyLogin");
                            //    btnDial.IsEnabled = false;
                            //}
                            //else
                            //{
                            //    _dataContext.LogImageSource = _imageDatacontext.ImgLoginEnabled;
                            //    _dataContext.LogText = (String)FindResource("keyLogin");
                            //    _dataContext.IsDialEnabled = false;
                            //}
                            //_dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                            //_dataContext.DialText = (String)FindResource("KeyDial");

                            #endregion Old Code commented after checking with IWS

                            //_dataContext.LogImageSource =
                            //    GetBitmapImage(new Uri(_imagePath + "\\Login-in-icon.png", UriKind.Relative));
                            btnLogin.IsEnabled = true;
                            _dataContext.LogImageSource = _imageDatacontext.ImgLoginEnabled;
                            _dataContext.LogText = (String)FindResource("keyLogin");
                            _dataContext.IsDialEnabled = false;
                            _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                            //_dataContext.DialImageSource =
                            //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png", UriKind.Relative));
                            _dataContext.DialText = (String)FindResource("KeyDial");
                        }
                    }
                    else
                    {
                        if (!_dataContext.isOnCall)
                        {
                            btnLogin.IsEnabled = true;
                            _dataContext.LogImageSource = _imageDatacontext.ImgLogoutEnabled;
                            //_dataContext.LogImageSource =
                            //    GetBitmapImage(new Uri(_imagePath + "\\Login-out-icon.png", UriKind.Relative));
                            _dataContext.LogText = (String)FindResource("keyLogout");
                            _dataContext.IsDialEnabled = true;
                            _dataContext.DialImageSource = _imageDatacontext.ImgDialPadEnabled;
                            //_dataContext.DialImageSource =
                            //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.png", UriKind.Relative));
                            _dataContext.DialText = (String)FindResource("KeyDial");
                        }
                    }
                    //End

                    //Checking Ready and NotReady button status
                    if (phoneStatus.ReadyButtonStatus && !phoneStatus.NotreadyButtonStatus)
                    {
                        if (!_dataContext.isOnCall)
                        {
                            //if (_dataContext.ReadyText != string.Empty &&
                            //            _dataContext.ReadyText != "Ready")
                            {
                                _dataContext.ReadyImageSource = _imageDatacontext.ImgReadyEnabled;
                                //_dataContext.ReadyImageSource =
                                //    GetBitmapImage(new Uri(_imagePath + "\\Call.Ready.png",
                                //        UriKind.Relative));
                                _dataContext.ReadyText = (String)FindResource("keyReady");
                                _dataContext.IsReadyEnabled = true;
                            }
                        }
                    }
                    else if (phoneStatus.NotreadyButtonStatus && !phoneStatus.ReadyButtonStatus)
                    {
                        if (!_dataContext.isOnCall)
                        {
                            if (_dataContext.IsAgentClickedReady)
                            {
                                _dataContext.ReadyImageSource = _imageDatacontext.ImgNotReadyEnabled;
                                _dataContext.ReadyText = (String)FindResource("keyNotReady");
                            }
                            else
                            {
                                _dataContext.ReadyImageSource = _imageDatacontext.ImgReadyEnabled;
                                _dataContext.ReadyText = (String)FindResource("keyReady");
                            }
                            _dataContext.IsReadyEnabled = true;
                        }
                        else
                        {
                            if (_dataContext.IsAgentClickedReady)
                            {
                                _dataContext.ReadyImageSource = _imageDatacontext.ImgNotReadyEnabled;
                                //_dataContext.ReadyImageSource =
                                //    GetBitmapImage(new Uri(_imagePath + "\\Call.NotReady.png",
                                //        UriKind.Relative));

                                _dataContext.ReadyText = (String)FindResource("keyNotReady");
                            }
                            else
                            {
                                _dataContext.ReadyImageSource = _imageDatacontext.ImgReadyEnabled;
                                //_dataContext.ReadyImageSource =
                                //    GetBitmapImage(new Uri(_imagePath + "\\Call.Ready.png",
                                //        UriKind.Relative));
                                _dataContext.ReadyText = (String)FindResource("keyReady");
                            }
                            _dataContext.IsReadyEnabled = true;
                        }
                    }
                    else if (!phoneStatus.NotreadyButtonStatus && !phoneStatus.ReadyButtonStatus)
                    {
                        if (!_dataContext.isOnCall)
                        {
                            // if (_dataContext.ReadyText != "Not Ready")
                            {
                                _dataContext.ReadyImageSource = _imageDatacontext.ImgNotReadyDisabled;
                                //_dataContext.ReadyImageSource =
                                //    GetBitmapImage(new Uri(_imagePath + "\\Call.NotReady.Disable.png",
                                //        UriKind.Relative));
                                _dataContext.ReadyText = (String)FindResource("keyNotReady");
                            }
                            _dataContext.IsReadyEnabled = false;
                        }
                    }
                    //End

                    //Checking Answer and Release Button Status
                    if (phoneStatus.AnswerButtonStatus && !phoneStatus.ReleaseButtonStatus)
                    {
                        _dataContext.TalkImageSource = _imagePath + "\\Call.Blink.gif";
                        _dataContext.TalkText = (String)FindResource("KeyTalk");
                        _dataContext.IsTalkEnabled = true;
                        //Code Added - V.Palaniappan
                        //13.12.2013
                        btnLogin.IsEnabled = false;
                        _dataContext.LogImageSource = _imageDatacontext.ImgLogoutDisabled;
                        //_dataContext.LogImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Login-out-icon.Disable.png", UriKind.Relative));
                        _dataContext.LogText = (String)FindResource("keyLogout");

                        _dataContext.IsDialEnabled = false;
                        _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                        //_dataContext.DialImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png", UriKind.Relative));
                        _dataContext.DialText = (String)FindResource("KeyDial");
                        //End
                    }
                    else if (phoneStatus.ReleaseButtonStatus && !phoneStatus.AnswerButtonStatus)
                    {
                        _dataContext.TalkImageSource = _imagePath + "\\Call.Release.png";
                        _dataContext.TalkText = (String)FindResource("KeyRelease");
                        _dataContext.IsTalkEnabled = true;

                        //Code Added - To resolve issues like while agent is in dialing status we should make agent notready as disable
                        //1.10.2013 V.Palaniappan

                        //if (_dataContext.ReadyImageSource != null &&
                        //    !Datacontext.GetInstance()
                        //        .ReadyImageSource.ToString()
                        //        .Contains("Call.NotReady.Disable.png"))
                        //{
                        //    _dataContext.ReadyImageSource =
                        //        GetBitmapIamge(new Uri(_imagePath + "\\Call.NotReady.Disable.png",
                        //            UriKind.Relative));
                        //    _dataContext.ReadyText = (String)FindResource("keyNotReady");
                        //}

                        //Code check with on call, when release button true and answer button false then agent is on call, so disable the notready button
                        //if (_dataContext.isOnCall)
                        {
                            _dataContext.ReadyImageSource = _imageDatacontext.ImgNotReadyDisabled;
                            //_dataContext.ReadyImageSource =
                            //    GetBitmapImage(new Uri(_imagePath + "\\Call.NotReady.Disable.png",
                            //        UriKind.Relative));
                            _dataContext.ReadyText = (String)FindResource("keyNotReady");
                        }
                        _dataContext.IsReadyEnabled = false;
                        //End
                    }
                    else
                    {
                        _dataContext.TalkImageSource = _imagePath + "\\Call.Disable.png";
                        _dataContext.TalkText = (String)FindResource("KeyTalk");
                        _dataContext.IsTalkEnabled = false;
                    }
                    //End

                    //Checking Hold and Retrieve Button State
                    if (phoneStatus.HoldButtonStatus && !phoneStatus.RetrieveButtonStatus)
                    {
                        _dataContext.HoldImageSource = _imageDatacontext.ImgHoldEnabled;
                        //_dataContext.HoldImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Hold.png",
                        //        UriKind.Relative));
                        _dataContext.HoldText = (String)FindResource("KeyHold");
                        _dataContext.IsHoldClicked = false;
                        _dataContext.IsHoldEnabled = true;
                    }
                    else if (phoneStatus.RetrieveButtonStatus && !phoneStatus.HoldButtonStatus)
                    {
                        _logger.Debug("Checking Hold button state");
                        _dataContext.HoldImageSource = _imageDatacontext.ImgRetrieveEnabled;
                        //_dataContext.HoldImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Retrive.png",
                        //        UriKind.Relative));
                        _dataContext.ReadyImageSource = _imageDatacontext.ImgNotReadyDisabled;
                        _dataContext.ReadyText = (String)FindResource("keyNotReady");
                        _dataContext.IsReadyEnabled = false;

                        _dataContext.HoldText = (String)FindResource("KeyRetrieve");
                        _dataContext.IsHoldEnabled = true;
                        _dataContext.IsHoldClicked = true;
                        _logger.Debug("Checking Hold button state end");
                    }
                    else
                    {
                        _dataContext.HoldImageSource = _imageDatacontext.ImgHoldDisabled;
                        //_dataContext.HoldImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Hold.Disable.png",
                        //        UriKind.Relative));
                        _dataContext.HoldText = (String)FindResource("KeyHold");
                        _dataContext.IsHoldEnabled = false;
                        _dataContext.IsHoldClicked = false;
                    }
                    //End

                    //Checking Transfer Button Status
                    if (phoneStatus.TransferInitiateStatus && !phoneStatus.TransferCompleteStatus)
                    {
                        _dataContext.TransImageSource = _imageDatacontext.ImgTransEnabled;
                        //_dataContext.TransImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Transfer.png",
                        //        UriKind.Relative));
                        _dataContext.TransText = (String)FindResource("KeyTransfer");
                        _dataContext.IsTransEnabled = true;
                    }
                    else if (phoneStatus.TransferCompleteStatus && !phoneStatus.TransferInitiateStatus)
                    {
                        _dataContext.TransImageSource = _imageDatacontext.ImgCompTransEnabled;
                        //_dataContext.TransImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Transfer.Complete.png",
                        //        UriKind.Relative));
                        _dataContext.TransText = (String)FindResource("keyCompleteTransfer");
                        _dataContext.IsTransEnabled = true;
                    }
                    else
                    {
                        _dataContext.TransImageSource = _imageDatacontext.ImgTransDisabled;
                        //_dataContext.TransImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Transfer.Disable.png",
                        //        UriKind.Relative));
                        _dataContext.TransText = (String)FindResource("KeyTransfer");
                        _dataContext.IsTransEnabled = false;
                    }
                    //End

                    if (phoneStatus.ConferenceInitiateStatus && !phoneStatus.CompleteConferenceStatus)
                    {
                        _dataContext.ConfImageSource = _imageDatacontext.ImgConfEnabled;
                        //_dataContext.ConfImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Confrence.png",
                        //        UriKind.Relative));
                        _dataContext.ConfText = (String)FindResource("keyConfrence");
                        _dataContext.IsConfEnabled = true;
                    }
                    else if (phoneStatus.CompleteConferenceStatus && !phoneStatus.ConferenceInitiateStatus)
                    {
                        _dataContext.ConfImageSource = _imageDatacontext.ImgCompConfEnabled;
                        //_dataContext.ConfImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Confrence.Complete.png",
                        //        UriKind.Relative));
                        _dataContext.ConfText = (String)FindResource("keyCompleteConfrence");
                        _dataContext.IsConfEnabled = true;
                    }
                    else if (phoneStatus.DeleteConferenceStatus)
                    {
                        _dataContext.ConfImageSource = _imageDatacontext.ImgDeleteConfEnabled;
                        //_dataContext.ConfImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.DeleteConf.png",
                        //        UriKind.Relative));
                        _dataContext.ConfText = (String)FindResource("KeyDeleteConference");
                        _dataContext.IsConfEnabled = true;
                    }
                    else
                    {
                        _dataContext.ConfImageSource = _imageDatacontext.ImgCompConfDisabled;
                        //_dataContext.ConfImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Confrence.Disable.png",
                        //        UriKind.Relative));
                        _dataContext.ConfText = (String)FindResource("keyConfrence");
                        _dataContext.IsConfEnabled = false;
                    }
                    if (phoneStatus.CancelTransferStatus && !phoneStatus.CancelConferenceStatus)
                    {
                        _dataContext.ReConImageSource = _imageDatacontext.ImgReconnectEnabled;
                        //_dataContext.ReConImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.ReConnect.png",
                        //        UriKind.Relative));
                        _dataContext.ReConText = (String)FindResource("KeyReConnect");
                        _dataContext.IsReConEnabled = true;
                    }
                    else if (phoneStatus.CancelConferenceStatus && !phoneStatus.CancelTransferStatus)
                    {
                        _dataContext.ReConImageSource = _imageDatacontext.ImgReconnectEnabled;
                        //_dataContext.ReConImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.ReConnect.png",
                        //        UriKind.Relative));
                        _dataContext.ReConText = (String)FindResource("KeyReConnect");
                        _dataContext.IsReConEnabled = true;
                    }
                    else
                    {
                        _dataContext.ReConImageSource = _imageDatacontext.ImgReconnectDisabled;
                        //_dataContext.ReConImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.ReConnect.Disable.png",
                        //        UriKind.Relative));
                        _dataContext.ReConText = (String)FindResource("KeyReConnect");
                        _dataContext.IsReConEnabled = false;
                    }
                    //Code Added - V.Palaniappan
                    //04.12.2013
                    if (phoneStatus.AlternateButtonStatus)
                    {
                        _dataContext.AlternateCallImageSource = _imageDatacontext.ImgAltCallEnabled;
                        //_dataContext.AlternateCallImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Alternative.png", UriKind.Relative));
                        _dataContext.IsAlternateCallEnabled = true;
                    }
                    else
                    {
                        _dataContext.AlternateCallImageSource = _imageDatacontext.ImgAltCallDisabled;
                        //_dataContext.AlternateCallImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Alternative.Disable.png", UriKind.Relative));
                        _dataContext.IsAlternateCallEnabled = false;
                    }

                    if (phoneStatus.MergeButtonStatus)
                    {
                        _dataContext.MergeCallImageSource = _imageDatacontext.ImgMergeCallEnabled;
                        //_dataContext.MergeCallImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Merge.png", UriKind.Relative));
                        _dataContext.IsMergeCallEnabled = true;
                    }
                    else
                    {
                        _dataContext.MergeCallImageSource = _imageDatacontext.ImgMergeCallDisabled;
                        //_dataContext.MergeCallImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Merge.Disable.png", UriKind.Relative));
                        _dataContext.IsMergeCallEnabled = false;
                    }
                    //End
                    if (!_dataContext.isOnCall)
                    {
                        _dataContext.IsAttachDataEnabled = false;
                        _dataContext.AttachDataImageSource = _imageDatacontext.ImgCallDataDisabled;
                        //_dataContext.AttachDataImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.AttachData.Disable.png",
                        //        UriKind.Relative));
                        _dataContext.AttachDataText = (String)FindResource("KeyCallData");
                    }
                    else
                    {
                        _dataContext.IsAttachDataEnabled = true;
                        _dataContext.AttachDataImageSource = _imageDatacontext.ImgCallDataEnabled;
                        //_dataContext.AttachDataImageSource =
                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.AttachData.png", UriKind.Relative));
                        _dataContext.AttachDataText = (String)FindResource("KeyCallData");
                    }
                    //}
                    //else
                    if (_isAgentClickNRCodeOnCall)
                    {
                        if (!phoneStatus.RetrieveButtonStatus)
                        {
                            _getNotReadyButtonStatus = phoneStatus;
                            _isAgentClickNRCodeOnCall = false;
                        }
                    }
                    //End
                }
                catch (Exception commonException)
                {
                    _logger.Error("ChangingphoneStatus:" + commonException);
                }
            }));
        }

        /// <summary>
        ///     Checks the disposition.
        /// </summary>
        /// <returns></returns>
        public bool CheckDisposition()
        {
            if (_configContainer.GetAsBoolean("interaction.enable.disposition-code", true) &&
                   _configContainer.GetAsBoolean("interaction.disposition.is-mandatory", false) &&
                   !_configContainer.GetAsBoolean("voice.enable.popup-disposition", false))
            {
                if (_dataContext.IsDispositionNoneChecked)
                    return false;
            }
            return true;
        }

        //end
        public void CheckValidDigits()
        {
            for (int increment = 0; increment < txtDN.Items.Count; increment++)
            {
                if (txtDN.Items[increment].ToString().Length > _dataContext.MaxDialDigits)
                {
                    var item = txtDN.ItemContainerGenerator.ContainerFromIndex(increment) as ComboBoxItem;
                    if (item != null)
                    {
                        if (item.IsEnabled)
                            item.IsEnabled = false;
                    }
                }
                else
                {
                    var item = txtDN.ItemContainerGenerator.ContainerFromIndex(increment) as ComboBoxItem;
                    if (item != null)
                    {
                        if (!item.IsEnabled)
                            item.IsEnabled = true;
                    }
                }
            }
        }

        /// <summary>
        /// Closes the call data window.
        /// </summary>
        public void CloseCallDataWindow(Window callwindow = null)
        {
            var left = 0.0;
            var top = 0.0;
            var width = 0.0;
            var height = 0.0;
            if (callwindow != null)
            {
                left = callwindow.Left;
                top = callwindow.Top;
                width = callwindow.Width;
                height = callwindow.Height;
            }
            else
            {
                callwindow = IsWindowOpen<Window>("CallDataWin");
                if (callwindow != null)
                {
                    left = callwindow.Left;
                    top = callwindow.Top;
                    width = callwindow.Width;
                    height = callwindow.Height;
                    callwindow.Close();
                }
            }
            if (callwindow == null) return;
            var dic = new Dictionary<string, string>();
            dic.Add("voice.calldata.popup-position", left.ToString() + "," + top.ToString());
            dic.Add("voice.calldata.popup-size", height.ToString() + "," + width.ToString());

            if (_configContainer.GetAsBoolean("enable.save.location-locally", false))
            {
                //save in file.
                try
                {
                    var path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData).ToString() + @"\Pointel\AgentInteractionDesktop\" + _dataContext.UserName + ".config";
                    (new XMLHandler()).CDPW_UpdateXmlData(path, dic);
                }
                catch (Exception ex)
                {
                    _logger.Warn("Error occurred while saving the call window configuration locally as : " + ex.ToString());
                }
            }
            else
            {
                //save in annex.
                try
                {
                    var tempkvc = new KeyValueCollection();
                    foreach (var item in dic.Keys)
                        tempkvc.Add(item, dic[item]);
                    var agentDeatils = (KeyValueCollection)_dataContext.Person.UserProperties["agent.ixn.desktop"];

                    if (agentDeatils == null)
                        _dataContext.Person.UserProperties.Add("agent.ixn.desktop", tempkvc);
                    else
                    {
                        foreach (var item in tempkvc.AllKeys)
                        {
                            if (!agentDeatils.AllKeys.Contains(item))
                                agentDeatils.Add(item, tempkvc[item]);
                            else
                                agentDeatils[item] = tempkvc[item];
                        }
                        _dataContext.Person.UserProperties["agent.ixn.desktop"] = agentDeatils;
                    }

                    _dataContext.Person.Save();
                }
                catch (Exception ex)
                {
                    _logger.Warn("Error occurred while saving the call window configuration in annex as : " + ex.ToString());
                }

            }
        }

        public string ContactUpdation(string operationType, string contactId, Genesyslab.Platform.Contacts.Protocols.ContactServer.AttributesList attributeList)
        {
            try
            {
                if (operationType == "Add")
                {
                }
                else if (operationType == "Update")
                {
                    if (contactId.Equals(_contactId))
                    {
                        GetContactInformation(contactId, null);
                        //LoadMyContacts();
                    }
                }
                else if (operationType == "Delete")
                {
                }
                if (contactId.Equals(_contactId))
                {
                    GetContactInformation(contactId, null);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
            return null;
        }

        /// <summary>
        /// Displays the own dn call error message.txtDN
        /// </summary>
        public void DisplayOwnDNCallErrorMessage()
        {
            try
            {
                KeyValueCollection errorMessage = new KeyValueCollection();
                errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                errorMessage.Add("IWS_Subject", "Call origination and destination are same");
                errorMessage.Add("IWS_Sender", "System");
                errorMessage.Add("IWS_Priority", "4");
                errorMessage.Add("IWS_MessageType", "System");
                errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                errorMessage.Add("IWS_Topic", _dataContext.UserName);
                GettingUserData(VoiceEvents.None, errorMessage);
                //txtDN.Text = string.Empty;
                _dataContext.IsInitiateConfClicked = false;
                _dataContext.IsInitiateTransClicked = false;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message.ToString());
            }
        }

        /// <summary>
        /// Getting the user data.
        /// </summary>
        /// <param name="callData">The call data.</param>
        public void GettingUserData(VoiceEvents voiceEvents, object callData)
        {
            string _firstName = string.Empty;
            string _lastName = string.Empty;
            string _emailAddress = string.Empty;
            this.Dispatcher.Invoke((Action)(delegate
            {
                try
                {
                    _logger.Debug("GettingUserData Entry");
                    KeyValueCollection attachData = callData as KeyValueCollection;
                    if (voiceEvents == VoiceEvents.None)
                    {
                        #region Error Message

                        foreach (var pair in attachData.Keys)
                        {
                            if (_dataContext.BroadCastSubscribTopics.Contains(attachData["IWS_Topic"].ToString()) && _dataContext.BroadCastSubscribTopics != null)
                            {
                                if (pair.ToString().Equals("IWS_Message"))
                                {
                                    _dataContext.MessageBodyMsg = attachData[pair.ToString()].ToString();
                                    if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("fewwords")))
                                    {
                                        _dataContext.BroadCastToastOrder[
                                            (Datacontext.GetInstance()
                                                .BroadCastToastOrder.Select((c, i) => new { c, i })
                                                .Where(x => x.c.StartsWith("fewwords"))
                                                .FirstOrDefault()).i] = "fewwords$" + attachData[pair.ToString()].ToString();
                                    }
                                }
                                if (pair.ToString().Equals("IWS_Subject"))
                                {
                                    _dataContext.MessageSubject = attachData[pair.ToString()].ToString();
                                    if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("subject")))
                                    {
                                        _dataContext.BroadCastToastOrder[
                                            (Datacontext.GetInstance()
                                                .BroadCastToastOrder.Select((c, i) => new { c, i })
                                                .Where(x => x.c.StartsWith("subject"))
                                                .FirstOrDefault()).i] = "subject$" + attachData[pair.ToString()].ToString();
                                    }
                                }
                                if (pair.ToString().Equals("IWS_Sender"))
                                {
                                    _dataContext.MessageSender = attachData[pair.ToString()].ToString();
                                    if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("sender")))
                                    {
                                        _dataContext.BroadCastToastOrder[
                                            (Datacontext.GetInstance()
                                                .BroadCastToastOrder.Select((c, i) => new { c, i })
                                                .Where(x => x.c.StartsWith("sender"))
                                                .FirstOrDefault()).i] = "sender$" + attachData[pair.ToString()].ToString();
                                    }
                                }
                                if (pair.ToString().Equals("IWS_Priority"))
                                {
                                    ////Pls check pair.Value is int r string and then pass it as key in BroadcastPriority.
                                    _dataContext.MessagePriority =
                                        _broadcastPriority[Convert.ToInt32((string.IsNullOrEmpty(attachData[pair.ToString()].ToString()) == true ? "0" : attachData[pair.ToString()].ToString()))];
                                    _dataContext.BroadCastBackgroundBrush =
                                        (Brush)(new BrushConverter().ConvertFromString(
                                                _dataContext.BroadCastAttributes[
                                                    _broadcastPriority[Convert.ToInt32(attachData[pair.ToString()].ToString())]]));
                                    var color =
                                        (System.Windows.Media.Color)
                                            ColorConverter.ConvertFromString(
                                                _dataContext.BroadCastAttributes[
                                                    _broadcastPriority[Convert.ToInt32(attachData[pair.ToString()].ToString())]]);

                                    var brush = new SolidColorBrush(color);
                                    if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("priority")))
                                    {
                                        _dataContext.BroadCastToastOrder[
                                            (Datacontext.GetInstance()
                                                .BroadCastToastOrder.Select((c, i) => new { c, i })
                                                .Where(x => x.c.StartsWith("priority"))
                                                .FirstOrDefault()).i] = "priority$" +
                                                                        _dataContext.MessagePriority;
                                    }
                                }
                                if (pair.ToString().Equals("IWS_MessageType"))
                                {
                                    _dataContext.MessageType = attachData[pair.ToString()].ToString();
                                    if (attachData[pair.ToString()].ToString().ToLower().TrimEnd().TrimStart() == "system")
                                        _dataContext.MessageIconImageSource =
                                           GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/BroadCast.System.png",
                                                    UriKind.Relative));
                                    else if (attachData[pair.ToString()].ToString().ToLower().TrimEnd().TrimStart() == "internal note")
                                        _dataContext.MessageIconImageSource =
                                            GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/BroadCast.Note.png",
                                                    UriKind.Relative));
                                    else if (attachData[pair.ToString()].ToString().ToLower().TrimEnd().TrimStart() == "error" ||
                                                attachData[pair.ToString()].ToString().ToLower() == "information" || attachData[pair.ToString()].ToString() == string.Empty)
                                        _dataContext.MessageIconImageSource =
                                            GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/BroadCast.InfoError.png",
                                                    UriKind.Relative));
                                }
                                if (pair.ToString().Equals("IWS_Date"))
                                {
                                    _dataContext.MessageDate = attachData[pair.ToString()].ToString();
                                }
                                if (pair.ToString().Equals("IWS_Topic"))
                                {
                                    _dataContext.MessageAudience = attachData[pair.ToString()].ToString();
                                }
                            }
                        }

                        if (attachData.ContainsKey("IWS_Topic"))
                        {
                            if (_dataContext.BroadCastSubscribTopics.Contains(attachData["IWS_Topic"]))
                            {
                                _dataContext.OpenedNotifyMessage = _dataContext.MyMessages.Count.ToString();
                                Datacontext.GetInstance()
                                    .MyMessages.Add(new MyMessages(Datacontext.GetInstance()
                                    .MyMessages.Count, _dataContext.MessageIconImageSource,
                                        _dataContext.MessageType,
                                        _dataContext.MessageSender,
                                        _dataContext.MessageSubject,
                                        _dataContext.MessagePriority,
                                        _dataContext.MessageDate,
                                        _dataContext.MessageAudience,
                                        _dataContext.MessageBodyMsg, false));
                                _dataContext.UnreadMsgCount++;
                                _dataContext.UnreadMessageCount = (_dataContext.UnreadMsgCount) >= 9 ? "9" : (_dataContext.UnreadMsgCount).ToString();
                                _dataContext.MessageCountRange = _dataContext.UnreadMsgCount <= 0 ? "-1" : (_dataContext.UnreadMsgCount <= 9 ? "0" : "1");
                                txtNoBroadcastMessage.Visibility = Visibility.Collapsed;
                                if (_isShowBroadCast)
                                {
                                    _broadCastNotifier.Show();
                                    _isShowBroadCast = false;
                                }
                                _broadCastNotifier.Notify(Height, _isbottom);
                            }
                            int item = 0;
                            foreach (string value in _dataContext.BroadCastToastOrder)
                            {
                                string[] txt = null;
                                string[] temp = value.Split('$');
                                if (temp.Count() == 2)
                                {
                                    if (temp[1].Contains("\n"))
                                    {
                                        txt = temp[1].Split(new[] { '\n', '\r' });
                                        temp[1] = string.Empty;
                                        foreach (string s in txt)
                                        {
                                            temp[1] = temp[1] + s;
                                        }
                                    }
                                    if (item == 0)
                                    {
                                        _dataContext.Message1 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                                    }
                                    else if (item == 1)
                                    {
                                        _dataContext.Message2 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                                    }
                                    else if (item == 2)
                                    {
                                        _dataContext.Message3 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                                    }
                                    else if (item == 3)
                                    {
                                        _dataContext.Message4 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                                    }
                                }
                                item++;
                            }
                        }
                        BindGridForNotifer();

                        #endregion Error Message
                    }
                    else
                    {
                        //foreach (var item in attachData.AllKeys)
                        //{
                        //    if (item.ToLower() == "mid")
                        //        _mid = attachData[item].ToString();
                        //}
                        if (attachData.AllKeys.Contains("MID"))
                            _mid = attachData["MID"].ToString();
                        if (_configContainer.GetAsBoolean("voice.requeue.remember-comments"))
                        {
                            var commentkey = _configContainer.GetAsString("voice.requeue.attach-data.comments.key-name");
                            if (commentkey == "No key found" || string.IsNullOrEmpty(commentkey))
                                commentkey = "Comments";
                            if (attachData.AllKeys.Contains(commentkey))
                                _dataContext.RequeueComments = Uri.UnescapeDataString(attachData[commentkey].ToString());
                            else
                                _dataContext.RequeueComments = "";
                        }
                        else
                            _dataContext.RequeueComments = "";

                        _feedbackNumber = string.Empty;
                        if (_configContainer.AllKeys.Contains("voice.feedback.userdata-key-name"))
                        {
                            var tempFeedbackUeserdatKey = _configContainer.GetValue("voice.feedback.userdata-key-name");
                            if (attachData.ContainsKey(tempFeedbackUeserdatKey))
                                _feedbackNumber = attachData[tempFeedbackUeserdatKey];
                        }
                        if (attachData == null || attachData.Count <= 0)
                        {
                            DGAttachData.Visibility = Visibility.Collapsed;
                            txtAttachDataInfo.Visibility = Visibility.Visible;
                        };
                        if (attachData.Count != 0)
                        {
                            DGAttachData.Visibility = Visibility.Visible;
                            txtAttachDataInfo.Visibility = Visibility.Collapsed;
                            string fullName = string.Empty;
                            bool loadContact = true;
                            if (attachData.ContainsKey("CallType"))
                                if (attachData["CallType"].ToString().Contains("Internal"))
                                    loadContact = false;
                            if (!attachData.ContainsKey("MID") && attachData.ContainsKey("AppName")
                                && (attachData["AppName"].ToString() == "VA" || attachData["AppName"].ToString() == "NVAS" || attachData["AppName"].ToString() == "CS")
                                && voiceEvents == VoiceEvents.EventEstablished)
                            {
                                var casedata = new Dictionary<string, string>();
                                casedata.Add("MID", "");
                                (new SoftPhone()).UpdateUserData(casedata);
                                _dataContext.IsShowMIDPushButton = Visibility.Visible;
                            }

                            if ((voiceEvents == VoiceEvents.EventReleased ||
                                voiceEvents == VoiceEvents.EventRinging ||
                                voiceEvents == VoiceEvents.EventDialing ||
                                voiceEvents == VoiceEvents.EventRetrieved ||
                                voiceEvents == VoiceEvents.EventPartyChanged ||
                                voiceEvents == VoiceEvents.EventPartyAdded ||
                                (string.IsNullOrEmpty(_contactId) && voiceEvents == VoiceEvents.EventEstablished)) &&
                                loadContact)
                            {
                                _contactId = string.Empty;
                                Dictionary<ContactDetails, string> _contactdetails = null;
                                KeyValueCollection _otherfields = new KeyValueCollection();
                                if (attachData["CallType"].ToString().ToLower() == "inbound")
                                {
                                    if (attachData.ContainsKey("ANI"))
                                        _otherfields.Add("PhoneNumber", attachData["ANI"].ToString());
                                }
                                else
                                {
                                    if (attachData.ContainsKey("OtherDN"))
                                        _otherfields.Add("PhoneNumber", attachData["OtherDN"].ToString());
                                }
                                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact)
                                    && attachData["CallType"].ToString().ToLower() != "internal"
                                    && attachData["CallType"].ToString().ToLower() != "consult")
                                {
                                    try
                                    {
                                        _logger.Debug("Request Get contact id in GettingUserData");
                                        if (_otherfields.Count > 0)
                                            _contactdetails = ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).GetContactId(_configContainer.TenantDbId.ToString(), MediaTypes.Voice, _otherfields);
                                        if (_contactdetails != null)
                                        {
                                            _logger.Info("Identified Contact information : " + _contactdetails.ToString());
                                            _contactId = _contactdetails.ContainsKey(ContactDetails.ContactId) ? _contactdetails[ContactDetails.ContactId].ToString() : string.Empty;
                                            _firstName = _contactdetails.ContainsKey(ContactDetails.FirstName) ? _contactdetails[ContactDetails.FirstName].ToString() : string.Empty;
                                            _lastName = _contactdetails.ContainsKey(ContactDetails.LastName) ? _contactdetails[ContactDetails.LastName].ToString() : string.Empty;
                                            _emailAddress = _contactdetails.ContainsKey(ContactDetails.EmailAddress) ? _contactdetails[ContactDetails.EmailAddress].ToString() : string.Empty;
                                            fullName = _firstName + " " + _lastName;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        _logger.Error("Error while Request Get contact id in GettingUserData" + ex.Message.ToString());
                                    }
                                }
                            }
                            if (voiceEvents == VoiceEvents.EventEstablished)
                            {
                                //ThisDNRole:Origination | Destination
                                //CallType:Consult
                                if (_dispositionForm != null && attachData.ContainsKey("ConnectionId") && _dispositionForm.Tag == attachData["ConnectionId"].ToString())
                                {
                                    _dispositionForm.Close();
                                }
                                if (attachData.ContainsKey("CallType") && attachData.ContainsKey("ThisDNRole") && (attachData.ContainsKey("OtherDN") || attachData.ContainsKey("ANI")))
                                {
                                    if (attachData["ThisDNRole"].ToString().ToLower().Contains("origination"))
                                        _dataContext.CallTypeStatus = attachData["CallType"].ToString() + " Call to " + (attachData["CallType"].ToString() == "Inbound" ? attachData["ANI"].ToString() : attachData["OtherDN"].ToString());
                                    if (attachData["ThisDNRole"].ToString().ToLower().Contains("destination"))
                                        _dataContext.CallTypeStatus = attachData["CallType"].ToString() + " Call from " + (attachData["CallType"].ToString() == "Inbound" ? attachData["ANI"].ToString() : attachData["OtherDN"].ToString());
                                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact)
                                        && (attachData["CallType"].ToString().ToLower().Contains("inbound")
                                        || attachData["CallType"].ToString().ToLower().Contains("out"))) //  && callData.ContainsKey("ServerTime")
                                    {
                                        _voiceInteractionID = string.Empty;
                                        _lastCallStartTime = DateTime.UtcNow;
                                        var imessage1 = FindInteraction(attachData["ConnectionId"].ToString());
                                        if (imessage1 is EventInteractionListGet)
                                        {
                                            var mess = imessage1 as EventInteractionListGet;
                                            if (mess.InteractionData != null && mess.InteractionData[0] != null)
                                            {
                                                _voiceInteractionID = mess.InteractionData[0].Id;
                                                _lastCallStartTime = TimeZoneInfo.ConvertTimeToUtc(Convert.ToDateTime((mess.InteractionData[0].Attributes
                                                    .Cast<Genesyslab.Platform.Contacts.Protocols.ContactServer.Attribute>().
                                                    Where(x => x.AttributeName == Genesyslab.Platform.Contacts.Protocols.InteractionAttributeListConstants.StartDate).FirstOrDefault()
                                                    as Genesyslab.Platform.Contacts.Protocols.ContactServer.Attribute).AttributeValue.ToString()));
                                            }
                                        }
                                        if (string.IsNullOrEmpty(_voiceInteractionID))
                                        {
                                            string ani = "";
                                            if (attachData.ContainsKey("ANI") && !string.IsNullOrEmpty(attachData["ANI"].ToString()))
                                                ani = attachData["ANI"].ToString();
                                            if ((attachData.ContainsKey("ANI") && string.IsNullOrEmpty(attachData["ANI"].ToString())) || !attachData.ContainsKey("ANI"))
                                                if (attachData.ContainsKey("DNIS") && !string.IsNullOrEmpty(attachData["DNIS"].ToString()))
                                                    ani = attachData["DNIS"].ToString();
                                            var interactionAttr = GenerateInteractiondetails(attachData["ConnectionId"].ToString(), ani, attachData["CallType"].ToString(), _contactId, _lastCallStartTime, Statuses.InProcess, attachData);
                                            IMessage imessage = ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).RequestToInsertInteraction(interactionAttr.Item1, interactionAttr.Item2, interactionAttr.Item3);
                                            if (imessage is EventInsertInteraction)
                                                _voiceInteractionID = (imessage as EventInsertInteraction).InteractionId;
                                        }
                                    }
                                }
                            }
                            if (voiceEvents == VoiceEvents.EventAttachedDataChanged)
                            {
                                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact) &&
                                    (attachData["CallType"].ToString() == "Inbound" || attachData["CallType"].ToString() == "Outbound")
                                    && attachData.ContainsKey("ConnectionId"))
                                {
                                    var interactionAttr = GenerateInteractiondetails(string.Empty, string.Empty, attachData["CallType"].ToString(), _contactId, _dataContext.isOnCall ? (DateTime?)null : DateTime.UtcNow, _dataContext.isOnCall ? Statuses.InProcess : Statuses.Stopped, attachData);
                                    ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).RequestToUpdate(null, interactionAttr.Item2, interactionAttr.Item3);
                                    interactionAttr = null;
                                    //LoadMyHistory();
                                }
                            }

                            if (voiceEvents == VoiceEvents.EventReleased)
                            {
                                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact) && (attachData["CallType"].ToString() == "Inbound" || attachData["CallType"].ToString().ToLower().Contains("out")) && attachData.ContainsKey("ConnectionId"))
                                {
                                    var interactionAttr = GenerateInteractiondetails(string.Empty, string.Empty, attachData["CallType"].ToString(), _contactId, DateTime.UtcNow, Statuses.Stopped, attachData);
                                    ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).RequestToUpdate(null, interactionAttr.Item2, interactionAttr.Item3);
                                    interactionAttr = null;
                                    //LoadMyHistory();
                                }

                                #region Disposition pop up

                                // Code added by Rajkumar for disposition form 28/Sep/2015
                                //Start
                                //if (_configContainer.AllKeys.Contains("voice.enable.popup-disposition") &&
                                //    (_configContainer.GetAsBoolean("voice.enable.popup-disposition")) &&
                                try
                                {
                                    if (_configContainer.AllKeys.Contains("voice.enable.popup-disposition") &&
                                      (_configContainer.GetAsBoolean("voice.enable.popup-disposition")) &&
                                      (attachData["CallType"].ToString().ToLower().Contains("inbound")
                                          || attachData["CallType"].ToString().ToLower().Contains("out")))
                                    {
                                        Dictionary<string, string> dicCallDetails = new Dictionary<string, string>();
                                        foreach (var keyvalue in attachData.AllKeys)
                                        {
                                            switch (keyvalue.ToLower())
                                            {
                                                case "connectionid": dicCallDetails.Add(keyvalue.ToString(), attachData[keyvalue.ToString()].ToString()); break;
                                                case "calltype": dicCallDetails.Add(keyvalue.ToString(), attachData[keyvalue.ToString()].ToString()); break;
                                                case "mid": dicCallDetails.Add(keyvalue.ToString(), attachData[keyvalue.ToString()].ToString()); break;
                                                case "dnis": dicCallDetails.Add(keyvalue.ToString(), attachData[keyvalue.ToString()].ToString()); break;
                                                case "ani": dicCallDetails.Add(keyvalue.ToString(), attachData[keyvalue.ToString()].ToString()); break;
                                                default: break;
                                            }
                                        }

                                        dicCallDetails.Add("agentloginid", _dataContext.AgentLoginId);
                                        dicCallDetails.Add("username", _dataContext.UserName);
                                        if (!string.IsNullOrEmpty(fullName))
                                            dicCallDetails.Add("contactname", fullName);
                                        if (_lastCallStartTime != null)
                                            dicCallDetails.Add("duration", Convert.ToString(((DateTime)DateTime.UtcNow).Subtract(_lastCallStartTime).TotalSeconds));

                                        // Call Disposition form
                                        _dispositionForm = new DispositionForm(dicCallDetails);
                                        if (_dispositionForm != null)
                                        {
                                            if (attachData.ContainsKey("ConnectionId"))
                                                _dispositionForm.Tag = attachData["ConnectionId"].ToString();
                                            bool isReadyState = false;
                                            var softPohne = new SoftPhone();
                                            if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].Equals("Ready"))
                                            {
                                                isReadyState = true;
                                                SetNotReady();
                                                _isNrReasonCode = false;
                                                _dataContext.IsAgentClickedReady = false;
                                                _dataContext.VoiceNotReadyReasonCode = string.Empty;
                                            }
                                            _dispositionForm.Owner = this;
                                            _dispositionForm.ShowDialog();
                                            _logger.Info("Disposition Form filled succesfully");
                                            if (isReadyState)
                                            {
                                                softPohne.Ready();
                                                _dataContext.VoiceNotReadyReasonCode = string.Empty;
                                                _dataContext.isDND = false;
                                                _dataContext.IsAgentClickedReady = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception exception)
                                {
                                    _logger.Info("Error occured while showing disposition form" + exception.Message);
                                }
                                //End

                                #endregion Disposition pop up

                                if (dispositionGrid.Children != null)
                                    dispositionGrid.Children.Clear();
                            }

                            if (voiceEvents == VoiceEvents.EventRetrieved || voiceEvents == VoiceEvents.EventPartyChanged)
                            {
                                if (attachData.ContainsKey("CallType") && attachData.ContainsKey("ThisDNRole") && (attachData.ContainsKey("OtherDN") || attachData.ContainsKey("ANI") || attachData.ContainsKey("DNIS")))
                                {
                                    //only for internal or consult
                                    if (attachData["ThisDNRole"].ToString().ToLower().Contains("origination"))
                                        _dataContext.CallTypeStatus = attachData["CallType"].ToString() + " Call to " + (attachData["CallType"].ToString() == "Inbound" ? attachData["ANI"].ToString() : attachData["OtherDN"].ToString());

                                    if (attachData["ThisDNRole"].ToString().ToLower().Contains("destination") || attachData["ThisDNRole"].ToString().ToLower().Contains("conferencemember"))
                                        _dataContext.CallTypeStatus = attachData["CallType"].ToString() + " Call " +
                                            (attachData["CallType"].ToString() == "Outbound" ? "to " : "from ")
                                            + (attachData["CallType"].ToString() == "Inbound" ? attachData["ANI"].ToString() : attachData["DNIS"].ToString());
                                }
                            }
                            if (voiceEvents == VoiceEvents.EventEstablished ||
                                voiceEvents == VoiceEvents.EventRetrieved ||
                                voiceEvents == VoiceEvents.EventPartyChanged ||
                                voiceEvents == VoiceEvents.EventPartyAdded)
                            {
                                if (attachData.ContainsKey("CallType") && !attachData["CallType"].ToString().ToLower().Contains("internal") && !attachData["CallType"].ToString().ToLower().Contains("consult"))
                                {
                                    //gridVoiceContact.Children.Clear();
                                    GetContactInformation(_contactId, attachData["ConnectionId"].ToString());
                                }
                                else
                                {
                                    var index = tb_CallData.SelectedIndex - 1;
                                    if (voiceContact.IsSelected && index >= 0)
                                        tb_CallData.SelectedIndex = index;// ;
                                    voiceContact.Visibility = System.Windows.Visibility.Collapsed;
                                }
                            }

                            ////Code added by Manikandan to fix auto answer and single transfer issue
                            //if (attachData.ContainsKey("ThirdPartyDNRole"))
                            //{
                            //    if (_configContainer.AllKeys.Contains("voice.enable.auto-answer") &&
                            //        ((string)_configContainer.GetValue("voice.enable.auto-answer")).ToLower().Equals("true") &&
                            //            attachData["ThirdPartyDNRole"].ToString().ToLower().Contains("transfer"))
                            //    {
                            //        var soft = new SoftPhone();
                            //        soft.Answer();
                            //    }
                            //}
                            ////end

                            if (attachData.ContainsKey("CallType"))
                            {
                                if (!string.IsNullOrEmpty(attachData["CallType"].ToString()))
                                {
                                    _dataContext.CallType = attachData["CallType"].ToString();
                                }
                            }
                            if (attachData.ContainsKey("ANI"))
                            {
                                if (!string.IsNullOrEmpty(attachData["ANI"].ToString()) && !_dataContext.CallType.Equals("Internal") || !_dataContext.CallType.Equals("Consult"))
                                {
                                    _dataContext.DialedNumber = attachData["ANI"].ToString();

                                    if (voiceEvents == VoiceEvents.EventRinging)
                                    {
                                        if (string.IsNullOrEmpty(fullName.Trim()))
                                            _dataContext.TitleText = attachData["ANI"] + " - Agent Interaction Desktop";
                                        else
                                            _dataContext.TitleText = fullName + " - Agent Interaction Desktop";
                                    }
                                }
                            }
                            if (attachData.ContainsKey("OtherDN"))
                            {
                                if (!string.IsNullOrEmpty(attachData["OtherDN"].ToString()))
                                {
                                    if (_dataContext.CallType.Equals("Internal") || _dataContext.CallType.Equals("Consult"))
                                    {
                                        _dataContext.DialedNumber = attachData["OtherDN"].ToString();
                                        _dataContext.TitleText = attachData["OtherDN"].ToString() + " - Agent Interaction Desktop";
                                    }
                                }
                            }

                            if (attachData.ContainsKey("ThirdPartyDN"))
                            {
                                if (!string.IsNullOrEmpty(attachData["ThirdPartyDN"].ToString()) && attachData["ThirdPartyDN"].ToString() != _dataContext.ThisDN)
                                {
                                    _dataContext.ThridpartyDN = attachData["ThirdPartyDN"].ToString();
                                }
                            }
                            else if (string.IsNullOrEmpty(_dataContext.ThridpartyDN))
                            {
                                //added smoorthy for reject call purpose
                                if (_configContainer.AllKeys.Contains("voice.requeue.route-dn") && !string.IsNullOrEmpty(_configContainer.GetValue("voice.requeue.route-dn")))
                                {
                                    _dataContext.ThridpartyDN = _configContainer.GetValue("voice.requeue.route-dn");
                                }
                            }
                            //collection modified error occurs

                            foreach (var pair in attachData.Keys)
                            {
                                if (!pair.ToString().Equals("IWS_Message") && !pair.ToString().Equals("IWS_Subject")
                                    && !pair.ToString().Equals("IWS_Sender") && !pair.ToString().Equals("IWS_Priority")
                                    && !pair.ToString().Equals("IWS_MessageType") && !pair.ToString().Equals("IWS_Date")
                                    && !pair.ToString().Equals("IWS_Topic"))
                                {
                                    //Code Added V.Palaniappan
                                    //01.10.2013
                                    if (_dataContext.userAttachData.ContainsKey(pair.ToString()))
                                    {
                                        _dataContext.userAttachData.Remove(pair.ToString());
                                    }
                                    //End

                                    if (!_dataContext.userAttachData.ContainsKey(pair.ToString()))
                                    {
                                        //Added by vinoth 23rd sep
                                        //Need to check for string format from CME
                                        //Code added to display filter data as well non filter userdata based on condition
                                        //27.09.2013 V.Palaniappan
                                        if (pair.ToString() == _configContainer.GetValue("interaction.disposition-collection.key-name") || pair.ToString() == _configContainer.GetValue("interaction.disposition.key-name"))
                                        {
                                            if (!_dataContext.userAttachData.ContainsKey(pair.ToString()))
                                                _dataContext.userAttachData.Add(pair.ToString(), attachData[pair.ToString()].ToString());
                                            else
                                                _dataContext.userAttachData[pair.ToString()] = attachData[pair.ToString()].ToString();
                                        }
                                        else
                                        {
                                            if ((_configContainer.AllKeys.Contains("voice.enable.case-data-filter") &&
                                                   ((string)_configContainer.GetValue("voice.enable.case-data-filter")).Equals("true")))
                                            {
                                                if ((_configContainer.AllKeys.Contains("VoiceAttachDataFilterKey") &&
                                                ((List<string>)_configContainer.GetValue("VoiceAttachDataFilterKey")).Contains(pair.ToString())) ||
                                                (_configContainer.AllKeys.Contains("VoiceAttachDataKey") &&
                                                ((List<string>)_configContainer.GetValue("VoiceAttachDataKey")).Contains(pair.ToString())))
                                                    _dataContext.userAttachData.Add(pair.ToString(), attachData[pair.ToString()].ToString());
                                            }
                                            else
                                            {
                                                if (!_dataContext.userAttachData.ContainsKey(pair.ToString()))
                                                    _dataContext.userAttachData.Add(pair.ToString(), attachData[pair.ToString()].ToString());
                                                else
                                                    _dataContext.userAttachData[pair.ToString()] = attachData[pair.ToString()].ToString();
                                            }
                                        }
                                        //End
                                        // break;
                                    }
                                }
                                else if (_dataContext.BroadCastSubscribTopics.Contains(attachData["IWS_Topic"].ToString()) && _dataContext.BroadCastSubscribTopics != null)
                                {
                                    if (pair.ToString().Equals("IWS_Message"))
                                    {
                                        _dataContext.MessageBodyMsg = attachData[pair.ToString()].ToString();
                                        if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("fewwords")))
                                        {
                                            _dataContext.BroadCastToastOrder[
                                                (Datacontext.GetInstance()
                                                    .BroadCastToastOrder.Select((c, i) => new { c, i })
                                                    .Where(x => x.c.StartsWith("fewwords"))
                                                    .FirstOrDefault()).i] = "fewwords$" + attachData[pair.ToString()].ToString();
                                        }
                                    }
                                    if (pair.ToString().Equals("IWS_Subject"))
                                    {
                                        _dataContext.MessageSubject = attachData[pair.ToString()].ToString();
                                        if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("subject")))
                                        {
                                            _dataContext.BroadCastToastOrder[
                                                (Datacontext.GetInstance()
                                                    .BroadCastToastOrder.Select((c, i) => new { c, i })
                                                    .Where(x => x.c.StartsWith("subject"))
                                                    .FirstOrDefault()).i] = "subject$" + attachData[pair.ToString()].ToString();
                                        }
                                    }
                                    if (pair.ToString().Equals("IWS_Sender"))
                                    {
                                        _dataContext.MessageSender = attachData[pair.ToString()].ToString();
                                        if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("sender")))
                                        {
                                            _dataContext.BroadCastToastOrder[
                                                (Datacontext.GetInstance()
                                                    .BroadCastToastOrder.Select((c, i) => new { c, i })
                                                    .Where(x => x.c.StartsWith("sender"))
                                                    .FirstOrDefault()).i] = "sender$" + attachData[pair.ToString()].ToString();
                                        }
                                    }
                                    if (pair.ToString().Equals("IWS_Priority"))
                                    {
                                        ////Pls check pair.Value is int r string and then pass it as key in BroadcastPriority.
                                        _dataContext.MessagePriority =
                                            _broadcastPriority[Convert.ToInt32((string.IsNullOrEmpty(attachData[pair.ToString()].ToString()) == true ? "0" : attachData[pair.ToString()].ToString()))];
                                        _dataContext.BroadCastBackgroundBrush =
                                            (Brush)(new BrushConverter().ConvertFromString(
                                                    _dataContext.BroadCastAttributes[
                                                        _broadcastPriority[Convert.ToInt32(attachData[pair.ToString()].ToString())]]));
                                        var color =
                                            (System.Windows.Media.Color)
                                                ColorConverter.ConvertFromString(
                                                    _dataContext.BroadCastAttributes[
                                                        _broadcastPriority[Convert.ToInt32(attachData[pair.ToString()].ToString())]]);

                                        var brush = new SolidColorBrush(color);
                                        if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("priority")))
                                        {
                                            _dataContext.BroadCastToastOrder[
                                                (Datacontext.GetInstance()
                                                    .BroadCastToastOrder.Select((c, i) => new { c, i })
                                                    .Where(x => x.c.StartsWith("priority"))
                                                    .FirstOrDefault()).i] = "priority$" +
                                                                            _dataContext.MessagePriority;
                                        }
                                    }
                                    if (pair.ToString().Equals("IWS_MessageType"))
                                    {
                                        _dataContext.MessageType = attachData[pair.ToString()].ToString();
                                        if (attachData[pair.ToString()].ToString().ToLower().TrimEnd().TrimStart() == "system")
                                            _dataContext.MessageIconImageSource =
                                                GetBitmapImage(
                                                    new Uri(
                                                        "/Agent.Interaction.Desktop;component/Images/BroadCast.System.png",
                                                        UriKind.Relative));
                                        else if (attachData[pair.ToString()].ToString().ToLower().TrimEnd().TrimStart() == "internal note")
                                            _dataContext.MessageIconImageSource =
                                                GetBitmapImage(
                                                    new Uri(
                                                        "/Agent.Interaction.Desktop;component/Images/BroadCast.Note.png",
                                                        UriKind.Relative));
                                        else if (attachData[pair.ToString()].ToString().ToLower().TrimEnd().TrimStart() == "error" ||
                                                    attachData[pair.ToString()].ToString().ToLower() == "information" || attachData[pair.ToString()].ToString() == string.Empty)
                                            _dataContext.MessageIconImageSource =
                                                GetBitmapImage(
                                                    new Uri(
                                                        "/Agent.Interaction.Desktop;component/Images/BroadCast.InfoError.png",
                                                        UriKind.Relative));
                                    }
                                    if (pair.ToString().Equals("IWS_Date"))
                                    {
                                        _dataContext.MessageDate = attachData[pair.ToString()].ToString();
                                    }
                                    if (pair.ToString().Equals("IWS_Topic"))
                                    {
                                        _dataContext.MessageAudience = attachData[pair.ToString()].ToString();
                                    }
                                }
                            }

                            if (attachData.ContainsKey("ConnectionId"))
                            {
                                //ShowDisposition(callData["ConnectionId"].ToString());
                                if (!(_configContainer.AllKeys.Contains("voice.enable.popup-disposition")
                   && Convert.ToBoolean(_configContainer.GetValue("voice.enable.popup-disposition"))))
                                    SetDispositionCode(attachData["ConnectionId"].ToString());
                            }

                            //Coded added to show the updated call data in the call data window
                            var window = IsWindowOpen<Window>("UserCallInfo");
                            if (window != null && window is CallInfo)
                            {
                                CallInfo callInfo = (CallInfo)window;
                                callInfo.LoadMemberID();
                                callInfo.LoadCallData();
                            }
                            //End

                            if (attachData.ContainsKey("IWS_Topic"))
                            {
                                if (_configContainer.AllKeys.Contains("voice.enable.broadcast") &&
                                            ((string)_configContainer.GetValue("voice.enable.broadcast")).ToLower().Equals("true"))
                                {
                                    if (_dataContext.BroadCastSubscribTopics.Contains(attachData["IWS_Topic"]))
                                    {
                                        _dataContext.OpenedNotifyMessage = _dataContext.MyMessages.Count.ToString();
                                        Datacontext.GetInstance()
                                            .MyMessages.Add(new MyMessages(Datacontext.GetInstance()
                                            .MyMessages.Count, _dataContext.MessageIconImageSource,
                                                _dataContext.MessageType,
                                                _dataContext.MessageSender,
                                                _dataContext.MessageSubject,
                                                _dataContext.MessagePriority,
                                                _dataContext.MessageDate,
                                                _dataContext.MessageAudience,
                                                _dataContext.MessageBodyMsg, false));
                                        _dataContext.UnreadMsgCount++;
                                        _dataContext.UnreadMessageCount = (_dataContext.UnreadMsgCount) >= 9 ? "9" : (_dataContext.UnreadMsgCount).ToString();
                                        _dataContext.MessageCountRange = _dataContext.UnreadMsgCount <= 0 ? "-1" : (_dataContext.UnreadMsgCount <= 9 ? "0" : "1");
                                        txtNoBroadcastMessage.Visibility = Visibility.Collapsed;
                                        if (_isShowBroadCast)
                                        {
                                            _broadCastNotifier.Show();
                                            _isShowBroadCast = false;
                                        }
                                        _broadCastNotifier.Notify(Height, _isbottom);
                                    }
                                    int item = 0;
                                    foreach (string value in _dataContext.BroadCastToastOrder)
                                    {
                                        string[] txt = null;
                                        string[] temp = value.Split('$');
                                        if (temp.Count() == 2)
                                        {
                                            if (temp[1].Contains("\n"))
                                            {
                                                txt = temp[1].Split(new[] { '\n', '\r' });
                                                temp[1] = string.Empty;
                                                foreach (string s in txt)
                                                {
                                                    temp[1] = temp[1] + s;
                                                }
                                            }
                                            if (item == 0)
                                            {
                                                _dataContext.Message1 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                                            }
                                            else if (item == 1)
                                            {
                                                _dataContext.Message2 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                                            }
                                            else if (item == 2)
                                            {
                                                _dataContext.Message3 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                                            }
                                            else if (item == 3)
                                            {
                                                _dataContext.Message4 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                                            }
                                        }
                                        item++;
                                    }
                                }
                            }
                            BindGridForNotifer();
                        }
                        _dataContext.CallDataAdd.Items.Clear();
                        try
                        {
                            if (_configContainer.AllKeys.Contains("VoiceAttachDataKey") && _configContainer.GetValue("VoiceAttachDataKey") != null)
                            {
                                foreach (string item in ((List<string>)_configContainer.GetValue("VoiceAttachDataKey")))
                                {
                                    string keyValue = _dataContext.userAttachData.Where(x => x.Key.ToLower().Replace(" ", string.Empty) == item.ToLower().Replace(" ", string.Empty)).FirstOrDefault().Key;
                                    if (!(keyValue != null && keyValue != string.Empty))
                                    {
                                        MenuItem _mItem = new MenuItem();
                                        _mItem.Header = item;
                                        _mItem.Click += new RoutedEventHandler(CallDataAddMenuitem_Click);
                                        _dataContext.CallDataAdd.Style = (Style)FindResource("Contextmenu");
                                        _dataContext.CallDataAdd.Items.Add(_mItem);
                                    }
                                }
                            }
                            if (_dataContext.IsVoiceEnabledAddCallData == System.Windows.Visibility.Visible)
                                if (_dataContext.CallDataAdd.Items.Count >= 1)
                                    _dataContext.IsVoiceEnabledAddCallData = System.Windows.Visibility.Visible;
                                else
                                    _dataContext.IsVoiceEnabledAddCallData = System.Windows.Visibility.Collapsed;
                        }
                        catch
                        {
                            _logger.Error("Error while adding the context menu items for call data");
                        }
                    }
                }
                catch (Exception commonException)
                {
                    _logger.Error("SoftphoneBar:GettingUserData():" + commonException.Message.ToString());
                    if (commonException.StackTrace != null)
                        _logger.Trace("SoftphoneBar:GettingUserData():" + commonException.StackTrace.ToString());
                    if (commonException.InnerException != null)
                        _logger.Trace("SoftphoneBar:GettingUserData():" + commonException.InnerException.ToString());
                    if (commonException.Source != null)
                        _logger.Trace("SoftphoneBar:GettingUserData():" + commonException.Source.ToString());
                }
                finally { }//GC.Collect(); }
            }), DispatcherPriority.Normal);
        }

        /// <summary>
        /// This method notify desktop with error message while sending integrating data
        /// </summary>
        /// <param name="output">Integrating Data</param>
        void IDesktopCommunicator.NotifyDesktopErrorMessage(string output)
        {
            _errorMessage.Clear();
            if (_errorMessage.Count == 0)
            {
                _errorMessage.Add("IWS_Message", output);
                _errorMessage.Add("IWS_Subject", "CRM DB - Integration");
                _errorMessage.Add("IWS_Sender", "System");
                _errorMessage.Add("IWS_Priority", "3");
                _errorMessage.Add("IWS_MessageType", "System");
                _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                GettingUserData(VoiceEvents.None, _errorMessage);
            }
        }

        /// <summary>
        /// This method notify desktop with success message whether the integrating data posted successfully
        /// </summary>
        /// <param name="output">Integrating Data</param>
        void IDesktopCommunicator.NotifyDesktopSuccessMessage(string output)
        {
        }

        /// <summary>
        /// Initializes the ixn medias.
        /// </summary>
        public void InitializeIXNMedias()
        {
            try
            {
                Pointel.Interactions.Core.Common.OutputValues outputValue = null;
                Pointel.Interactions.Core.Common.OutputValues ixnLoginResponse = null;
                BitmapImage image = null;
                bool mediaSubscribed = false;
                _mediaListWithState.Clear();
                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email) && (!_dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString().Contains("Logout")))
                    outputValue = interactionService.RemoveMedia(_dataContext.ProxyID, Datacontext.Channels.Email.ToString().ToLower());
                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat) && (!_dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString().Contains("Logout")))
                    outputValue = interactionService.RemoveMedia(_dataContext.ProxyID, Datacontext.Channels.Chat.ToString().ToLower());
                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email) || _dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                    outputValue = interactionService.AgentLogout(_dataContext.ProxyID);
                if (outputValue.MessageCode == "200")
                {
                    Pointel.Interactions.Core.Common.OutputValues subscribeOutput = null;
                    KeyValueCollection topicList = new KeyValueCollection();
                    topicList.Add(_configContainer.TenantDbId.ToString() + "@" + _dataContext.Place, "1");
                    subscribeOutput = interactionService.Subscribe(_dataContext.ProxyID, topicList);
                    if (subscribeOutput.MessageCode == "200")
                        _logger.Info(subscribeOutput.Message.ToString());
                    topicList = null;
                    if ((_configContainer.AllKeys.Contains("email.enable.plugin") &&
                   ((string)_configContainer.GetValue("email.enable.plugin")).Equals("true")) && _dataContext.IsEmailPluginAdded && _dataContext.lstHoldingChannelSelection.ContainsKey("email"))
                    {
                        _ixnHandler.Subscribe(interactionService, Pointel.Interactions.Core.InteractionTypes.Email);
                        mediaSubscribed = true;
                        if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Email) && Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["email"]))
                        {
                            _mediaListWithState.Add(Datacontext.Channels.Email.ToString().ToLower(), (((string)_configContainer.GetValue("login.email.enable.auto-ready")).ToLower().Equals("true") ? 1 : 0));
                            if (((string)_configContainer.GetValue("login.email.enable.auto-ready")).ToLower().Equals("true"))
                            {
                                InteractionHandler.AgentEmailState = "Ready";
                                image = _imageDatacontext.ImgReadyStatus;
                            }
                            else
                            {
                                InteractionHandler.AgentEmailState = "Not Ready";
                                image = _imageDatacontext.ImgNotReadyStatus;
                            }
                            ((IEmailPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Email]).NotifyPlace(_dataContext.Place);
                        }
                        else
                        {
                            InteractionHandler.AgentEmailState = "Logout";
                            image = _imageDatacontext.ImgLogoutStatus;
                        }
                        _dataContext.EmailStateImageSource = image;
                        if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email))
                            _dataContext.htMediaCurrentState[Datacontext.Channels.Email] = InteractionHandler.AgentEmailState;
                        else
                            _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Email, InteractionHandler.AgentEmailState);
                    }
                    if ((_configContainer.AllKeys.Contains("chat.enable.plugin") &&
                                ((string)_configContainer.GetValue("chat.enable.plugin")).Equals("true")) && _dataContext.IsChatPluginAdded && _dataContext.lstHoldingChannelSelection.ContainsKey("chat"))
                    {
                        _ixnHandler.Subscribe(interactionService, Pointel.Interactions.Core.InteractionTypes.Chat);
                        mediaSubscribed = true;
                        if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Chat) && Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["chat"]))
                        {
                            _mediaListWithState.Add(Datacontext.Channels.Chat.ToString().ToLower(), (((string)_configContainer.GetValue("login.chat.enable.auto-ready")).ToLower().Equals("true") ? 1 : 0));
                            if (((string)_configContainer.GetValue("login.chat.enable.auto-ready")).ToLower().Equals("true"))
                            {
                                InteractionHandler.AgentChatState = "Ready";
                                image = _imageDatacontext.ImgReadyStatus;
                            }
                            else
                            {
                                InteractionHandler.AgentChatState = "Not Ready";
                                image = _imageDatacontext.ImgNotReadyStatus;
                            }
                            ((IChatPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Chat]).NotifyPlace(_dataContext.Place);
                        }
                        else
                        {
                            InteractionHandler.AgentChatState = "Logout";
                            image = _imageDatacontext.ImgLogoutStatus;
                        }
                        _dataContext.ChatStateImageSource = image;
                        if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                            _dataContext.htMediaCurrentState[Datacontext.Channels.Chat] = InteractionHandler.AgentChatState;
                        else
                            _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Chat, InteractionHandler.AgentChatState);
                    }
                    if (mediaSubscribed)
                    {
                        ixnLoginResponse = interactionService.AgentLogin(_dataContext.AgentID, _dataContext.Place, _dataContext.ProxyID, _configContainer.TenantDbId, _mediaListWithState);
                        if (ixnLoginResponse.MessageCode == "200")
                        {
                            if ((_configContainer.AllKeys.Contains("email.enable.plugin") &&
                       ((string)_configContainer.GetValue("email.enable.plugin")).Equals("true")) && _dataContext.IsEmailPluginAdded && _dataContext.lstHoldingChannelSelection.ContainsKey("email"))
                                _ixnHandler.ChangeEmailStatus(InteractionHandler.AgentEmailState);
                            if ((_configContainer.AllKeys.Contains("chat.enable.plugin") &&
                                    ((string)_configContainer.GetValue("chat.enable.plugin")).Equals("true")) && _dataContext.IsChatPluginAdded && _dataContext.lstHoldingChannelSelection.ContainsKey("chat"))
                                _ixnHandler.ChangeChatStatus(InteractionHandler.AgentChatState);
                        }
                        else
                        {
                            _errorMessage.Clear();
                            if (_errorMessage.Count == 0)
                            {
                                _errorMessage.Add("IWS_Message", ixnLoginResponse.Message + " -  Interaction Media Error(" + ixnLoginResponse.ErrorCode + ")");
                                _errorMessage.Add("IWS_Subject", ixnLoginResponse.Message);
                                _errorMessage.Add("IWS_Sender", "System");
                                _errorMessage.Add("IWS_Priority", "4");
                                _errorMessage.Add("IWS_MessageType", "System");
                                _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                GettingUserData(VoiceEvents.None, _errorMessage);
                            }
                        }
                    }
                }
            }
            catch (Exception generalException)
            {
                _logger.Error("Error Occurred in InitializeIXNMedias() : " + generalException.ToString());
            }
        }

        /// <summary>
        /// Initializes the refine place for voice.
        /// </summary>
        public void InitializeRefinePlaceforVoice()
        {
            if (_dataContext.lstHoldingChannelSelection.ContainsKey("voice"))
            {
                bool isVoiceChecked = Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["voice"]);
                _dataContext.UserPlace = "Using " + _dataContext.Place;
                lblLoginID.Text = "Login ID " + _dataContext.AgentLoginId;
                if (isVoiceChecked)
                {
                    var softRefinePlace = new SoftPhone();
                    _logger.Debug("Softphonebar Window_Loaded : Holding channel selection contains voice");
                    string workMode = "optional";

                    var refinePlaceResponse = softRefinePlace.RefinePlace(_dataContext.UserName, _dataContext.Place, _dataContext.AgentLoginId, _dataContext.Queue, _dataContext.AgentPassword, workMode);

                    _logger.Debug("Softphonebar Window_Loaded : Login using Place : " + _dataContext.Place + " Username : " + _dataContext.UserName +
                        " Queue : " + _dataContext.QueueSelectedValue + " Application : " + _dataContext.ApplicationName + " LoginID : " +
                        _dataContext.AgentLoginId);
                    if (refinePlaceResponse.MessageCode == "200" || refinePlaceResponse.MessageCode == "201")
                    {
                        _voiceCurrentStatus = true;
                        _isVoiceLoginFirstTime = true;
                        if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
                            _dataContext.htMediaCurrentState.Remove(Datacontext.Channels.Voice);
                        _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Voice, "LoggedIn");
                        if (_configContainer.AllKeys.Contains("login.voice.enable.auto-ready") &&
                                      ((string)_configContainer.GetValue("login.voice.enable.auto-ready")).ToLower().Equals("true"))
                        {
                            var softReady = new SoftPhone();
                            softReady.Ready();
                        }
                        var softRegister = new SoftPhone();
                        //below code added for register broadCast DN
                        //Smoorthy 08-01-2013
                        if ((_configContainer.AllKeys.Contains("broadcast.dn") && !string.IsNullOrEmpty(_configContainer.GetValue("broadcast.dn")))
                            && (_configContainer.AllKeys.Contains("voice.enable.broadcast") &&
                                ((string)_configContainer.GetValue("voice.enable.broadcast")).ToLower().Equals("true")))
                        {
                            softRegister.Register((string)_configContainer.GetValue("broadcast.dn"));
                        }

                        //if (_plugins.PluginCollections.ContainsKey(Plugins.Salesforce))
                        //{
                        //    ((ISalesforcePlugin)_plugins.PluginCollections[Plugins.Salesforce]).ApplicationState(MediaTypes.Voice, AgentMediaStatus.LoggedIn);
                        //}

                        //end
                        _logger.Debug("SoftphoneBar:Window_Loaded:" + refinePlaceResponse.Message);
                    }
                    else if (refinePlaceResponse.MessageCode == "2001")
                    {
                        _isVoiceLoginFirstTime = false;
                        lock (_agentStateTimer)
                        {
                            if (!_agentStateTimer.IsEnabled)
                            {
                                _agentStateTimer.Start();
                            }
                        }
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" +
                                _dataContext.SwitchName + " Switch)");
                            _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                        _isServerdown = true;
                        ChangeVoiceStatus("Out Of Service");
                        _agentstate = "Out Of Service";
                        NotifyVoiceMediaStatus("Out Of Service");
                        ChangingphoneStatus(GetLogoutStatus());
                        _logger.Debug("SoftphoneBar:Window_Loaded:" + refinePlaceResponse.Message);
                    }
                    else if (refinePlaceResponse.MessageCode == "2002")
                    {
                        _isVoiceLoginFirstTime = false;
                        lock (_agentStateTimer)
                        {
                            if (!_agentStateTimer.IsEnabled)
                            {
                                _agentStateTimer.Start();
                            }
                        }
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message", refinePlaceResponse.Message.ToString());
                            _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                        _dataContext.VoiceStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                        ChangeVoiceStatus("Out Of Service");
                        _agentstate = "Out Of Service";
                        NotifyVoiceMediaStatus("Out Of Service");
                        _logger.Debug("SoftphoneBar:Window_Loaded:" + refinePlaceResponse.Message);
                        ChangingphoneStatus(GetLogoutStatus());
                    }
                    else if (refinePlaceResponse.MessageCode == "2004")
                    {
                        PlaceAlreadyTaken(refinePlaceResponse);
                        NotifyVoiceMediaStatus("Logout");
                        ChangingphoneStatus(GetLogoutStatus());
                    }
                }
                else
                {
                    lock (_agentStateTimer)
                    {
                        if (!_agentStateTimer.IsEnabled)
                        {
                            _agentStateTimer.Start();
                        }
                    }
                    _isVoiceLoginFirstTime = false;
                    _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "Logout";
                    _logger.Debug("SoftphoneBar:Window_Loaded: Agent State is logout");
                    ChangeVoiceStatus("Logout");
                    _agentstate = "Logout";
                    NotifyVoiceMediaStatus("Logout");
                    ChangingphoneStatus(GetLogoutStatus());
                }
            }
            else
            {
                lock (_agentStateTimer)
                {
                    if (!_agentStateTimer.IsEnabled)
                    {
                        _agentStateTimer.Start();
                    }
                }
                _isVoiceLoginFirstTime = false;
                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "Logout";
                _logger.Debug("SoftphoneBar:Window_Loaded: Agent State is logout");
                ChangeVoiceStatus("Logout");
                _agentstate = "Logout";
                NotifyVoiceMediaStatus("Logout");
                ChangingphoneStatus(GetLogoutStatus());
            }
        }

        //Method added for the purpose of Refine/channel Selection feature.
        //Smoorthy - 18-9-2015
        /// <summary>
        /// Initializes the voice media.
        /// </summary>
        public void InitializeVoiceMedia()
        {
            if (_dataContext.lstHoldingChannelSelection.ContainsKey("voice"))
            {
                bool isVoiceChecked = Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["voice"]);
                _dataContext.UserPlace = "Using " + _dataContext.Place;
                lblLoginID.Text = "Login ID " + _dataContext.AgentLoginId;
                if (isVoiceChecked)
                {
                    var softLogin = new SoftPhone();
                    _logger.Debug("Holding channel selection contains voice");
                    string workMode = "optional";
                    string switchtype = "avaya";
                    if (_dataContext.SwitchName.ToLower().Contains("nortel"))
                        switchtype = "nortel";

                    //if (Datacontext.GetInstance().IsSalesforcePluginAdded && Datacontext.GetInstance().IsSalesforcePluginEnabled)
                    //{
                    //    LoadSalesforcePlugin();
                    //    if (_plugins.PluginCollections.ContainsKey(Plugins.Salesforce))
                    //    {
                    //        IPluginCallBack _salesforceSoftphoneListener = this;
                    //        ((ISalesforcePlugin)_plugins.PluginCollections).Initialize(_salesforceSoftphoneListener, _plugins.PluginCollections);
                    //    }
                    //}
                    var media = (Datacontext.AvailableServerDic.Where(x => x.Value == Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGTServer.ToString())).ToDictionary(x => x.Key, y => y.Value);
                    if (media == null)
                        return;
                    if (media.Count > 0)
                    {
                        if (Datacontext.TServersSwitchDic.ContainsKey(Datacontext.UsedTServerSwitchDBId)
                            && media.Any(x => (x.Key.ToString().Split(','))[0].Trim() == Datacontext.TServersSwitchDic[Datacontext.UsedTServerSwitchDBId]))
                        {
                            var tserverName = media.Where(x => (x.Key.ToString().Split(','))[0].Trim() == Datacontext.TServersSwitchDic[Datacontext.UsedTServerSwitchDBId]).FirstOrDefault().Key;
                            var loginResponse = softLogin.Initialize(_dataContext.Place, _dataContext.UserName, _configContainer.ConfServiceObject, tserverName, _dataContext.AgentLoginId, _dataContext.AgentPassword, _dataContext.SwitchType);
                            if (loginResponse.MessageCode == "200")
                            {
                                softLogin.GetServerInfo();
                                loginResponse = softLogin.Login(_dataContext.Place, _dataContext.UserName, workMode, _dataContext.Queue, _dataContext.AgentLoginId, _dataContext.AgentPassword);
                            }
                            _logger.Debug("Login using Place : " + _dataContext.Place + " Username : " + _dataContext.UserName +
                                " Queue : " + _dataContext.Queue + " Application : " + _dataContext.ApplicationName + " LoginID : " +
                                _dataContext.AgentLoginId);
                            if (loginResponse.MessageCode == "200" || loginResponse.MessageCode == "201")
                            {
                                _isLogoutFromAID = false;
                                _voiceCurrentStatus = true;
                                _isVoiceLoginFirstTime = true;
                                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
                                    _dataContext.htMediaCurrentState.Remove(Datacontext.Channels.Voice);
                                _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Voice, "LoggedIn");

                                if (loginResponse.MessageCode != "201")
                                {
                                    if (_configContainer.AllKeys.Contains("login.voice.enable.auto-ready") &&
                                                  ((string)_configContainer.GetValue("login.voice.enable.auto-ready")).ToLower().Equals("true"))
                                    {
                                        var softReady = new SoftPhone();
                                        softReady.Ready();
                                    }
                                }
                                var softRegister = new SoftPhone();
                                //below code added for register broadCast DN
                                //Smoorthy 08-01-2013
                                if ((_configContainer.AllKeys.Contains("broadcast.dn") && !string.IsNullOrEmpty(_configContainer.GetValue("broadcast.dn")))
                                    && (_configContainer.AllKeys.Contains("voice.enable.broadcast") &&
                                        ((string)_configContainer.GetValue("voice.enable.broadcast")).ToLower().Equals("true")))
                                {
                                    softRegister.Register((string)_configContainer.GetValue("broadcast.dn"));
                                }

                                //if (_plugins.PluginCollections.ContainsKey(Plugins.Salesforce))
                                //{
                                //    ((ISalesforcePlugin)_plugins.PluginCollections[Plugins.Salesforce]).ApplicationState(MediaTypes.Voice, AgentMediaStatus.LoggedIn);
                                //}

                                //end
                                _logger.Debug("SoftphoneBar:Window_Loaded:" + loginResponse.Message);
                            }
                            else if (loginResponse.MessageCode == "2001")
                            {
                                _isVoiceLoginFirstTime = false;
                                lock (_agentStateTimer)
                                {
                                    if (!_agentStateTimer.IsEnabled)
                                    {
                                        _agentStateTimer.Start();
                                    }
                                }
                                _errorMessage.Clear();
                                if (_errorMessage.Count == 0)
                                {
                                    _errorMessage.Add("IWS_Message",
                                        "Voice (" + _dataContext.ThisDN + "@" +
                                        _dataContext.SwitchName + " Switch)");
                                    _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                                    _errorMessage.Add("IWS_Sender", "System");
                                    _errorMessage.Add("IWS_Priority", "4");
                                    _errorMessage.Add("IWS_MessageType", "System");
                                    _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                    _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                    GettingUserData(VoiceEvents.None, _errorMessage);
                                }
                                _isServerdown = true;
                                ChangeVoiceStatus("Out Of Service");
                                _logger.Debug("SoftphoneBar:Window_Loaded:" + loginResponse.Message);
                                _agentstate = "Out Of Service";
                                NotifyVoiceMediaStatus("Out Of Service");
                                ChangingphoneStatus(GetLogoutStatus());
                            }
                            else if (loginResponse.MessageCode == "2002")
                            {
                                _isVoiceLoginFirstTime = false;
                                lock (_agentStateTimer)
                                {
                                    if (!_agentStateTimer.IsEnabled)
                                    {
                                        _agentStateTimer.Start();
                                    }
                                }
                                _errorMessage.Clear();
                                if (_errorMessage.Count == 0)
                                {
                                    _errorMessage.Add("IWS_Message", loginResponse.Message.ToString());
                                    _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                                    _errorMessage.Add("IWS_Sender", "System");
                                    _errorMessage.Add("IWS_Priority", "4");
                                    _errorMessage.Add("IWS_MessageType", "System");
                                    _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                    _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                    GettingUserData(VoiceEvents.None, _errorMessage);
                                }
                                ChangeVoiceStatus("Out Of Service");
                                _agentstate = "Out Of Service";
                                NotifyVoiceMediaStatus("Out Of Service");
                                _logger.Debug("SoftphoneBar:Window_Loaded:" + loginResponse.Message);
                                ChangingphoneStatus(GetLogoutStatus());
                            }
                            else if (loginResponse.MessageCode == "2004")
                            {
                                PlaceAlreadyTaken(loginResponse);
                                NotifyVoiceMediaStatus("Logout");
                            }
                        }
                    }
                    else
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message", "T-Server not configured.");
                            _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                        ChangeVoiceStatus("Out Of Service");
                        _agentstate = "Out Of Service";
                        NotifyVoiceMediaStatus("Out Of Service");
                        _logger.Debug("SoftphoneBar:Window_Loaded: T-Server not configured.");
                        ChangingphoneStatus(GetLogoutStatus());
                    }
                }
                else
                {
                    lock (_agentStateTimer)
                    {
                        if (!_agentStateTimer.IsEnabled)
                        {
                            _agentStateTimer.Start();
                        }
                    }
                    _isVoiceLoginFirstTime = false;
                    _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "Logout";
                    _logger.Debug("SoftphoneBar:Window_Loaded: Agent State is logout");
                    ChangeVoiceStatus("Logout");
                    _agentstate = "Logout";
                    NotifyVoiceMediaStatus("Logout");
                    ChangingphoneStatus(GetLogoutStatus());
                }
            }
            else
            {
                lock (_agentStateTimer)
                {
                    if (!_agentStateTimer.IsEnabled)
                    {
                        _agentStateTimer.Start();
                    }
                }
                _isVoiceLoginFirstTime = false;
                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "Logout";
                _logger.Debug("SoftphoneBar:Window_Loaded: Agent State is logout");
                ChangeVoiceStatus("Logout");
                _agentstate = "Logout";
                ChangingphoneStatus(GetLogoutStatus());
            }
        }

        /// <summary>
        ///     Initialloads the data.
        /// </summary>
        public void InitialloadData()
        {
            try
            {
                UpdateAgentStateImage();

                #region Media Voice

                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
                {
                    if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Ready" ||
                        _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Not Ready" ||
                        _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Not Ready -") ||
                        _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout") ||
                        _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Do Not Disturb" ||
                        _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "After Call Work" ||
                        _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Out Of Service")
                    {
                        ImageSource channelIcon =
                            GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Voice.Short.png",
                                UriKind.Relative));
                        string forward = "No Active Forward";
                        if (!string.IsNullOrEmpty(_dataContext.ForwardStatus))
                            forward = _dataContext.ForwardStatus;
                        if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Ready")

                            if (!string.IsNullOrEmpty(_dataContext.ForwardStatus))
                                forward = _dataContext.ForwardStatus;
                        var time = new TimeSpan();
                        if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Ready")
                            time = TimeSpan.FromSeconds(_currentReadyTime + 1);
                        if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Not Ready" || _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Not Ready -"))
                            time = TimeSpan.FromSeconds(_currentNReadyTime + 1);
                        if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                            time = TimeSpan.FromSeconds(_currentLogoutTime + 1);
                        if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Do Not Disturb")
                            time = TimeSpan.FromSeconds(_currentDNDOnTime + 1);
                        if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "After Call Work")
                            time = TimeSpan.FromSeconds(_afterCallWorktTime + 1);
                        if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Out Of Service")
                            time = TimeSpan.FromSeconds(_outOfServiceTime + 1);

                        string timer = "[" + string.Format("{0:D2}:{1:D2}:{2:D2}", time.Hours, time.Minutes, time.Seconds) + "]";
                        var item = new MediaStatus(channelIcon, "Voice",
                                        _dataContext.VoiceStateImageSource,
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(), timer, forward, string.Empty,
                                        _dataContext.IsVoiceStateTimer);
                        if (_dataContext.MediaStatus.Any(p => p.ChannelName == "Voice"))
                        {
                            int i =
                                Datacontext.GetInstance()
                                    .MediaStatus.IndexOf(
                                        Datacontext.GetInstance()
                                            .MediaStatus.Where(p => p.ChannelName == "Voice")
                                            .FirstOrDefault());

                            _dataContext.MediaStatus.RemoveAt(i);
                            _dataContext.MediaStatus.Insert(i, item);
                            channelIcon = null;
                        }
                        else
                        {
                            Datacontext.GetInstance()
                                .MediaStatus.Add(item);
                            channelIcon = null;
                        }
                    }
                }

                #endregion Media Voice

                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email) || _dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat) || _dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.OutboundPreview))
                    _ixnHandler.InitialloadInteractionMediaData();

                //Code added for move the voice channel is first in the my channel grid
                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
                {
                    if (_dataContext.MediaStatus.Any(p => p.ChannelName == Datacontext.Channels.Voice.ToString()))
                    {
                        IMediaStatus voiceChannel = _dataContext.MediaStatus.Where(p => p.ChannelName ==
                                                                                Datacontext.Channels.Voice.ToString()).FirstOrDefault();
                        if (voiceChannel != null)
                        {
                            int index =
                                    _dataContext.MediaStatus.IndexOf(_dataContext.MediaStatus.Where(p => p.ChannelName ==
                                        Datacontext.Channels.Voice.ToString()).FirstOrDefault());

                            _dataContext.MediaStatus.RemoveAt(index);

                            _dataContext.MediaStatus.Insert(0, voiceChannel);
                        }
                    }
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("InitialloadData() " + commonException);
            }
        }

        /// <summary>
        /// Interactionses the media state change.
        /// </summary>
        /// <param name="media">The media.</param>
        /// <param name="type">The type.</param>
        /// <param name="state">The state.</param>
        public void InteractionsMediaStateChange(Datacontext.Channels media, string state, string notReadyKeyCode = null)
        {
            if (_dataContext.htMediaCurrentState != null && !_dataContext.htMediaCurrentState.ContainsKey(media)) return;
            ImageSource image = null;
            Pointel.Interactions.Core.Common.OutputValues outputValue = null;
            InteractionService interactionService = new InteractionService();
            try
            {
                if ((state.Contains("Log On") || state.Contains("Ready")) && _dataContext.isIXNDND)//logon ready & not ready
                {
                    outputValue = interactionService.AgentDoNotDisturbOff(_dataContext.ProxyID);
                    if (outputValue.MessageCode == "200")
                    {
                        _dataContext.isIXNDND = false;

                        #region Loop executing only once

                        //_dataContext.htMediaCurrentState collection will be changed in ChangeEmailStatus/ChangeChatStatus method
                        //so we are cloning the Dictionary object
                        Dictionary<Datacontext.Channels, string> _dict = new Dictionary<Datacontext.Channels, string>();
                        _dict = _dataContext.htMediaCurrentState.ToDictionary(kvp => (Datacontext.Channels)kvp.Key, kvp => (string)kvp.Value);
                        foreach (var item in _dict.Keys)
                        {
                            if (item == Datacontext.Channels.Voice) continue;
                            if (item == media) continue;
                            if (item != media)
                            {
                                var _state = string.Empty;
                                if (item == Datacontext.Channels.Email)
                                    _state = InteractionHandler.AgentEmailStateBeforeDND;
                                if (item == Datacontext.Channels.Chat)
                                    _state = InteractionHandler.AgentChatStateBeforeDND;
                                if (_state == "Ready")
                                {
                                    image = _imageDatacontext.ImgReadyStatus;
                                    //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png",
                                    //            UriKind.Relative));
                                }
                                else if (_state.Contains("Not Ready"))
                                {
                                    image = _imageDatacontext.ImgNotReadyStatus;
                                    //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                    //                UriKind.Relative));
                                }
                                else if (_state.Contains("Logout"))
                                {
                                    image = _imageDatacontext.ImgLogoutStatus;
                                    //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png",
                                    //              UriKind.Relative));
                                }
                                if (item == Datacontext.Channels.Email)
                                {
                                    _dataContext.EmailStateImageSource = image;
                                    InteractionHandler.AgentEmailState = _state;
                                    if (_dataContext.IsOnEmailIXN)
                                        _ixnHandler.ChangeEmailStatus("On Interaction");
                                    else
                                        _ixnHandler.ChangeEmailStatus(_state);
                                }
                                if (item == Datacontext.Channels.Chat)
                                {
                                    _dataContext.ChatStateImageSource = image;
                                    InteractionHandler.AgentChatState = _state;
                                    if (_dataContext.IsOnChatIXN)
                                        _ixnHandler.ChangeChatStatus("On Interaction");
                                    else
                                        _ixnHandler.ChangeChatStatus(_state);
                                }
                            }
                        }

                        #endregion Loop executing only once

                        if ((media == Datacontext.Channels.Email && InteractionHandler.AgentEmailStateBeforeDND == state)
                            || (media == Datacontext.Channels.Chat && InteractionHandler.AgentChatStateBeforeDND == state))
                        {
                            if (state == "Ready")
                            {
                                image = _imageDatacontext.ImgReadyStatus;
                                //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png",
                                //            UriKind.Relative));
                            }
                            else if (state.Contains("Not Ready"))
                            {
                                image = _imageDatacontext.ImgNotReadyStatus;
                                //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                //                UriKind.Relative));
                            }
                            else if (state.Contains("Logout"))
                            {
                                image = _imageDatacontext.ImgLogoutStatus;
                                //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png",
                                //              UriKind.Relative));
                            }
                            switch (media)
                            {
                                case Datacontext.Channels.Email:
                                    _dataContext.EmailStateImageSource = image;
                                    InteractionHandler.AgentEmailState = state;
                                    if (_dataContext.IsOnEmailIXN)
                                        _ixnHandler.ChangeEmailStatus("On Interaction");
                                    else
                                        _ixnHandler.ChangeEmailStatus(state);
                                    break;

                                case Datacontext.Channels.Chat:
                                    _dataContext.ChatStateImageSource = image;
                                    InteractionHandler.AgentChatState = state;
                                    if (_dataContext.IsOnChatIXN)
                                        _ixnHandler.ChangeChatStatus("On Interaction");
                                    else
                                        _ixnHandler.ChangeChatStatus(state);
                                    break;
                            }
                        }
                    }
                }

                if (!(media == Datacontext.Channels.Email && InteractionHandler.AgentEmailState == state)
                    || !(media == Datacontext.Channels.Chat && InteractionHandler.AgentChatState == state))
                {
                    switch (state)
                    {
                        case "Ready":
                            outputValue = interactionService.AgentReady(_dataContext.ProxyID, media.ToString().ToLower());
                            if (outputValue.MessageCode == "200" || outputValue.Message.Contains("Already in state 'ready' for specified media"))
                            {
                                outputValue.MessageCode = "200";
                                image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png",
                                                UriKind.Relative));
                            }
                            break;

                        case "Not Ready":
                            if ((media == Datacontext.Channels.Email && (InteractionHandler.AgentEmailState == "Ready" || (InteractionHandler.AgentEmailState == "Do Not Disturb" && !InteractionHandler.AgentEmailStateBeforeDND.Contains("Not Ready")))
                                     || (media == Datacontext.Channels.Chat && (InteractionHandler.AgentChatState == "Ready" || (InteractionHandler.AgentChatState == "Do Not Disturb" && !InteractionHandler.AgentEmailStateBeforeDND.Contains("Not Ready"))))))
                                outputValue = interactionService.AgentNotReady(_dataContext.ProxyID, media.ToString().ToLower());
                            else
                                outputValue = interactionService.AgentNotReadyWithReason(_dataContext.ProxyID, media.ToString().ToLower(), state, "0");
                            if (outputValue.MessageCode == "200")
                                image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                                UriKind.Relative));
                            break;

                        case "Logout":
                            outputValue = interactionService.RemoveMedia(_dataContext.ProxyID, media.ToString().ToLower());
                            if (outputValue.MessageCode == "200")
                            {
                                image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png",
                                                UriKind.Relative));
                                if (media == Datacontext.Channels.Email && _plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                                    ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).WorkbinFlag(false);
                                //CR by sakthi - 10-09-2015
                                // Added to notify the Email State Information to contact Plugin.
                                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact))
                                {
                                    ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).NotifyEmailMediaState(false);
                                }
                                if (_dataContext.isIXNDND)
                                {
                                    if (media == Datacontext.Channels.Email)
                                        InteractionHandler.AgentEmailStateBeforeDND = state;
                                    if (media == Datacontext.Channels.Chat)
                                        InteractionHandler.AgentChatStateBeforeDND = state;
                                    state = "Logout (Do Not Disturb)";
                                }
                            }
                            break;

                        case "Log On":
                            outputValue = interactionService.AddMedia(_dataContext.ProxyID, media.ToString().ToLower());
                            if (outputValue.MessageCode == "200")
                            {
                                bool isSendRedayRequest = false;
                                if (media == Datacontext.Channels.Email && _plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                                    ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).WorkbinFlag(true);
                                //CR by sakthi - 10-09-2015
                                // Added to notify the Email State Information to contact Plugin.
                                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact))
                                {
                                    ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).NotifyEmailMediaState(true);
                                }
                                if ((media == Datacontext.Channels.Email
                                    && _configContainer.AllKeys.Contains("login.email.enable.auto-ready")
                                    && ((string)_configContainer.GetValue("login.email.enable.auto-ready")).ToLower().Equals("true"))
                                    || (media == Datacontext.Channels.Chat
                                    && _configContainer.AllKeys.Contains("login.chat.enable.auto-ready")
                                    && ((string)_configContainer.GetValue("login.chat.enable.auto-ready")).ToLower().Equals("true")))
                                    isSendRedayRequest = true;
                                if (!isSendRedayRequest)
                                {
                                    image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                        UriKind.Relative));
                                    state = "Not Ready";
                                    break;
                                }
                                outputValue = interactionService.AgentReady(_dataContext.ProxyID, media.ToString().ToLower());
                                if (outputValue.MessageCode == "200" || outputValue.Message.ToLower().Contains("already"))
                                {
                                    image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png",
                                                    UriKind.Relative));
                                    state = "Ready";
                                    outputValue.MessageCode = "200";
                                }
                                else
                                {
                                    _errorMessage.Clear();
                                    if (_errorMessage.Count == 0)
                                    {
                                        _errorMessage.Add("IWS_Message", outputValue.Message + " -  Interaction Media Error(" + outputValue.ErrorCode + ")");
                                        _errorMessage.Add("IWS_Subject", outputValue.Message);
                                        _errorMessage.Add("IWS_Sender", "System");
                                        _errorMessage.Add("IWS_Priority", "4");
                                        _errorMessage.Add("IWS_MessageType", "System");
                                        _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                        _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                        GettingUserData(VoiceEvents.None, _errorMessage);
                                    }
                                }
                            }
                            break;

                        case "Do Not Disturb":
                            if (!_dataContext.isIXNDND)
                            {
                                outputValue = interactionService.AgentDoNotDisturbOn(_dataContext.ProxyID);
                                InteractionHandler.AgentEmailStateBeforeDND = InteractionHandler.AgentEmailState;
                                InteractionHandler.AgentChatStateBeforeDND = InteractionHandler.AgentChatState;
                                if (outputValue.MessageCode != "200") break;
                                _dataContext.isIXNDND = true;
                            }
                            break;

                        default:
                            if (notReadyKeyCode != null)
                            {
                                bool tempBool = false;
                                if ((media == Datacontext.Channels.Email && (InteractionHandler.AgentEmailState == "Ready" || (InteractionHandler.AgentEmailState == "Do Not Disturb" && !InteractionHandler.AgentEmailStateBeforeDND.Contains("Not Ready"))))
                                    || (media == Datacontext.Channels.Chat && (InteractionHandler.AgentChatState == "Ready" || (InteractionHandler.AgentChatState == "Do Not Disturb" && !InteractionHandler.AgentChatStateBeforeDND.Contains("Not Ready")))))
                                {
                                    outputValue = interactionService.AgentNotReady(_dataContext.ProxyID, media.ToString().ToLower());
                                    if (outputValue.MessageCode != "200") tempBool = true;
                                }
                                if (!tempBool)
                                    outputValue = interactionService.AgentNotReadyWithReason(_dataContext.ProxyID, media.ToString().ToLower(), state.Replace("Not Ready - ", ""), notReadyKeyCode);
                                if (outputValue.MessageCode == "200")
                                    image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                                    UriKind.Relative));
                            }
                            break;
                    }

                    if (outputValue != null && outputValue.MessageCode == "200")
                    {
                        if (state == "Do Not Disturb")
                        {
                            #region DND

                            //_dataContext.htMediaCurrentState collection will be changed in ChangeEmailStatus/ChangeChatStatus method
                            //so we are cloning the Dictionary object
                            Dictionary<Datacontext.Channels, string> _dict = new Dictionary<Datacontext.Channels, string>();
                            _dict = _dataContext.htMediaCurrentState.ToDictionary(kvp => (Datacontext.Channels)kvp.Key, kvp => (string)kvp.Value);

                            foreach (var item in _dict.Keys)
                            {
                                if (item == Datacontext.Channels.Voice) continue;
                                var _state = _dict[item].ToString();
                                if (_state.Contains("Not Ready -"))
                                    _state = "NR";
                                switch (_state)
                                {
                                    case "Ready":
                                    case "Not Ready":
                                    case "NR":
                                        image = _imageDatacontext.ImgDNDStatus;
                                        //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/DontDis.png",
                                        //   UriKind.Relative));
                                        if (item == Datacontext.Channels.Email)
                                        {
                                            InteractionHandler.AgentEmailState = state;
                                            _dataContext.EmailStateImageSource = image;
                                            if (_dataContext.IsOnEmailIXN)
                                                _ixnHandler.ChangeEmailStatus("On Interaction");
                                            else
                                                _ixnHandler.ChangeEmailStatus(state);
                                        }
                                        else if (item == Datacontext.Channels.Chat)
                                        {
                                            InteractionHandler.AgentChatState = state;
                                            _dataContext.ChatStateImageSource = image;
                                            if (_dataContext.IsOnChatIXN)
                                                _ixnHandler.ChangeChatStatus("On Interaction");
                                            else
                                                _ixnHandler.ChangeChatStatus(state);
                                        }
                                        break;

                                    case "Logout":
                                        image = _imageDatacontext.ImgLogoutStatus;
                                        //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png",
                                        //        UriKind.Relative));
                                        if (item == Datacontext.Channels.Email)
                                        {
                                            InteractionHandler.AgentEmailState = "Logout (Do Not Disturb)";
                                            _dataContext.EmailStateImageSource = image;
                                            if (_dataContext.IsOnEmailIXN)
                                                _ixnHandler.ChangeEmailStatus("On Interaction");
                                            else
                                                _ixnHandler.ChangeEmailStatus("Logout (Do Not Disturb)");
                                        }
                                        else if (item == Datacontext.Channels.Chat)
                                        {
                                            InteractionHandler.AgentChatState = "Logout (Do Not Disturb)";
                                            _dataContext.ChatStateImageSource = image;
                                            if (_dataContext.IsOnChatIXN)
                                                _ixnHandler.ChangeChatStatus("On Interaction");
                                            else
                                                _ixnHandler.ChangeChatStatus("Logout (Do Not Disturb)");
                                        }
                                        break;
                                }
                            }

                            #endregion DND
                        }
                        else
                        {
                            switch (media)
                            {
                                case Datacontext.Channels.Email:
                                    _dataContext.EmailStateImageSource = image;
                                    InteractionHandler.AgentEmailState = state;
                                    if (_dataContext.IsOnEmailIXN)
                                        _ixnHandler.ChangeEmailStatus("On Interaction");
                                    else
                                        _ixnHandler.ChangeEmailStatus(state);
                                    break;

                                case Datacontext.Channels.Chat:
                                    _dataContext.ChatStateImageSource = image;
                                    InteractionHandler.AgentChatState = state;
                                    if (_dataContext.IsOnChatIXN)
                                        _ixnHandler.ChangeChatStatus("On Interaction");
                                    else
                                        _ixnHandler.ChangeChatStatus(state);
                                    break;
                            }
                        }
                    }
                }
                else
                {
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as : " + ex.Message);
            }
            finally
            {
                image = null;
                outputValue = null;
                interactionService = null;
            }
        }

        /// <summary>
        /// Keyboard values the specified key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns></returns>
        public string Keyboardvalue(Key key)
        {
            string value = string.Empty;
            if ((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift)
            {
                if (key == Key.D3)
                {
                    value = "#";
                }
                else if (key == Key.D8)
                {
                    value = "*";
                }
            }
            else
            {
                if (key == Key.D0 || key == Key.NumPad0)
                    value = "0";
                if (key == Key.D1 || key == Key.NumPad1)
                    value = "1";
                if (key == Key.D2 || key == Key.NumPad2)
                    value = "2";
                if (key == Key.D3 || key == Key.NumPad3)
                    value = "3";
                if (key == Key.D4 || key == Key.NumPad4)
                    value = "4";
                if (key == Key.D5 || key == Key.NumPad5)
                    value = "5";
                if (key == Key.D6 || key == Key.NumPad6)
                    value = "6";
                if (key == Key.D7 || key == Key.NumPad7)
                    value = "7";
                if (key == Key.D8 || key == Key.NumPad8)
                    value = "8";
                if (key == Key.D9 || key == Key.NumPad9)
                    value = "9";
                if (key == Key.Multiply)
                    value = "*";
            }
            return value;
        }

        //end
        /// <summary>
        ///     Loads the disposition codes.
        /// </summary>
        public void LoadDispositionCodes(string connId)
        {
            try
            {
                if (connId == null)
                    connId = string.Empty;
                Dictionary<string, object> _tempCollection = new Dictionary<string, object>();

                if (_configContainer.AllKeys.Contains("voice.disposition.codes") && _configContainer.GetValue("voice.disposition.codes") != null)
                    _tempCollection.Add("voice.disposition.codes", (Dictionary<string, string>)_configContainer.GetValue("voice.disposition.codes"));
                else
                    _tempCollection.Add("voice.disposition.codes", new Dictionary<string, string>());

                if (_configContainer.AllKeys.Contains("voice.subdisposition.codes") && _configContainer.GetValue("voice.subdisposition.codes") != null)
                    _tempCollection.Add("voice.subdisposition.codes", (Dictionary<string, Dictionary<string, string>>)_configContainer.GetValue("voice.subdisposition.codes"));
                else
                    _tempCollection.Add("voice.subdisposition.codes", new Dictionary<string, Dictionary<string, string>>());

                if (_configContainer.AllKeys.Contains("interaction.enable.multi-dispositioncode"))
                    _tempCollection.Add("enable.multidisposition.enabled",
                            ((string)_configContainer.GetValue("interaction.enable.multi-dispositioncode")).ToLower().Equals("true"));

                if (_configContainer.AllKeys.Contains("interaction.disposition.key-name") &&
                                _configContainer.GetValue("interaction.disposition.key-name") != null)
                    _tempCollection.Add("DispositionCodeKey", (string)_configContainer.GetValue("interaction.disposition.key-name"));
                if (_configContainer.AllKeys.Contains("interaction.disposition-object-name") &&
                                _configContainer.GetValue("interaction.disposition-object-name") != null)
                    _tempCollection.Add("DispositionName", (string)_configContainer.GetValue("interaction.disposition-object-name"));

                dispositionGrid.Children.Clear();
                if (_configContainer.AllKeys.Contains("voice.disposition.codes") &&
                    ((Dictionary<string, string>)_configContainer.GetValue("voice.disposition.codes")).Count <= 0)
                {
                    commonDispositionTab.Visibility = Visibility.Collapsed;
                    return;
                }
                Pointel.Interactions.DispositionCodes.InteractionHandler.Listener _dispositionCodeListener = new Pointel.Interactions.DispositionCodes.InteractionHandler.Listener();
                _dispositionCodeListener.NotifyCMEObjects(_tempCollection);
                DispositionData disData = new DispositionData() { InteractionID = connId };
                _dispositionUC = _dispositionCodeListener.CreateUserControl();

                _dataContext.DispositionObjCollection = new KeyValuePair<string, object>("DispositionObj", _dispositionUC);
                _dispositionUC.NotifyDispositionCodeEvent -= new Pointel.Interactions.DispositionCodes.UserControls.Disposition.NotifyDispositionCode(NotifyDispositionCodeEvent);
                _dispositionUC.NotifyDispositionCodeEvent += new Pointel.Interactions.DispositionCodes.UserControls.Disposition.NotifyDispositionCode(NotifyDispositionCodeEvent);

                _dispositionUC.Dispositions(Pointel.Interactions.IPlugins.MediaTypes.Voice, disData);
                if (_dispositionUC != null)
                {
                    dispositionGrid.Children.Add(_dispositionUC);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("LoadDispositionCodes() : Error : " + ex.Message.ToString());
            }
            finally { GC.SuppressFinalize(this); GC.Collect(); }
            _dataContext.IsDispositionNoneChecked = true;
            SetDispositionCodeEnable();
        }

        /// <summary>
        /// Longs the distance code check.
        /// </summary>
        /// <param name="number">The number.</param>
        /// <returns></returns>
        public string LongDistanceCodeCheck(string number)
        {
            string dialNumber = number;
            try
            {
                string authorizationCode = "*6" + _dataContext.LongDistanceCode;
                if (dialNumber.Length == 12)
                {
                    if (dialNumber.Substring(0, 2) == "91" && authorizationCode.Length == 8)
                    {
                        _logger.Info("Authorization Code : " + authorizationCode);
                        if (authorizationCode.Length > 0)
                        {
                            return authorizationCode + "#" + dialNumber;
                        }
                        else
                        {
                            if (_dataContext.LongDistanceCode.Length > 0)
                            {
                                return "*6" + _dataContext.LongDistanceCode + "#" + dialNumber;
                            }
                            else
                            {
                                return dialNumber;
                            }
                        }
                    }
                    else
                    {
                        return dialNumber;
                    }
                }
                else
                {
                    return dialNumber;
                }
            }
            catch (Exception generalException)
            {
                _logger.Error("Error occurred as : " + generalException.ToString());
                return dialNumber;
            }
        }

        public void MessageNotification(KeyValueCollection _callData)
        {
            #region Error Message

            foreach (var pair in _callData.Keys)
            {
                if (_dataContext.BroadCastSubscribTopics.Contains(_callData["IWS_Topic"].ToString()) && _dataContext.BroadCastSubscribTopics != null)
                {
                    if (pair.ToString().Equals("IWS_Message"))
                    {
                        _dataContext.MessageBodyMsg = _callData[pair.ToString()].ToString();
                        if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("fewwords")))
                        {
                            _dataContext.BroadCastToastOrder[
                                (Datacontext.GetInstance()
                                    .BroadCastToastOrder.Select((c, i) => new { c, i })
                                    .Where(x => x.c.StartsWith("fewwords"))
                                    .FirstOrDefault()).i] = "fewwords$" + _callData[pair.ToString()].ToString();
                        }
                    }
                    if (pair.ToString().Equals("IWS_Subject"))
                    {
                        _dataContext.MessageSubject = _callData[pair.ToString()].ToString();
                        if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("subject")))
                        {
                            _dataContext.BroadCastToastOrder[
                                (Datacontext.GetInstance()
                                    .BroadCastToastOrder.Select((c, i) => new { c, i })
                                    .Where(x => x.c.StartsWith("subject"))
                                    .FirstOrDefault()).i] = "subject$" + _callData[pair.ToString()].ToString();
                        }
                    }
                    if (pair.ToString().Equals("IWS_Sender"))
                    {
                        _dataContext.MessageSender = _callData[pair.ToString()].ToString();
                        if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("sender")))
                        {
                            _dataContext.BroadCastToastOrder[
                                (Datacontext.GetInstance()
                                    .BroadCastToastOrder.Select((c, i) => new { c, i })
                                    .Where(x => x.c.StartsWith("sender"))
                                    .FirstOrDefault()).i] = "sender$" + _callData[pair.ToString()].ToString();
                        }
                    }
                    if (pair.ToString().Equals("IWS_Priority"))
                    {
                        ////Pls check pair.Value is int r string and then pass it as key in BroadcastPriority.
                        _dataContext.MessagePriority =
                            _broadcastPriority[Convert.ToInt32((string.IsNullOrEmpty(_callData[pair.ToString()].ToString()) == true ? "0" : _callData[pair.ToString()].ToString()))];
                        _dataContext.BroadCastBackgroundBrush =
                            (Brush)(new BrushConverter().ConvertFromString(
                                    _dataContext.BroadCastAttributes[
                                        _broadcastPriority[Convert.ToInt32(_callData[pair.ToString()].ToString())]]));
                        var color =
                            (System.Windows.Media.Color)
                                ColorConverter.ConvertFromString(
                                    _dataContext.BroadCastAttributes[
                                        _broadcastPriority[Convert.ToInt32(_callData[pair.ToString()].ToString())]]);

                        var brush = new SolidColorBrush(color);
                        if (_dataContext.BroadCastToastOrder.Any(s => s.Contains("priority")))
                        {
                            _dataContext.BroadCastToastOrder[
                                (Datacontext.GetInstance()
                                    .BroadCastToastOrder.Select((c, i) => new { c, i })
                                    .Where(x => x.c.StartsWith("priority"))
                                    .FirstOrDefault()).i] = "priority$" +
                                                            _dataContext.MessagePriority;
                        }
                    }
                    if (pair.ToString().Equals("IWS_MessageType"))
                    {
                        _dataContext.MessageType = _callData[pair.ToString()].ToString();
                        if (_callData[pair.ToString()].ToString().ToLower().TrimEnd().TrimStart() == "system")
                            _dataContext.MessageIconImageSource =
                               GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/BroadCast.System.png",
                                        UriKind.Relative));
                        else if (_callData[pair.ToString()].ToString().ToLower().TrimEnd().TrimStart() == "internal note")
                            _dataContext.MessageIconImageSource =
                                GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/BroadCast.Note.png",
                                        UriKind.Relative));
                        else if (_callData[pair.ToString()].ToString().ToLower().TrimEnd().TrimStart() == "error" ||
                                    _callData[pair.ToString()].ToString().ToLower() == "information" || _callData[pair.ToString()].ToString() == string.Empty)
                            _dataContext.MessageIconImageSource =
                                GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/BroadCast.InfoError.png",
                                        UriKind.Relative));
                    }
                    if (pair.ToString().Equals("IWS_Date"))
                    {
                        _dataContext.MessageDate = _callData[pair.ToString()].ToString();
                    }
                    if (pair.ToString().Equals("IWS_Topic"))
                    {
                        _dataContext.MessageAudience = _callData[pair.ToString()].ToString();
                    }
                }
            }

            if (_callData.ContainsKey("IWS_Topic"))
            {
                if (_dataContext.BroadCastSubscribTopics.Contains(_callData["IWS_Topic"]))
                {
                    _dataContext.OpenedNotifyMessage = _dataContext.MyMessages.Count.ToString();
                    Datacontext.GetInstance()
                        .MyMessages.Add(new MyMessages(Datacontext.GetInstance()
                        .MyMessages.Count, _dataContext.MessageIconImageSource,
                            _dataContext.MessageType,
                            _dataContext.MessageSender,
                            _dataContext.MessageSubject,
                            _dataContext.MessagePriority,
                            _dataContext.MessageDate,
                            _dataContext.MessageAudience,
                            _dataContext.MessageBodyMsg, false));
                    _dataContext.UnreadMsgCount++;
                    _dataContext.UnreadMessageCount = (_dataContext.UnreadMsgCount) >= 9 ? "9" : (_dataContext.UnreadMsgCount).ToString();
                    _dataContext.MessageCountRange = _dataContext.UnreadMsgCount <= 0 ? "-1" : (_dataContext.UnreadMsgCount <= 9 ? "0" : "1");
                    txtNoBroadcastMessage.Visibility = Visibility.Collapsed;
                    if (_isShowBroadCast)
                    {
                        _broadCastNotifier.Show();
                        _isShowBroadCast = false;
                    }
                    _broadCastNotifier.Notify(Height, _isbottom);
                }
                int item = 0;
                foreach (string value in _dataContext.BroadCastToastOrder)
                {
                    string[] txt = null;
                    string[] temp = value.Split('$');
                    if (temp.Count() == 2)
                    {
                        if (temp[1].Contains("\n"))
                        {
                            txt = temp[1].Split(new[] { '\n', '\r' });
                            temp[1] = string.Empty;
                            foreach (string s in txt)
                            {
                                temp[1] = temp[1] + s;
                            }
                        }
                        if (item == 0)
                        {
                            _dataContext.Message1 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                        }
                        else if (item == 1)
                        {
                            _dataContext.Message2 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                        }
                        else if (item == 2)
                        {
                            _dataContext.Message3 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                        }
                        else if (item == 3)
                        {
                            _dataContext.Message4 = temp[1].Length < 50 ? temp[1] : temp[1].Remove(47) + "...";
                        }
                    }
                    item++;
                }
            }
            BindGridForNotifer();

            #endregion Error Message
        }

        public void NotifyActivateSoftphone()
        {
            if (!this.Topmost)
            {
                Topmost = true;
                Activate();
                Topmost = false;
            }
        }

        /// <summary>
        /// This method Notifies Agent Current Status
        /// </summary>
        /// <param name="agentStatus"></param>
        public void NotifyAgentStatus(Pointel.Softphone.Voice.AgentStatus agentStatus)
        {
            _agentStatusListener.Invoke(agentStatus);
        }

        /// <summary>
        ///     This method Notifies the subscriber.
        /// </summary>
        /// <param name="callData">The call data.</param>
        public void NotifyCallRinging(IMessage message)
        {
            try
            {
                if (_plugins.PluginCollections.ContainsKey(Plugins.Salesforce) && message != null)
                {
                    Thread salseForceThread = new Thread(new ParameterizedThreadStart(NotifyToSalesorce));
                    salseForceThread.Start(message);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
            //Only used in third party app.
        }

        public void NotifyCMEObjectChanged(Pointel.Configuration.Manager.Helpers.ConfigValue.CFGValueObjects objectName, KeyValuePair<Pointel.Configuration.Manager.Helpers.ConfigValue.CFGOperation, Dictionary<string, string>> changedData)
        {
            this.Dispatcher.Invoke((Action)(delegate
            {
                switch (objectName)
                {
                    case Pointel.Configuration.Manager.Helpers.ConfigValue.CFGValueObjects.PersonSkill:
                        switch (changedData.Key)
                        {
                            case Pointel.Configuration.Manager.Helpers.ConfigValue.CFGOperation.Add:
                                foreach (string skills in changedData.Value.Keys)
                                {
                                    _dataContext.MySkills.Add(new Agent.Interaction.Desktop.Helpers.MySkills(skills.ToString(), Convert.ToInt32(changedData.Value[skills])));
                                    mySkillNotification(skills, changedData.Value[skills].ToString(), Pointel.Configuration.Manager.Helpers.ConfigValue.CFGOperation.Add);
                                }
                                break;

                            case Pointel.Configuration.Manager.Helpers.ConfigValue.CFGOperation.Update:
                                foreach (string skills in changedData.Value.Keys)
                                {
                                    var item = _dataContext.MySkills.FirstOrDefault(p => p.SkillName == skills);
                                    if (item != null)
                                    {
                                        int index = _dataContext.MySkills.IndexOf(item);
                                        _dataContext.MySkills.RemoveAt(index);
                                        _dataContext.MySkills.Insert(index, new MySkills(skills, Convert.ToInt32(changedData.Value[skills])));
                                        mySkillNotification(skills, changedData.Value[skills].ToString(), Pointel.Configuration.Manager.Helpers.ConfigValue.CFGOperation.Update);
                                    }
                                }
                                break;

                            case Pointel.Configuration.Manager.Helpers.ConfigValue.CFGOperation.Delete:
                                ObservableCollection<Agent.Interaction.Desktop.Helpers.IMySkills> tempMySkills = _dataContext.MySkills;
                                foreach (string skills in changedData.Value.Keys)
                                {
                                    var getSkill = tempMySkills.Where(x => x.SkillName == skills).ToList();
                                    if (getSkill != null && getSkill.Count > 0)
                                    {
                                        foreach (var data in getSkill)
                                        {
                                            mySkillNotification(skills, changedData.Value[skills].ToString(), Pointel.Configuration.Manager.Helpers.ConfigValue.CFGOperation.Delete);
                                            _dataContext.MySkills.Remove(data);
                                        }
                                    }
                                }
                                break;
                        }
                        break;
                }
            }));
        }

        public void NotifyDeactivateSoftphone()
        {
            Topmost = false;
        }

        /// <summary>
        /// Notifies the disposition code.
        /// </summary>
        /// <param name="mediaType">Type of the media.</param>
        /// <param name="dispositionTreeCollection">The disposition tree collection.</param>
        /// <param name="dispositionCode">The disposition code.</param>
        public void NotifyDispositionCodeEvent(MediaTypes mediaType, DispositionData data)
        {
            if (mediaType == MediaTypes.Voice)
            {

                var casedata = new Dictionary<string, string>();
                if (_configContainer.AllKeys.Contains("interaction.disposition.key-name") && !string.IsNullOrEmpty(data.DispostionCode))
                {
                    if (_dataContext.userAttachData.ContainsKey((string)_configContainer.GetValue("interaction.disposition.key-name")))
                        _dataContext.userAttachData.Remove((string)_configContainer.GetValue("interaction.disposition.key-name"));
                    _dataContext.userAttachData.Add((string)_configContainer.GetValue("interaction.disposition.key-name"), data.DispostionCode);
                    casedata.Add((string)_configContainer.GetValue("interaction.disposition.key-name"), data.DispostionCode);
                }
                if (_configContainer.AllKeys.Contains("interaction.disposition-collection.key-name") && data.DispostionCollection != null)
                {
                    if (_dataContext.userAttachData.ContainsKey((string)_configContainer.GetValue("interaction.disposition-collection.key-name")))
                        _dataContext.userAttachData.Remove((string)_configContainer.GetValue("interaction.disposition-collection.key-name"));

                    string result = string.Join("; ", data.DispostionCollection.Select(x => string.Format("{0}:{1}", x.Key, x.Value)).ToArray());
                    if (!string.IsNullOrEmpty(result))
                        _dataContext.userAttachData.Add((string)_configContainer.GetValue("interaction.disposition-collection.key-name"), result);
                    casedata.Add((string)_configContainer.GetValue("interaction.disposition-collection.key-name"), result);
                }

                var soft = new SoftPhone();
                if (!string.IsNullOrEmpty(data.InteractionID))
                {
                    isDispositionUpdate = true;

                    soft.UpdateUserData(casedata, data.InteractionID);
                    isDispositionUpdate = false;
                    _isDispositionSent = true;
                }
                else
                {
                    if (!string.IsNullOrEmpty(data.InteractionID))
                    {
                        soft.DistributeUserDataEvent(_dataContext.userAttachData, data.InteractionID);
                        _isDispositionSent = true;
                    }
                }
                soft = null;
                _dataContext.IsDispositionNoneChecked = false;

                //if (data.DispostionCode != string.Empty)
                //{
                //Pointel.Interactions.DispositionCodes.InteractionHandler.Listener _dispositionCodeListener = new Pointel.Interactions.DispositionCodes.InteractionHandler.Listener();
                // _dispositionCodeListener.LoadDispositionCode(data.DispostionCollection);
                //}
            }
        }

        /// <summary>
        ///     Notifies the error message.
        /// </summary>
        /// <param name="errorMessage">The error message.</param>
        public void NotifyErrorMessage(Pointel.Softphone.Voice.Common.OutputValues errorMessage)
        {
            this.Dispatcher.Invoke((Action)(delegate
            {
                try
                {
                    if (errorMessage.Message.Contains("TERR_SOFT_AGENT_PSWD_DOESNT_MATCH"))
                    {
                        _isFailedAgentLogin = true;
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Agent Login Password is In-Valid");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                            _agentstate = "unknown";
                            ChangeVoiceStatus("Logout");
                            _agentstate = "Logout";
                            ChangingphoneStatus(GetLogoutStatus());
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_NOT_REGISTERED"))
                    {
                        if (_dataContext.UserState.ToLower().Trim().Contains("logout"))
                        {
                            _logger.Error("TServer Error Message : TERR_NOT_REGISTERED");
                            _errorMessage.Clear();
                            if (_errorMessage.Count == 0)
                            {
                                _errorMessage.Add("IWS_Message",
                                    "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                                _errorMessage.Add("IWS_Subject",
                                    "Media Error(" + errorMessage.MessageCode + "): Agent Logout in Voice Channel. Can't do Call functionalities.");
                                _errorMessage.Add("IWS_Sender", "System");
                                _errorMessage.Add("IWS_Priority", "4");
                                _errorMessage.Add("IWS_MessageType", "System");
                                _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                GettingUserData(VoiceEvents.None, _errorMessage);
                            }
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_SOFT_AGENT_ID_IN_USE"))
                    {
                        ChangeVoiceStatus("Logout");
                        _agentstate = "Logout";
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Agent Login ID in use.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                            _dataContext.IsDialEnabled = false;
                            _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                            //_dataContext.DialImageSource =
                            //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png", UriKind.Relative));
                            _dataContext.DialText = (String)FindResource("KeyDial");
                            _dataContext.IsAttachDataEnabled = false;
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_ASAI_USER_BUSY"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): User is busy.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_ORIG_PTY_BSY"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Origination Party Busy.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_ORIG_ACCS_BLK"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Origination Access Blocking.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);

                            if (_dataContext.IsInitiateConfClicked)
                                _dataContext.IsInitiateConfClicked = false;
                            if (_dataContext.IsInitiateTransClicked)
                                _dataContext.IsInitiateTransClicked = false;
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_ORIG_DN_BUSY"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Origination DN Busy.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);

                            if (_dataContext.IsInitiateConfClicked)
                                _dataContext.IsInitiateConfClicked = false;
                            if (_dataContext.IsInitiateTransClicked)
                                _dataContext.IsInitiateTransClicked = false;
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_FTR_NOT_INVOK"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Feature Could Not be Invoked.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_DN_BUSY"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): DN Is Busy.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_ASAI_NORMAL_UNSPECIF"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Normal UnSpecified.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                    }
                    //Incomplete or Invalid Calling or Called DN
                    else if (errorMessage.Message.Contains("TERR_INCM_CALD_DN") || errorMessage.Message.Contains("TERR_INV_CALL_TN")
                        || errorMessage.Message.Contains("TERR_INV_CALL_DN") || errorMessage.Message.Contains("TERR_INCM_CALL_DN") || errorMessage.Message.Contains("TERR_INV_CALD_DN")
                        || errorMessage.Message.Contains("TERR_INCM_CALD_TN"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Incomplete or Invalid Calling or Called DN.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                        if (_dataContext.IsInitiateConfClicked)
                            _dataContext.IsInitiateConfClicked = false;
                        if (_dataContext.IsInitiateTransClicked)
                            _dataContext.IsInitiateTransClicked = false;
                    }
                    else if (errorMessage.Message.Contains("TERR_ASAI_START"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0 && _dataContext.ForwardDN != string.Empty)
                        {
                            _dataContext.ForwardDN = string.Empty;
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Cannot login while forwarding set");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                            if (_dataContext.SwitchName.ToLower().Contains("avaya"))
                            {
                                btnLogin.IsEnabled = false;
                                _dataContext.LogImageSource = _imageDatacontext.ImgLoginDisabled;
                                //_dataContext.LogImageSource =
                                //    GetBitmapImage(new Uri(_imagePath + "\\Login-in-icon.Disable.png", UriKind.Relative));
                                _dataContext.LogText = (String)FindResource("keyLogin");
                                _dataContext.IsDialEnabled = false;
                                _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                                //_dataContext.DialImageSource =
                                //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png", UriKind.Relative));
                                _dataContext.DialText = (String)FindResource("KeyDial");
                                _dataContext.IsAttachDataEnabled = false;
                                ChangeVoiceStatus("Logout");
                                _agentstate = "Logout";
                            }
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_DMS_START"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0 && _dataContext.ForwardDN != string.Empty)
                        {
                            //_dataContext.ForwardDN = string.Empty;
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Cannot login while forwarding set");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                            if (_dataContext.SwitchName.ToLower().Contains("avaya"))
                            {
                                btnLogin.IsEnabled = false;
                                _dataContext.LogImageSource = _imageDatacontext.ImgLoginDisabled;
                                //_dataContext.LogImageSource =
                                //    GetBitmapImage(new Uri(_imagePath + "\\Login-in-icon.Disable.png", UriKind.Relative));
                                _dataContext.LogText = (String)FindResource("keyLogin");
                                _dataContext.IsDialEnabled = false;
                                _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                                //_dataContext.DialImageSource =
                                //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png", UriKind.Relative));
                                _dataContext.DialText = (String)FindResource("KeyDial");
                                _dataContext.IsAttachDataEnabled = false;
                                //_agentstate = "unknown";
                                ChangeVoiceStatus("Logout");
                                _agentstate = "Logout";
                            }
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_NO_SWITCH"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Switch Not Connected.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                            //_errorCount = _errorCount + 1;
                            _isVoiceLoginFirstTime = false;
                            _isFailedAgentLogin = true;
                            ChangeVoiceStatus("Out Of Service1");
                            _agentstate = "Out Of Service1";
                            ChangingphoneStatus(SoftPhoneBar.GetLogoutStatus());
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_OUT_OF_SERVICE"))
                    {
                        _errorMessage.Add("IWS_Message",
                               "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                        _errorMessage.Add("IWS_Subject",
                            "Media Error(" + errorMessage.MessageCode + "): DN is Out of Service.");
                        _errorMessage.Add("IWS_Sender", "System");
                        _errorMessage.Add("IWS_Priority", "4");
                        _errorMessage.Add("IWS_MessageType", "System");
                        _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                        _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                        GettingUserData(VoiceEvents.None, _errorMessage);
                        _isVoiceLoginFirstTime = false;
                        _isFailedAgentLogin = true;
                        ChangeVoiceStatus("Out Of Service1");
                        _agentstate = "Out Of Service1";
                        ChangingphoneStatus(SoftPhoneBar.GetLogoutStatus());
                    }
                    else if (errorMessage.Message.Contains("TERR_TIMEOUT"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0 && _errorCount == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Time Out.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                            _errorCount = _errorCount + 1;
                        }
                    }
                    else if (errorMessage.Message.Contains("EventDestinationBusy"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject", "Destination Busy.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_DEST_ACCS_BLK"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Destination Access Blocking.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                            _isVoiceLoginFirstTime = false;
                            _isFailedAgentLogin = true;
                            ChangeVoiceStatus("Out Of Service1");
                            _agentstate = "Out Of Service1";
                            ChangingphoneStatus(SoftPhoneBar.GetLogoutStatus());
                        }
                    }
                    else if (errorMessage.Message.Contains("TERR_SOFT_AGENT_NOT_LOGGED_IN"))
                    {
                        _isVoiceLoginFirstTime = false;
                        if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Out Of Service"))
                        {
                            ChangeVoiceStatus("Out Of Service1");
                            _agentstate = "Out Of Service1";
                        }
                        else
                        {
                            _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "Logout";
                            ChangeVoiceStatus("Logout");
                            _agentstate = "Logout";
                        }
                        ChangingphoneStatus(GetLogoutStatus());
                    }
                    else if (errorMessage.Message.Contains("TERR_MAINT_BUSY"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject",
                                "Media Error(" + errorMessage.MessageCode + "): Set is maintenance busy.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                    }
                    else
                    {
                        _logger.Warn("NotifyErroMessgae:SoftphoneBar:" + errorMessage.Message);
                    }
                }
                catch (Exception commonException)
                {
                    _logger.Error("SoftphoneBar:NotifyErrorMessage():" + commonException);
                }
            }));
        }

        /// <summary>
        /// Notifies the file data.
        /// </summary>
        /// <param name="userData">The user data.</param>
        /// <param name="annexdFacet">The annexd facet.</param>
        /// <param name="isEnableView">if set to <c>true</c> [is enable view].</param>
        public void NotifyFileData(KeyValueCollection userData, Dictionary<string, string> annexdFacet, bool isEnableView)
        {
            try
            {
                _logger.Info("NotifyFileData : " + isEnableView);
                _dataContext.userAttachData.Clear();
                if (userData != null && userData.Count > 0)
                    foreach (string key in userData.Keys)
                        if (!_dataContext.userAttachData.ContainsKey(key))
                            _dataContext.userAttachData.Add(key, userData[key].ToString());
                _dataContext.configuredAttachData = annexdFacet;
                _dataContext.IsCallWindowEnabled = isEnableView;
            }
            catch (Exception exception)
            {
                _logger.Error("NotifyFileData: " + exception.Message.ToString());
            }
        }

        public void NotifyMIDState(bool isVisible, string connectionId)
        {
            _dataContext.IsShowMIDPushButton = isVisible ? Visibility.Visible : Visibility.Collapsed;

            //if (OldConnectionId != connectionId)
            //{
            //    if (isVisible)
            //        _dataContext.IsShowMIDPushButton = Visibility.Visible;
            //    else
            //        _dataContext.IsShowMIDPushButton = Visibility.Collapsed;
            //    OldConnectionId = connectionId;
            //}
            //else if (isVisible)
            //    _dataContext.IsShowMIDPushButton = Visibility.Visible;
            //else
            //    _dataContext.IsShowMIDPushButton = Visibility.Collapsed;
        }

        /// <summary>
        /// Notifies the show cc statistics.
        /// </summary>
        /// <param name="isCCStatistics">if set to <c>true</c> [is cc statistics].</param>
        public void NotifyShowCCStatistics(bool isCCStatistics)
        {
            try
            {
                //Code Added - Shenbagamoorthy B
                //14.3.2014
                if (_dataContext.BottomRowHeight == new GridLength(0))
                {
                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), true);
                    InitialloadData();
                }
                else
                {
                    if (_dataContext.Bottomwindow == Datacontext.OpendBy.MyMessage)
                    {
                        _dataContext.Bottomwindow = Datacontext.OpendBy.Workspace;
                        _dataContext.WorksapceTabVisibility = Visibility.Visible;
                        _dataContext.MessageTabVisibility = Visibility.Hidden;
                        _isopendbyUser = true;
                        InitialloadData();
                    }
                }
                //end
                //Code Added - V.Palaniappan
                //27.1.2014
                for (int i = 0; i < DataTabControl.Items.Count; i++)
                {
                    var item = DataTabControl.Items.GetItemAt(i) as TabItem;
                    if (item != null && item.Name.Equals("ContactStatistics"))
                    {
                        DataTabControl.SelectedIndex = i;
                        //CallData.SelectedIndex = 0;
                    }
                } //End
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar_NotifyShowCCStatistics:" + commonException);
            }
        }

        /// <summary>
        /// Notifies the show my statistics.
        /// </summary>
        /// <param name="isMyStatistics">if set to <c>true</c> [is my statistics].</param>
        public void NotifyShowMyStatistics(bool isMyStatistics)
        {
            try
            {
                //Code Added - Shenbagamoorthy B
                //14.3.2014
                if (_dataContext.BottomRowHeight == new GridLength(0))
                {
                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), true);
                }
                else if (_dataContext.Bottomwindow != Datacontext.OpendBy.Workspace)
                {
                    _dataContext.Bottomwindow = Datacontext.OpendBy.Workspace;
                    _dataContext.WorksapceTabVisibility = Visibility.Visible;
                    _dataContext.MessageTabVisibility = Visibility.Hidden;
                    _dataContext.ContactTabVisibility = Visibility.Hidden;
                }
                _isopendbyUser = true;
                InitialloadData();
                //end
                //Code Added - V.Palaniappan
                //27.1.2014
                for (int i = 0; i < DataTabControl.Items.Count; i++)
                {
                    var item = DataTabControl.Items.GetItemAt(i) as TabItem;
                    if (item != null && item.Name.Equals("MyStatistics"))
                    {
                        DataTabControl.SelectedIndex = i;
                        //CallData.SelectedIndex = 0;
                    }
                } //End
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar_NotifyShowMyStatistics:" + commonException);
            }
        }

        /// <summary>
        ///     This method Notifies the subscriber.
        /// </summary>
        /// <param name="callData">The call data.</param>
        public void NotifySubscriber(VoiceEvents voiceEvents, object callData)
        {
            _commonMessagelistener.Invoke(voiceEvents, callData);
        }

        /// <summary>
        ///     This method Notifies the UI status.
        /// </summary>
        /// <param name="status">The status.</param>
        public void NotifyUIStatus(SoftPhoneStatusController status)
        {
            _listener.Invoke(status);
        }

        /// <summary>
        /// Notifies the web URL.
        /// </summary>
        /// <param name="urlString">The URL string.</param>
        /// <param name="applicationName"></param>
        /// <param name="count"></param>
        /// <param name="objEvent"></param>
        public void NotifyWebUrl(string urlString, string applicationName, byte count, bool allowNewWindowHook = false, bool overrideSameWindow = false
            , bool isSurpressScript = false, IMessage objEvent = null)
        {
            try
            {
                if (string.IsNullOrEmpty(applicationName))
                    _logger.Warn("Application name is null or empty.");
                else
                {
                    if (applicationName == "Salesforce")
                    {
                        count += browsercount;
                    }
                    _logger.Info("URL String: " + urlString + " Application: " + applicationName);
                    urlString = urlString == "about:blank" ? urlString : (urlString.Contains("http") == true ? urlString : "http://" + urlString);
                    if (Datacontext.GetInstance().IsSalesforcePluginEnabled && _plugins.PluginCollections.ContainsKey(Plugins.Salesforce))
                        count += 1;

                    if (browsercount == 0 || (browsercount >= 1 && !dicWebbrowser.ContainsKey(applicationName)))
                        Dispatcher.Invoke(new Action(() =>
                        {
                            AddBrowser(applicationName, count, allowNewWindowHook, overrideSameWindow);

                            // Added for surpress the script on the web page.
                            // Start

                            if (isSurpressScript)
                                dicWebbrowser[applicationName].Navigated += SoftPhoneBar_Navigated;

                            // End

                            if (allowNewWindowHook)
                            {
                                dicWebbrowser[applicationName].LoadCompleted += new System.Windows.Navigation.LoadCompletedEventHandler(SubscribeHookEvent);
                                lstHookedWindow.Add(applicationName);
                                if (!overrideSameWindow)
                                    lstOverrideDuplication.Add(applicationName);
                            }
                        }));

                    if (dicWebbrowser.ContainsKey(applicationName))
                        Dispatcher.Invoke(new Action(() =>
                        {
                            dicWebbrowser[applicationName].Navigate(urlString);
                        }));
                    else
                        _logger.Warn("Application name not exist.");
                    //_popupTabEnabled = true;
                }
            }
            catch (Exception _generalException)
            {
                _logger.Error("Error occurred as " + _generalException.Message);
            }
        }

        /// <summary>
        /// Places the already taken.
        /// </summary>
        /// <param name="outValues">The out values.</param>
        public void PlaceAlreadyTaken(OutputValues outValues)
        {
            _errorMessage.Clear();
            _errorMessage.Add("IWS_Message", outValues.Message);
            _errorMessage.Add("IWS_Subject", "Unable to login.");
            _errorMessage.Add("IWS_Sender", "System");
            _errorMessage.Add("IWS_Priority", "3");
            _errorMessage.Add("IWS_MessageType", "System");
            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
            GettingUserData(VoiceEvents.None, _errorMessage);

            btnLogin.IsEnabled = true;
            _dataContext.LogImageSource = _imageDatacontext.ImgLoginEnabled;
            _dataContext.ReadyImageSource = _imageDatacontext.ImgReadyDisabled;
            _dataContext.IsReadyEnabled = false;
            //_dataContext.LogImageSource =
            //    GetBitmapImage(new Uri(_imagePath + "\\Login-in-icon.png", UriKind.Relative));
            _dataContext.LogText = (String)FindResource("keyLogin");

            _dataContext.IsDialEnabled = false;
            _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
            //_dataContext.DialImageSource =
            //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png", UriKind.Relative));
            _dataContext.DialText = (String)FindResource("KeyDial");
            _dataContext.IsAttachDataEnabled = false;
            _isVoiceLoginFirstTime = true;
            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
                _dataContext.htMediaCurrentState.Remove(Datacontext.Channels.Voice);
            _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Voice, "Logout");
            ChangeVoiceStatus("Logout");
            _agentstate = "Logout";
        }

        public void PluginDialEvents(PluginType pluginType, string dialEvent)
        {
            Dispatcher.Invoke((Action)(delegate
            {
                _logger.Debug("Dial Event from Plugin : " + pluginType.ToString() + " dialEvent : " + dialEvent);
                bool allowConsult = (pluginType == PluginType.SalesForce ? true : false);
                if (!_dataContext.isOnCall || allowConsult)
                    WriteToTargetDN(dialEvent);

            }));
        }

        public void PluginErrorMessage(PluginType pluginType, string message)
        {
            if (pluginType == PluginType.Chat)
            {
                _errorMessage.Clear();
                if (_errorMessage.Count == 0 && _errorCount == 0)
                {
                    _errorMessage.Add("IWS_Message", "Chat Server Message");
                    _errorMessage.Add("IWS_Subject", message);
                    _errorMessage.Add("IWS_Sender", "System");
                    _errorMessage.Add("IWS_Priority", "4");
                    _errorMessage.Add("IWS_MessageType", "System");
                    _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                    _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                    GettingUserData(VoiceEvents.None, _errorMessage);
                }
            }
        }

        public void PluginInteractionStatus(PluginType pluginType, IXNState ixnState, bool isNotifier)
        {
            Dispatcher.Invoke(
            new Action(() =>
            {
                int equaliz = Convert.ToInt16(!isNotifier);
                switch (pluginType)
                {
                    case PluginType.Email:
                    case PluginType.Workbin:
                        if (ixnState == IXNState.Closed)
                        {
                            if (GetEmailWindowInstanceCount() == 0 && !isNotifier)
                            //if ((isNotifier && count <= 0) || (!isNotifier && count <= 1))
                            {
                                if (_dataContext.IsOnEmailIXN)
                                {
                                    _dataContext.IsOnEmailIXN = false;
                                    string status = _dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString();
                                    if (!status.Contains("Do Not Disturb"))
                                        InteractionHandler.AgentEmailState = status;
                                    _ixnHandler.ChangeEmailStatus(status);
                                }
                            }
                        }
                        else if (ixnState == IXNState.Opened)
                        {
                            if (!_dataContext.IsOnEmailIXN)
                            {
                                _ixnHandler.ChangeEmailStatus("On Interaction");
                                _dataContext.IsOnEmailIXN = true;
                            }
                        }
                        break;

                    case PluginType.Chat:
                        if (ixnState == IXNState.Closed)
                        {
                            if (GetChatWindowInstanceCount() <= equaliz)
                            {
                                if (_dataContext.IsOnChatIXN)
                                {
                                    _dataContext.IsOnChatIXN = false;
                                    string status = _dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString();
                                    if (!status.Contains("Do Not Disturb"))
                                        InteractionHandler.AgentChatState = status;
                                    _ixnHandler.ChangeChatStatus(status);
                                }
                            }
                        }
                        else if (ixnState == IXNState.Opened)
                        {
                            if (!_dataContext.IsOnChatIXN)
                            {
                                _ixnHandler.ChangeChatStatus("On Interaction");
                                _dataContext.IsOnChatIXN = true;
                            }
                        }
                        break;
                }
            }));
        }

        public void PostDataInGVAS(KeyValueCollection userData, string applicationName, string urlString)
        {
            try
            {
                if (string.IsNullOrEmpty(urlString))
                {
                    _logger.Warn("The popup url is null.");
                    return;
                }
                if (userData == null && _dataContext.userAttachData == null)
                {
                    _logger.Warn("The user data is null to popup the GVAS application.");
                    return;
                }
                var _isMIDClicked = false;
                if (userData == null && _dataContext.userAttachData != null)
                {
                    _isMIDClicked = true;
                    userData = _dataContext.userAttachData.ToKeyValueCollection();
                }

                if (userData.ContainsKey("AppName"))
                {
                    var AppName = userData["AppName"] != null ? userData["AppName"] : "";
                    if ("VA".Equals(AppName)) //For Evas
                    {
                        if (userData.ContainsKey("ConnectionId"))
                            NotifyMIDState(true, userData.GetAsString("ConnectionId"));

                        var m_MerchantID = userData["MID"] != null ? userData["MID"] : "";
                        var m_ANI = userData["ANINumber"] != null ? userData["ANINumber"] : "";
                        var m_Amount = userData["Amount"] != null ? userData["Amount"] : "";
                        var m_AuthDate = userData["AuthDate"] != null ? userData["AuthDate"] : "";
                        var m_AuthNumber = userData["AuthNumber"] != null ? userData["AuthNumber"] : "";
                        var m_Batch_CVV2 = userData["Batch_CVV2"] != null ? userData["Batch_CVV2"] : "";
                        var m_CallType = userData["TxnType"] != null ? userData["TxnType"] : "";
                        var m_CardNumber = userData["CardNumber"] != null ? userData["CardNumber"] : "";
                        var m_DBA = userData["DBA"] != null ? userData["DBA"] : "";
                        var m_DNIS = userData["DNIS"] != null ? userData["DNIS"] : "";
                        var m_ExpDate = userData["ExpDate"] != null ? userData["ExpDate"] : "";
                        var m_Language = userData["Language"] != null ? userData["Language"] : "";
                        var m_ReferralNumber = userData["ReferralNumber"] != null ? userData["ReferralNumber"] : "";
                        var m_CurrencyCode = userData["CurrencyCode"] != null ? userData["CurrencyCode"] : "";
                        var m_CurrencyCodeAlpha = userData["CurrencyCodeAlpha"] != null ? userData["CurrencyCodeAlpha"] : "";
                        var m_IVRMessage = userData["LastErr"] != null ? userData["LastErr"] : "";
                        var m_IssueNo = userData["IssueNo"] != null ? userData["IssueNo"] : "";
                        urlString = urlString + "?ANI=" + m_ANI + "&Amount=" + m_Amount + "&AppName=" + AppName + "&AuthDate=" + m_AuthDate + "&AuthorizationNumber=" + m_AuthNumber + "&Batch_CVV2=" + m_Batch_CVV2 + "&CallType=" + m_CallType + "&CardNumber=" + m_CardNumber + "&DBA=" + m_DBA + "&DNIS=" + m_DNIS + "&CardExpirationDate=" + m_ExpDate + "&Language=" + m_Language + "&MerchantID=" + m_MerchantID + "&ReferralNumber=" + m_ReferralNumber + "&CurrencyCode=" + m_CurrencyCode + "&CurrencyCodeAlpha=" + m_CurrencyCodeAlpha + "&IVRMessage=" + m_IVRMessage + "&Applet=jPhone" + "&IssueNo=" + m_IssueNo;

                        if (userData.ContainsKey("ConnectionId"))
                            NotifyMIDState(true, userData.GetAsString("ConnectionId"));
                        //parent.gvas.ifr_app.location = gvasLoc+"?ANI="+m_ANI+"&Amount="+m_Amount+"&AppName="+AppName+"&AuthDate="+m_AuthDate+"&AuthorizationNumber="+m_AuthNumber+"&Batch_CVV2="+m_Batch_CVV2+"&CallType="+m_CallType+"&CardNumber="+m_CardNumber+"&DBA="+m_DBA+"&DNIS="+m_DNIS+"&CardExpirationDate="+m_ExpDate+"&Language="+m_Language+"&MerchantID="+m_MerchantID+"&ReferralNumber="+m_ReferralNumber+"&CurrencyCode="+m_CurrencyCode+"&CurrencyCodeAlpha="+m_CurrencyCodeAlpha+"&IVRMessage="+m_IVRMessage+"&Applet=jPhone"+"&IssueNo="+m_IssueNo;
                    }
                    else if ("NVAS".Equals(AppName))//, StringComparison.OrdinalIgnoreCase) )// For NVAS
                    {
                        if (userData.ContainsKey("ConnectionId"))
                            NotifyMIDState(true, userData.GetAsString("ConnectionId"));

                        var m_NIS = userData["DNIS"] != null ? userData["DNIS"] : "";
                        var m_SkillSet = userData["SkillSet"] != null ? userData["SkillSet"] : "";
                        var m_BankNumber = userData["BankNum"] != null ? userData["BankNum"] : "";
                        var m_MerchantID = userData["MID"] != null ? userData["MID"] : "";
                        var m_CardNumber = userData["CardNum"] != null ? userData["CardNum"] : "";
                        var m_CardExpirationDate = userData["CardExpDate"] != null ? userData["CardExpDate"] : "";
                        var m_Amount = userData["Amount"] != null ? userData["Amount"] : "";
                        var m_AuthType = userData["AuthType"] != null ? userData["AuthType"] : "";
                        var m_IVRMessage = userData["LastErrMsg"] != null ? userData["LastErrMsg"] : "";
                        var m_DBA = userData["DBA"] != null ? userData["DBA"] : "";
                        var m_RefBankNumber = userData["RefBankNum"] != null ? userData["RefBankNum"] : "";
                        var m_AuthorizationNumber = userData["AuthNum"] != null ? userData["AuthNum"] : "";
                        var m_ANINumber = userData["ANI"] != null ? userData["ANI"] : "";
                        var m_ANI_Indicator = userData["ANI_Indicator"] != null ? userData["ANI_Indicator"] : "";
                        var m_CallState = "1";
                        var m_Country = userData["COUNTRY"] != null ? userData["COUNTRY"] : "";
                        var m_Language = userData["Language"] != null ? userData["Language"] : "";
                        var m_ATC = userData["ELV_VA_Airline"] != null ? userData["ELV_VA_Airline"] : "";
                        urlString = urlString + "?NIS=" + m_NIS + "&SkillSet=" + m_SkillSet + "&BankNumber=" + m_BankNumber + "&MerchantID=" + m_MerchantID + "&CardNumber=" + m_CardNumber + "&CardExpirationDate=" + m_CardExpirationDate + "&Amount=" + m_Amount + "&AuthType=" + m_AuthType + "&IVRMessage=" + m_IVRMessage + "&DBA=" + m_DBA + "&RefBankNumber=" + m_RefBankNumber + "&AuthorizationNumber=" + m_AuthorizationNumber + "&ANINumber=" + m_ANINumber + "&ANI_Indicator=" + m_ANI_Indicator + "&CallState=" + m_CallState + "&Country=" + m_Country + "&Language=" + m_Language + "&JPhone=jPhone" + "&ATC=" + m_ATC;
                    }
                    else
                    {
                        _logger.Warn("Invalid AppName configured. Value='" + AppName + "'");
                        return;
                    }

                    try
                    {
                        if (browsercount == 1)
                        {
                            Dispatcher.Invoke(new Action(() =>
                            {
                                var docs = webBrowser.Document as HTMLDocument;
                                if (docs != null)
                                {
                                    Thread t = new Thread(delegate()
                                    {
                                        try
                                        {
                                            Thread.Sleep(30);
                                            string url = docs.getElementById("ifr_app").getAttribute("src");
                                            url = string.Empty;
                                            docs.getElementById("ifr_app").setAttribute("src", urlString);
                                        }
                                        catch (Exception ex)
                                        {
                                            _logger.Error("Error occurred as " + ex.Message);
                                        }
                                    });
                                    t.Start();
                                }
                            }));
                            goto End;
                        }
                        if (dicWebbrowser.ContainsKey(applicationName))
                        {
                            Dispatcher.Invoke(new Action(() =>
                            {
                                var docs = dicWebbrowser[applicationName].Document as HTMLDocument;
                                if (docs != null)
                                {
                                    Thread t = new Thread(delegate()
                                    {
                                        try
                                        {
                                            Thread.Sleep(30);
                                            string url = docs.getElementById("ifr_app").getAttribute("src");
                                            url = string.Empty;
                                            docs.getElementById("ifr_app").setAttribute("src", urlString);
                                        }
                                        catch (Exception ex)
                                        {
                                            _logger.Error("Error occurred as " + ex.Message);
                                        }
                                    });
                                    t.Start();
                                }
                            }));
                        }
                        else
                        {
                        }
                    End:

                        if (_isMIDClicked || !_configContainer.GetAsBoolean("voice.enable.case-data", true))
                        {
                            Dispatcher.Invoke(new Action(() =>
                            {
                                if (_dataContext.BottomRowHeight == new GridLength(0))
                                {
                                    _isopendbyUser = false;
                                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), false);
                                }
                                else
                                {
                                    _isopendbyUser = true;
                                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), true);
                                }
                                //webBrowser.Visibility = Visibility.Visible;
                                if (!DataTabControl.Items.Contains(popUpUrl))
                                    DataTabControl.Items.Add(popUpUrl);
                                DataTabControl.SelectedItem = popUpUrl;
                            }));
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.Error("Error occurred as " + ex.Message);
                    }
                }
                else
                    _logger.Warn("The user data key 'AppName' not configured.");
            }
            catch (Exception _generalException)
            {
                _logger.Error("Error occurred as " + _generalException.Message);
            }
        }

        public void PostDataToEvas(KeyValueCollection userData, string applicationName, string urlString)
        {
            try
            {
                bool _isMIDClicked = false;
                if (userData == null && _dataContext.userAttachData != null)
                {
                    _isMIDClicked = true;
                    userData = _dataContext.userAttachData.ToKeyValueCollection();
                }

                if (userData.ContainsKey("AppName") && userData["AppName"].ToString().ToUpper() == "VA")
                {
                    //PostDataInGVAS(userData, applicationName, urlString);
                    var AppName = applicationName == "EVAS" ? "VA" : "";
                    var m_MerchantID = userData["MID"] != null ? userData["MID"] : "";
                    var m_ANI = userData["ANINumber"] != null ? userData["ANINumber"] : "";
                    var m_Amount = userData["Amount"] != null ? userData["Amount"] : "";
                    var m_AuthDate = userData["AuthDate"] != null ? userData["AuthDate"] : "";
                    var m_AuthNumber = userData["AuthNumber"] != null ? userData["AuthNumber"] : "";
                    var m_Batch_CVV2 = userData["Batch_CVV2"] != null ? userData["Batch_CVV2"] : "";
                    var m_CallType = userData["TxnType"] != null ? userData["TxnType"] : "";
                    var m_CardNumber = userData["CardNumber"] != null ? userData["CardNumber"] : "";
                    var m_DBA = userData["DBA"] != null ? userData["DBA"] : "";
                    var m_DNIS = userData["DNIS"] != null ? userData["DNIS"] : "";
                    var m_ExpDate = userData["ExpDate"] != null ? userData["ExpDate"] : "";
                    var m_Language = userData["Language"] != null ? userData["Language"] : "";
                    var m_ReferralNumber = userData["ReferralNumber"] != null ? userData["ReferralNumber"] : "";
                    var m_CurrencyCode = userData["CurrencyCode"] != null ? userData["CurrencyCode"] : "";
                    var m_CurrencyCodeAlpha = userData["CurrencyCodeAlpha"] != null ? userData["CurrencyCodeAlpha"] : "";
                    var m_IVRMessage = userData["LastErr"] != null ? userData["LastErr"] : "";
                    var m_IssueNo = userData["IssueNo"] != null ? userData["IssueNo"] : "";

                    if (userData.ContainsKey("ConnectionId"))
                        NotifyMIDState(true, userData.GetAsString("ConnectionId"));

                    urlString = urlString + "?ANI=" + m_ANI + "&Amount=" + m_Amount + "&AppName=" + AppName + "&AuthDate=" + m_AuthDate + "&AuthorizationNumber=" + m_AuthNumber + "&Batch_CVV2=" + m_Batch_CVV2 + "&CallType=" + m_CallType + "&CardNumber=" + m_CardNumber + "&DBA=" + m_DBA + "&DNIS=" + m_DNIS + "&CardExpirationDate=" + m_ExpDate + "&Language=" + m_Language + "&MerchantID=" + m_MerchantID + "&ReferralNumber=" + m_ReferralNumber + "&CurrencyCode=" + m_CurrencyCode + "&CurrencyCodeAlpha=" + m_CurrencyCodeAlpha + "&IVRMessage=" + m_IVRMessage + "&Applet=jPhone" + "&IssueNo=" + m_IssueNo;

                    try
                    {
                        WebBrowser _nvas = null;
                        if (browsercount == 1)
                        {
                            Dispatcher.Invoke(new Action(() =>
                            {
                                webBrowser.Navigate(urlString);
                                _nvas = webBrowser;
                            }));
                            goto End;
                        }
                        if (dicWebbrowser.ContainsKey(applicationName))
                        {
                            Dispatcher.Invoke(new Action(() =>
                            {
                                dicWebbrowser[applicationName].Navigate(urlString);
                                _nvas = dicWebbrowser[applicationName];
                            }));
                        }
                        else
                        {
                        }
                    End:
                        if (_isMIDClicked || !_configContainer.GetAsBoolean("voice.enable.case-data", true))
                        {
                            Dispatcher.Invoke(new Action(() =>
                            {
                                if (_dataContext.BottomRowHeight == new GridLength(0))
                                {
                                    _isopendbyUser = false;
                                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), false);
                                }
                                else
                                {
                                    _isopendbyUser = true;
                                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), true);
                                }
                                //webBrowser.Visibility = Visibility.Visible;
                                if (!DataTabControl.Items.Contains(popUpUrl))
                                    DataTabControl.Items.Add(popUpUrl);
                                DataTabControl.SelectedItem = popUpUrl;
                                _isopendbyUser = true;
                                if (browsercount > 1)
                                {
                                    var tabitem = tbSubTab.Items.Cast<TabItem>().Where(x => x.Header.ToString() == applicationName).FirstOrDefault();
                                    if (tabitem != null)
                                        tbSubTab.SelectedItem = tabitem;
                                }
                            }));
                        }
                    }
                    catch (Exception generalException)
                    {
                        _logger.Error("Error occurred as " + generalException.Message);
                        _logger.Trace("Error Trace: " + generalException.StackTrace);
                    }
                }
                else
                {
                    if (userData == null)
                        _logger.Warn("The user data is null");
                    else if (userData.ContainsKey("AppName"))
                        _logger.Warn("The user data key AppName is not found.");
                    else if (userData["AppName"].ToString().ToUpper() == "VA")
                        _logger.Warn("The AppName is not match, Received AppName is " + userData["AppName"].ToString());
                }
            }
            catch (Exception generalException)
            {
                _logger.Error("Error occurred as " + generalException.Message);
                _logger.Trace("Error Trace: " + generalException.StackTrace);
            }
        }

        public void PostDataToNvas(KeyValueCollection userData, string applicationName, string urlString)
        {
            try
            {
                _logger.Trace("PostDataTONVAS Entry");

                bool _isMIDClicked = false;
                if (userData == null && _dataContext.userAttachData != null)
                {
                    _isMIDClicked = true;
                    userData = _dataContext.userAttachData.ToKeyValueCollection();
                }

                if (userData != null && userData.ContainsKey("AppName") && userData["AppName"].ToString().ToUpper() == "NVAS")
                {
                    if (userData.ContainsKey("ConnectionId"))
                        NotifyMIDState(true, userData.GetAsString("ConnectionId"));

                    var m_NIS = userData.ContainsKey("DNIS") ? "'" + userData["DNIS"] + "'" : "''";
                    var m_SkillSet = userData.ContainsKey("SkillSet") ? "'" + userData["SkillSet"] + "'" : "''";
                    var m_BankNumber = userData.ContainsKey("BankNum") ? "'" + userData["BankNum"] + "'" : "''";
                    var m_MerchantID = userData.ContainsKey("MID") ? "'" + userData["MID"] + "'" : "''";
                    var m_CardNumber = userData.ContainsKey("CardNum") ? "'" + userData["CardNum"] + "'" : "''";
                    var m_CardExpirationDate = userData.ContainsKey("CardExpDate") ? "'" + userData["CardExpDate"] + "'" : "''";
                    var m_Amount = userData.ContainsKey("Amount") ? "'" + userData["Amount"] + "'" : "''";
                    var m_AuthType = userData.ContainsKey("AuthType") ? "'" + userData["AuthType"] + "'" : "''";
                    var m_IVRMessage = userData.ContainsKey("LastErrMsg") ? "'" + userData["LastErrMsg"] + "'" : "''";
                    var m_DBA = userData.ContainsKey("DBA") ? "'" + userData["DBA"] + "'" : "''";
                    var m_RefBankNumber = userData.ContainsKey("RefBankNum") ? "'" + userData["RefBankNum"] + "'" : "''";
                    var m_AuthorizationNumber = userData.ContainsKey("AuthNum") ? "'" + userData["AuthNum"] + "'" : "''";
                    var m_ANINumber = userData.ContainsKey("ANI") ? "'" + userData["ANI"] + "'" : "''";
                    var m_ANI_Indicator = userData.ContainsKey("ANI_Indicator") ? "'" + userData["ANI_Indicator"] + "'" : "''";
                    var m_CallState = "'1'";
                    var m_Country = userData.ContainsKey("COUNTRY") ? "'" + userData["COUNTRY"] + "'" : "''";
                    var m_Language = userData.ContainsKey("Language") ? "'" + userData["Language"] + "'" : "''";
                    var m_ATC = userData.ContainsKey("ELV_VA_Airline") ? "'" + userData["ELV_VA_Airline"] + "'" : "''";

                    try
                    {
                        WebBrowser _nvas = null;
                        if (browsercount == 1)
                        {
                            //webBrowser.Navigate(urlString);
                            _nvas = webBrowser;
                            goto End;
                        }
                        if (dicWebbrowser.ContainsKey(applicationName))
                        {
                            //Dispatcher.Invoke(new Action(() =>
                            //{
                            _nvas = dicWebbrowser[applicationName];

                            //}));
                        }
                        else
                            _logger.Warn("The is no web control found in the name '" + applicationName + "'");
                    End:

                        Dispatcher.Invoke(new Action(() =>
                        {
                            HTMLDocument doc = _nvas.Document as HTMLDocument;
                            if (doc != null)
                            {
                                HTMLDocument iframe = doc.getElementById("Contents") as HTMLDocument;
                                if (iframe != null)
                                {
                                    _logger.Trace("The iframe found.");
                                    var scriptErrorSuppressed = (IHTMLScriptElement)iframe.createElement("SCRIPT");
                                    scriptErrorSuppressed.type = "text/javascript";
                                    string parameter = m_NIS + "," + m_SkillSet + "," + m_BankNumber + "," + m_MerchantID + "," + m_CardNumber + "," + m_CardExpirationDate + "," + m_Amount + "," + m_AuthType + "," + m_IVRMessage + "," + m_DBA + "," + m_RefBankNumber + "," + m_AuthorizationNumber + "," + m_ANINumber + "," + m_ANI_Indicator + "," + m_CallState + "," + m_Country + "," + m_Language + "," + m_ATC;

                                    _logger.Trace("Parameter :" + parameter);
                                    string scripttext = "try{ toOtherFrame(" + parameter + ");} catch(e){" + (_dataContext.IsDebug ? "alert(e.message)" : "") + "}";
                                    scriptErrorSuppressed.text = scripttext;
                                    _logger.Trace("The Script string to Post: " + scriptErrorSuppressed.text);
                                    _logger.Trace("Script " + scriptErrorSuppressed.text);
                                    IHTMLElementCollection nodes = iframe.getElementsByTagName("head");
                                    foreach (IHTMLElement elem in nodes)
                                    {
                                        var head = (HTMLHeadElement)elem;
                                        head.appendChild((IHTMLDOMNode)scriptErrorSuppressed);
                                        _logger.Trace("The script added successfully.");
                                        break;
                                    }
                                }
                                else
                                {
                                    _logger.Trace("The Iframe is not found. So the script injection going to start.");

                                    var scriptErrorSuppressed = (IHTMLScriptElement)doc.createElement("SCRIPT");
                                    scriptErrorSuppressed.type = "text/javascript";
                                    string parameter = m_NIS + "," + m_SkillSet + "," + m_BankNumber + "," + m_MerchantID + "," + m_CardNumber + "," + m_CardExpirationDate + "," + m_Amount + "," + m_AuthType + "," + m_IVRMessage + "," + m_DBA + "," + m_RefBankNumber + "," + m_AuthorizationNumber + "," + m_ANINumber + "," + m_ANI_Indicator + "," + m_CallState + "," + m_Country + "," + m_Language + "," + m_ATC;

                                    _logger.Trace("Parameter :" + parameter);

                                    string scripttext = "try{ Contents.toOtherFrame(" + parameter + ");} catch(e){" + (_dataContext.IsDebug ? "alert(e.message)" : "") + "}";
                                    scriptErrorSuppressed.text = scripttext;

                                    _logger.Trace("The Script string to Post: " + scriptErrorSuppressed.text);
                                    _logger.Trace("Script " + scriptErrorSuppressed.text);

                                    IHTMLElementCollection nodes = doc.getElementsByTagName("head");
                                    foreach (IHTMLElement elem in nodes)
                                    {
                                        var head = (HTMLHeadElement)elem;
                                        head.appendChild((IHTMLDOMNode)scriptErrorSuppressed);
                                        _logger.Trace("The script injected successfully.");
                                        break;
                                    }
                                }
                            }
                            else
                                _logger.Warn("The HTML document is null.");
                        }));
                        if (_isMIDClicked || !_configContainer.GetAsBoolean("voice.enable.case-data", true))
                        {
                            Dispatcher.Invoke(new Action(() =>
                            {
                                if (_dataContext.BottomRowHeight == new GridLength(0))
                                {
                                    _isopendbyUser = false;
                                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), false);
                                }
                                else
                                {
                                    _isopendbyUser = true;
                                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), true);
                                }
                                //webBrowser.Visibility = Visibility.Visible;
                                if (!DataTabControl.Items.Contains(popUpUrl))
                                    DataTabControl.Items.Add(popUpUrl);
                                DataTabControl.SelectedItem = popUpUrl;
                                _isopendbyUser = true;
                                if (browsercount > 1)
                                {
                                    var tabitem = tbSubTab.Items.Cast<TabItem>().Where(x => x.Header.ToString() == applicationName).FirstOrDefault();
                                    if (tabitem != null)
                                        tbSubTab.SelectedItem = tabitem;
                                }
                            }));
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.Error("Error occurred at PostDataToNVAS : " + ex.ToString());
                        _logger.Trace("Error Trace: " + ex.StackTrace);
                    }

                    _logger.Trace("PostDataTONVAS Exit");
                }
                else
                {
                    if (userData == null)
                        _logger.Warn("The user data is null");
                    else if (!userData.ContainsKey("AppName"))
                        _logger.Warn("The user data key AppName is not found.");
                    else if (userData["AppName"].ToString().ToUpper() != "NVAS")
                        _logger.Warn("The AppName is not match, Received AppName is " + userData["AppName"].ToString());
                }
            }
            catch (Exception generalException)
            {
                _logger.Error("Error occurred as " + generalException.Message);
                _logger.Trace("Error Trace: " + generalException.StackTrace);
            }
        }

        public void PostFormData(string appName, string urlToPost, Dictionary<string, string> dataToPost)
        {
            //dicWebbrowser[appName].NavigateToString("http://www.google.com/");
            //TODO: Need to implement the logic to post form data.
            if (dicWebbrowser.ContainsKey(appName))
                Dispatcher.Invoke(new Action(() =>
                {
                    StringBuilder hiddenField = new StringBuilder();
                    foreach (var item in dataToPost)
                    {
                        hiddenField.Append("<input type=\"hidden\" id=\"" + item.Key + "\" value = \"" + item.Value + "\" class=\"text\" name=\"" + item.Key + "\"/>");
                    }
                    var loadHtml = "<html><body onload=\"document.logonForm.submit.click(); \" oncontextmenu=\"return false;\"><form  id =\"logonForm\"  name=\"logonForm\"  method=\"post\"  action=\""
                   + urlToPost +
                   "\">" + hiddenField + "<input type=\"submit\"  name = \"submit\" value = \"Login\" style=\"display:none\">" +
                   "<h3>Authenticating " + appName + "....</h3> </form></body></html>";
                    if (!_formPostDetails.Keys.Contains(appName))
                        _formPostDetails.Add(appName, loadHtml);
                    //<script>try{if(document.logonForm)document.logonForm.submit.click();}catch(error){alert(error.description);}</script>
                    dicWebbrowser[appName].Loaded += SoftPhoneBar_Loaded;
                }));
            else
                _logger.Warn("Application name not exist.");
        }

        /// <summary>
        /// Sets the disposition code enable.
        /// </summary>
        public void SetDispositionCodeEnable()
        {
            if (_configContainer.AllKeys.Contains("interaction.disposition.is-mandatory") && ((string)_configContainer.GetValue("interaction.disposition.is-mandatory")).ToLower().Equals("true"))
            {
                _dataContext.IsDispositioncodeEnabled = true;
            }
            else
            {
                if (_configContainer.AllKeys.Contains("interaction.disposition.is-read-only-on-idle"))
                    _dataContext.IsDispositioncodeEnabled = !((string)_configContainer.GetValue("interaction.disposition.is-read-only-on-idle")).ToLower().Equals("true");
            }
        }

        public void SetSilent(WebBrowser browser, bool silent)
        {
            try
            {
                if (browser == null)
                    throw new ArgumentNullException("browser");

                // get an IWebBrowser2 from the document
                IOleServiceProvider sp = browser.Document as IOleServiceProvider;
                if (sp != null)
                {
                    Guid IID_IWebBrowserApp = new Guid("0002DF05-0000-0000-C000-000000000046");
                    Guid IID_IWebBrowser2 = new Guid("D30C1661-CDAF-11d0-8A3E-00C04FC9E26E");

                    object webBrowser;
                    sp.QueryService(ref IID_IWebBrowserApp, ref IID_IWebBrowser2, out webBrowser);
                    if (webBrowser != null)
                    {
                        webBrowser.GetType().InvokeMember("Silent", BindingFlags.Instance | BindingFlags.Public | BindingFlags.PutDispProperty, null, webBrowser, new object[] { silent });
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred while setting javascript error pop to silent as : " + ex.Message);
            }
        }

        /// <summary>
        /// Softs the phone bar__channel states.
        /// </summary>
        /// <param name="channelName">Name of the channel.</param>
        /// <param name="channelState">State of the channel.</param>
        public void SoftPhoneBar_channelStates(string channelName, ImageSource imgVoiceSource,
            string channelState, Visibility isStateTimer, string channelTime)
        {
            try
            {
                ImageSource channelIcon = null;
                string forward = string.Empty;
                if (_dataContext.MediaStatus.Count < 0) return;
                Pointel.Interactions.IPlugins.Plugins pluginType;
                Enum.TryParse<Pointel.Interactions.IPlugins.Plugins>(channelName, true, out pluginType);
                if (_plugins.PluginCollections.ContainsKey(pluginType) || channelName.ToLower() == Pointel.Interactions.IPlugins.Plugins.Voice.ToString().ToLower())
                {
                    switch (channelName)
                    {
                        case "Voice":
                            forward = "No Active Forward";
                            if (!string.IsNullOrEmpty(_dataContext.ForwardStatus))
                            {
                                forward = _dataContext.ForwardStatus;
                            }
                            try
                            {
                                channelIcon =
                                    GetBitmapImage(
                                        new Uri("/Agent.Interaction.Desktop;component/Images/Voice.Short.png",
                                            UriKind.Relative));
                                tlblStatus.Text = channelTime;
                            }
                            catch (Exception ex)
                            {
                                _logger.Error("Error occurred as " + ex.Message);
                            }
                            break;

                        case "Email":
                            try
                            {
                                forward = string.Empty;
                                channelIcon =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Email.png",
                                        UriKind.Relative));
                            }
                            catch
                            {
                            }
                            break;

                        case "Chat":
                            try
                            {
                                forward = string.Empty;
                                channelIcon =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Chat.png",
                                        UriKind.Relative));
                            }
                            catch
                            {
                            }
                            break;

                        case "OutboundPreview":
                            try
                            {
                                forward = string.Empty;
                                channelIcon =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Outbound.png",
                                        UriKind.Relative));
                            }
                            catch
                            {
                            }
                            break;
                    }
                }

                if (channelIcon != null)
                {
                    var item = new MediaStatus(channelIcon, channelName, imgVoiceSource,
                            channelState, channelTime, forward, string.Empty, isStateTimer);

                    //since we are changing the collection down, we need to put Dispatcher.
                    Dispatcher.BeginInvoke((Action)(delegate
                    {
                        if (_dataContext.MediaStatus.Any(p => p.ChannelName == channelName))
                        {
                            var i = _dataContext.MediaStatus.IndexOf(_dataContext.MediaStatus.FirstOrDefault(p => p.ChannelName == channelName));
                            _dataContext.MediaStatus.RemoveAt(i);
                            _dataContext.MediaStatus.Insert(i, item);
                            channelIcon = null;
                        }
                        else
                        {
                            _dataContext.MediaStatus.Insert(_dataContext.MediaStatus.Count, item);
                            channelIcon = null;
                        }
                    }), DispatcherPriority.DataBind);
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("Error occurred as " + commonException.Message);
            }
        }

        /// <summary>
        ///     Softs the phone bar__need to connect server.
        /// </summary>
        /// <param name="serverName">Name of the server.</param>
        public void SoftPhoneBar__needToConnectServer(string serverName)
        {
            try
            {
                if (serverName == "Voice")
                {
                    //if (_needtoReconnectVoiceTH == null)
                    //    _needtoReconnectVoiceTH = new Thread(ReconnectVoice);
                    if (_needtoReconnectVoiceTH == null || !_needtoReconnectVoiceTH.IsAlive)
                    {
                        _needtoReconnectVoiceTH = null;
                        _needtoReconnectVoiceTH = new Thread(ReconnectVoice);
                        _needtoReconnectVoiceTH.Start();
                    }
                }
                if (serverName == "Interaction")
                {
                    //if (_needtoReconnectInteractionTH == null)
                    //    _needtoReconnectInteractionTH = new Thread((delegate()
                    //    { }));
                    if (_needtoReconnectInteractionTH == null || !_needtoReconnectInteractionTH.IsAlive)
                    {
                        _needtoReconnectInteractionTH = null;
                        _needtoReconnectInteractionTH = new Thread(ReconnectInteraction);
                        _needtoReconnectInteractionTH.Start();
                    }
                }
                if (serverName == "IXNServerOpened")
                {
                    //Pointel.Interactions.Contact.Core.Common.OutputValues ucsOutput = conatctService.ConnectUCS(Datacontext.comObject, _dataContext.ApplicationName);
                    var registerOutput = interactionService.RegisterClient(_dataContext.AgentID);
                    if (registerOutput.MessageCode == "200")
                        _dataContext.ProxyID = registerOutput.ProxyID;
                    var ixnLoginResponse = interactionService.AgentLogin(_dataContext.AgentID, _dataContext.Place, _dataContext.ProxyID, _configContainer.TenantDbId, _mediaListWithState);
                    if (ixnLoginResponse.MessageCode == "200")
                    {
                        if (_dataContext.IsEmailPluginAdded && _configContainer.AllKeys.Contains("email.enable.plugin") &&
                            ((string)_configContainer.GetValue("email.enable.plugin")).ToLower().Equals("true") && _dataContext.lstHoldingChannelSelection.ContainsKey("email"))
                        {
                            if (Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["email"]))
                            {
                                if (((string)_configContainer.GetValue("login.email.enable.auto-ready")).ToLower().Equals("true"))
                                {
                                    InteractionHandler.AgentEmailState = "Ready";
                                    _dataContext.EmailStateImageSource = _imageDatacontext.ImgReadyStatus;
                                }
                                else
                                {
                                    InteractionHandler.AgentEmailState = "Not Ready";
                                    _dataContext.EmailStateImageSource = _imageDatacontext.ImgNotReadyStatus;
                                }
                            }
                            else
                            {
                                InteractionHandler.AgentEmailState = "Logout";
                                _dataContext.EmailStateImageSource = _imageDatacontext.ImgLogoutStatus;
                            }

                            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email))
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Email] = InteractionHandler.AgentEmailState;
                            else
                                _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Email, InteractionHandler.AgentEmailState);
                            _ixnHandler.ChangeEmailStatus(InteractionHandler.AgentEmailState);

                            if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Email))
                                ((IEmailPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Email]).NotifyIXNStatus(true, _dataContext.ProxyID);

                            NotifyAgentIXNProxyID();
                            if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                            {
                                ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).WorkbinFlag(InteractionHandler.AgentEmailState != "Logout");
                                ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).NotifyAgentLogin(true, _dataContext.ProxyID);
                                RegisterWorkbinNotification();
                            }
                            //CR by sakthi - 10-09-2015
                            // Added to notify the Email State Information to contact Plugin.
                            if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact))
                            {
                                ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).NotifyEmailMediaState(InteractionHandler.AgentEmailState != "Logout");
                            }
                            _errorMessage.Clear();
                            if (_errorMessage.Count == 0)
                            {
                                _errorMessage.Add("IWS_Message", "Interaction Server Started Successfully....");
                                _errorMessage.Add("IWS_Subject", "The channel email is back in service.");
                                _errorMessage.Add("IWS_Sender", "System");
                                _errorMessage.Add("IWS_Priority", "4");
                                _errorMessage.Add("IWS_MessageType", "System");
                                _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                GettingUserData(VoiceEvents.None, _errorMessage);
                            }
                        }
                        if (_dataContext.IsChatPluginAdded && _configContainer.AllKeys.Contains("chat.enable.plugin") &&
                            ((string)_configContainer.GetValue("chat.enable.plugin")).ToLower().Equals("true") && _dataContext.lstHoldingChannelSelection.ContainsKey("chat"))
                        {
                            if (Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["chat"]))
                            {
                                if (((string)_configContainer.GetValue("login.chat.enable.auto-ready")).ToLower().Equals("true"))
                                {
                                    InteractionHandler.AgentChatState = "Ready";
                                    _dataContext.ChatStateImageSource = _imageDatacontext.ImgReadyStatus;
                                }
                                else
                                {
                                    InteractionHandler.AgentChatState = "Not Ready";
                                    _dataContext.ChatStateImageSource = _imageDatacontext.ImgNotReadyStatus;
                                }
                            }
                            else
                            {
                                InteractionHandler.AgentChatState = "Logout";
                                _dataContext.ChatStateImageSource = _imageDatacontext.ImgLogoutStatus;
                            }

                            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Chat] = InteractionHandler.AgentChatState;
                            else
                                _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Chat, InteractionHandler.AgentChatState);
                            _ixnHandler.ChangeChatStatus(InteractionHandler.AgentChatState);

                            if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Chat))
                            {
                                if (_dataContext.InteractionProtocol != null)
                                    ((IChatPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Chat]).NotifyInteractionProtocol(_dataContext.InteractionProtocol);
                                ((IChatPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Chat]).NotifyIXNState(true, _dataContext.ProxyID);
                            }
                            _errorMessage.Clear();
                            if (_errorMessage.Count == 0)
                            {
                                _errorMessage.Add("IWS_Message", "Interaction Server Started Successfully....");
                                _errorMessage.Add("IWS_Subject", "The channel chat is back in service.");
                                _errorMessage.Add("IWS_Sender", "System");
                                _errorMessage.Add("IWS_Priority", "4");
                                _errorMessage.Add("IWS_MessageType", "System");
                                _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                GettingUserData(VoiceEvents.None, _errorMessage);
                            }
                        }
                    }
                    else
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message", ixnLoginResponse.Message + " -  Interaction Media Error(" + ixnLoginResponse.ErrorCode + ")");
                            _errorMessage.Add("IWS_Subject", ixnLoginResponse.Message);
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                        if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                            ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).NotifyAgentLogin(false, null);
                    }
                }
                if (serverName == "IXNServerClosed")
                {
                    if (_dataContext.IsEmailPluginAdded && _configContainer.AllKeys.Contains("email.enable.plugin") &&
                            ((string)_configContainer.GetValue("email.enable.plugin")).ToLower().Equals("true") && _dataContext.lstHoldingChannelSelection.ContainsKey("email"))
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message", "Interaction Server Closed....");
                            _errorMessage.Add("IWS_Subject", "The channel email is out of service.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                        InteractionHandler.AgentEmailState = "Out Of Service1";
                        _dataContext.EmailStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                        _ixnHandler.ChangeEmailStatus("Out Of Service1");
                        if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Email))
                            ((IEmailPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Email]).NotifyIXNStatus(false);
                        if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                            ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).NotifyAgentLogin(false);
                    }
                    if (_dataContext.IsChatPluginAdded && _configContainer.AllKeys.Contains("chat.enable.plugin") &&
                            ((string)_configContainer.GetValue("chat.enable.plugin")).ToLower().Equals("true") && _dataContext.lstHoldingChannelSelection.ContainsKey("chat"))
                    {
                        InteractionHandler.AgentChatState = "Out Of Service1";
                        _dataContext.ChatStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                        _ixnHandler.ChangeChatStatus("Out Of Service1");
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message", "Interaction Server Closed....");
                            _errorMessage.Add("IWS_Subject", "The channel chat is out of service.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                        if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Chat))
                            ((IChatPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Chat]).NotifyIXNState(false);
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
            //}));
        }

        public void VoiceStateChange(AgentStateType type, string state)
        {
            var softPohne = new SoftPhone();

            #region Voice

            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
            {
                if (!_dataContext.isOnCall && !Datacontext.isDialling && !Datacontext.isRinging)
                {
                    if (state == "Ready" && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                    {
                        softPohne.Ready();
                        _dataContext.VoiceNotReadyReasonCode = string.Empty;
                        _dataContext.isDND = false;
                        _dataContext.IsAgentClickedReady = true;
                    }
                    else if (state.Contains("Not Ready") && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                    {
                        if (state == "Not Ready")
                        {
                            SetNotReady();
                            _isNrReasonCode = false;
                            _dataContext.IsAgentClickedReady = false;
                            _dataContext.VoiceNotReadyReasonCode = string.Empty;
                        }
                        else
                        {
                            state = state.Replace("Not Ready - ", "");
                            string keyCode = string.Empty;
                            switch (type)
                            {
                                case AgentStateType.Global:
                                    if (_configContainer.AllKeys.Contains("GlobalNotReadyReasonCodes"))
                                    {
                                        if (((Dictionary<string, string>)_configContainer.GetValue("GlobalNotReadyReasonCodes")).ContainsKey(state))
                                        {
                                            keyCode = ((Dictionary<string, string>)_configContainer.GetValue("GlobalNotReadyReasonCodes"))[state];
                                        }
                                    }
                                    break;

                                case AgentStateType.Channel:
                                    if (_configContainer.AllKeys.Contains("VoiceNotReadyReasonCodes"))
                                    {
                                        if (((Dictionary<string, string>)_configContainer.GetValue("VoiceNotReadyReasonCodes")).ContainsKey(state))
                                        {
                                            keyCode = ((Dictionary<string, string>)_configContainer.GetValue("VoiceNotReadyReasonCodes"))[state];
                                        }
                                    }
                                    break;

                                default:
                                    keyCode = string.Empty;
                                    break;
                            }
                            if (!string.IsNullOrEmpty(keyCode))
                            {
                                softPohne.NotReady(state, keyCode);
                                _isNrReasonCode = true;
                                _dataContext.VoiceNotReadyReasonCode = state;
                            }
                        }
                    }
                    else if (state == "Log On")
                    {
                        _dataContext.VoiceNotReadyReasonCode = string.Empty;
                        VoiceLogOn();
                        // }
                    }
                    else if (state == "Logout")
                    {
                        if (!_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                        {
                            _dataContext.VoiceNotReadyReasonCode = string.Empty;
                            _logger.Debug("Agent Logout is in process");
                            _isLogoutFromAID = true;
                            softPohne.Logout();
                        }
                    }
                    else if (state == "Do Not Disturb" && _dataContext.SwitchName.ToLower().Contains("nortel") && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                    {
                        _dataContext.VoiceNotReadyReasonCode = string.Empty;
                        _dataContext.isDND = true;
                        _isDNDFromAID = true;
                        softPohne.DNDOn();
                    }
                    else if (state == "After Call Work" && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                    {
                        softPohne.NotReadyACW();
                        _dataContext.VoiceNotReadyReasonCode = string.Empty;
                        _isACWByUser = true;
                    }
                }
                else
                {
                    if (state == "Logout" || state == "Log On" || _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                        return;
                    //Code Added - V.Palaniappan
                    //08.11.2013
                    if (_configContainer.AllKeys.Contains("voice.enable.agent-select-status-interaction") && ((string)_configContainer.GetValue("voice.enable.agent-select-status-interaction")).ToLower().Equals("true"))
                    {
                        if (state.Contains("Not Ready - ") && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                        {
                            _dataContext.StatusChangeOnVoiceInteraction = state.Replace("Not Ready - ", "");
                            _dataContext.VoiceNotReadyReasonCode = state.Replace("Not Ready - ", "");
                            _dataContext.IsAgentClickedReady = false;
                            _isAgentClickNRCodeOnCall = true;
                            //Code Added - Sending NotReady Request to T-Server while agent is onCall
                            //V.Palaniappan - 11.12.2013
                            if (_configContainer.AllKeys.Contains("VoiceNotReadyReasonCodes") &&
                                ((Dictionary<string, string>)_configContainer.GetValue("VoiceNotReadyReasonCodes")).ContainsKey(_dataContext.VoiceNotReadyReasonCode))
                            {
                                string keyCode = ((Dictionary<string, string>)_configContainer.GetValue("VoiceNotReadyReasonCodes"))[_dataContext.VoiceNotReadyReasonCode];
                                softPohne.NotReady(_dataContext.VoiceNotReadyReasonCode, keyCode);
                                _isNrReasonCode = true;
                            }
                            //End
                        }
                        else if (state == "After Call Work" && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                        {
                            _isACWByUser = true;
                            _isAgentClickNRCodeOnCall = true;
                            _dataContext.StatusChangeOnVoiceInteraction = state;
                            _dataContext.VoiceNotReadyReasonCode = state;
                            softPohne.NotReadyACW();
                        }
                        else if (state == "Ready" && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                        {
                            _isAgentClickNRCodeOnCall = true;
                            _dataContext.StatusChangeOnVoiceInteraction = state;
                            _dataContext.VoiceNotReadyReasonCode = string.Empty;
                            _dataContext.IsAgentClickedReady = true;
                            softPohne.Ready();
                        }
                        else if (state == "Do Not Disturb" && _dataContext.SwitchName.ToLower().Contains("nortel") && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                        {
                            _dataContext.VoiceNotReadyReasonCode = string.Empty;
                            _dataContext.isDND = true;
                            _isDNDFromAID = true;
                            softPohne.DNDOn();
                            _dataContext.StatusChangeOnVoiceInteraction = state;
                            _dataContext.VoiceNotReadyReasonCode = string.Empty;
                            _dataContext.IsAgentClickedReady = false;
                            _isNrReasonCode = false;
                        }
                        else if (!_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                        {
                            _isAgentClickNRCodeOnCall = true;
                            _dataContext.StatusChangeOnVoiceInteraction = state;
                            _dataContext.VoiceNotReadyReasonCode = string.Empty;
                            _dataContext.IsAgentClickedReady = false;
                            //Code Added - Sending NotReady Request to T-Server while agent is onCall
                            //V.Palaniappan - 11.12.2013
                            SetNotReady();
                            _isNrReasonCode = false;
                            //End
                        }
                        if (state == "Ready" && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgReadyStatus;
                        if (state == "Not Ready" || state.Contains("Not Ready - ") && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgNotReadyStatus;
                        if (state == "After Call Work" && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgACWStatus;
                        if (state == "Do Not Disturb" && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgDNDStatus;
                        if (state == "Do Not Disturb" && !_dataContext.isDND) return;
                        SoftPhoneBar_channelStates("Voice", _dataContext.VoiceStateImageSource,
                            _dataContext.StatusChangeOnVoiceInteraction, Visibility.Collapsed, tlblStatus.Text);
                        _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = _dataContext.StatusChangeOnVoiceInteraction;
                        _dataContext.UserState = _dataContext.StatusChangeOnVoiceInteraction;
                    } //End
                }
            }

            #endregion Voice

            softPohne = null;
        }

        /// <summary>
        ///     Handles the Activated event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        public void Window_Activated(object sender, EventArgs e)
        {
            MainBorder.BitmapEffect = _shadowEffect;
            _dataContext.MainBorderBrush = (Brush)(new BrushConverter().ConvertFromString("#0070C5"));
            if (winHideTimer == null) return;
            if (winHideTimer.IsEnabled)
            {
                _seconds = 0;
                winHideTimer.Stop();
            }
            if (!firstTime && !_isfirstBottomWidthSet)
            {
                Width = grdTools_Buttons.ActualWidth + btn_Menu.Width + 20;
                this.MinWidth = Width;
                firstTime = true;
            }
        }

        /// <summary>
        ///     Handles the Deactivated event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        public void Window_Deactivated(object sender, EventArgs e)
        {
            _dataContext.MainBorderBrush = Brushes.Black;
            MainBorder.BitmapEffect = null;
        }

        /// <summary>
        ///     Writes the automatic target dn.
        /// </summary>
        /// <param name="Num">The number.</param>
        protected void WriteToTargetDN(string Num)
        {
            try
            {
                if (string.Compare(Num, "Back", true) == 0)
                {
                    txtDN.Text = txtDN.Text.Substring(0, txtDN.Text.Length - 1);
                }
                else if (string.Compare(Num, "Clear", true) == 0)
                {
                    if (Num.Length > 0 && Num != "CLEAR")
                    {
                        txtDN.Text = Num;
                    }
                }
                else if (string.Compare(Num, "Dial", true) == 0)
                {
                    _number = txtDN.Text;
                    if (Num == _dataContext.ThisDN || _dataContext.DiallingNumber == _dataContext.ThisDN)
                        DisplayOwnDNCallErrorMessage();
                    else
                    {
                        if (!string.IsNullOrEmpty(_number) && _number.Trim() != "0")
                        {
                            btnDial_Click(null, null);
                            if (btnDial.ContextMenu != null)
                                btnDial.ContextMenu.IsOpen = false;
                            txtDN.Text = _number;
                            _dataContext.IsInitiateConfClicked = false;
                            _dataContext.IsInitiateTransClicked = false;
                            _dataContext.IsHoldClicked = true;
                        }
                    }
                }
                else if (string.Compare(Num, "speed", true) == 0)
                {
                    if (txtDN.Text.Trim() != "0" && !string.IsNullOrEmpty(txtDN.Text))
                    {
                        if (Num == _dataContext.ThisDN || _dataContext.DiallingNumber == _dataContext.ThisDN)
                            DisplayOwnDNCallErrorMessage();
                        else
                        {
                            btnDial_Click(null, null);
                        }
                    }
                }
                else if (string.Compare(Num, "transfer", true) == 0)
                {
                    if (txtDN.Text.Trim() != "0" && !string.IsNullOrEmpty(txtDN.Text))
                    {
                        if (Num == _dataContext.ThisDN || _dataContext.DiallingNumber == _dataContext.ThisDN)
                            DisplayOwnDNCallErrorMessage();
                        else
                        {
                            _dataContext.DiallingNumber = txtDN.Text;
                            btnTransfer_Click(null, null);
                        }
                    }
                }
                else if (string.Compare(Num, "conference", true) == 0)
                {
                    if (txtDN.Text.Trim() != "0" && !string.IsNullOrEmpty(txtDN.Text))
                    {
                        if (Num == _dataContext.ThisDN || _dataContext.DiallingNumber == _dataContext.ThisDN)
                            DisplayOwnDNCallErrorMessage();
                        else
                        {
                            _dataContext.DiallingNumber = txtDN.Text;
                            btnConference_Click(null, null);
                        }
                    }
                }
                else
                {
                    if (Num.Length > 1)
                    {
                        txtDN.Text = Num;
                        _dataContext.DiallingNumber = Num;
                    }
                    else
                    {
                        txtDN.Text = Num;
                        _dataContext.DiallingNumber = Num;
                    }
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("Error occurred while performing process of dial pad " +
                             commonException.ToString());
            }
        }

        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool BringWindowToTop(IntPtr hWnd);

        [DllImport("user32", SetLastError = true)]
        private static extern bool CloseClipboard();

        [DllImport("user32.dll")]
        private static extern bool DeleteMenu(IntPtr hMenu, int uPosition, int uFlags);

        [DllImport("user32", SetLastError = true)]
        private static extern bool EmptyClipboard();

        [DllImport("user32.dll")]
        private static extern bool EnableMenuItem(IntPtr hMenu, Int32 uIDEnableItem, Int32 uEnable);

        [DllImport("user32.dll")]
        private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

        [DllImport("user32.dll")]
        private static extern bool InsertMenu(IntPtr hMenu, Int32 wPosition, Int32 wFlags, Int32 wIDNewItem, string lpNewItem);

        /// <summary>
        ///     Called when [access key pressed].
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="AccessKeyPressedEventArgs" /> instance containing the event data.</param>
        private static void OnAccessKeyPressed(object sender, AccessKeyPressedEventArgs e)
        {
            if (!e.Handled && e.Scope == null && (e.Target == null))
            {
                if ((Keyboard.Modifiers & ModifierKeys.Alt) != ModifierKeys.Alt)
                {
                    e.Target = null;
                    e.Handled = true;
                }
            }
        }

        [DllImport("user32", SetLastError = true)]
        private static extern bool OpenClipboard(IntPtr WinHandle);

        [DllImport("user32.dll")]
        private static extern int ShowWindow(IntPtr hWnd, int nCmdShow);

        /// <summary>
        /// Tries the automatic find grid cell.
        /// </summary>
        /// <param name="grid">The grid.</param>
        /// <param name="cellInfo">The cell information.</param>
        /// <returns></returns>
        private static Microsoft.Windows.Controls.DataGridCell TryToFindGridCell(Microsoft.Windows.Controls.DataGrid grid, Microsoft.Windows.Controls.DataGridCellInfo cellInfo)
        {
            Microsoft.Windows.Controls.DataGridCell result = null;
            Microsoft.Windows.Controls.DataGridRow row = null;
            grid.ScrollIntoView(cellInfo.Item);
            grid.UpdateLayout();
            row = (Microsoft.Windows.Controls.DataGridRow)grid.ItemContainerGenerator.ContainerFromItem(cellInfo.Item);
            if (row != null)
            {
                int columnIndex = grid.Columns.IndexOf(cellInfo.Column);
                if (columnIndex > -1)
                {
                    Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter presenter = GetVisualChild<Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter>(row);
                    result = presenter.ItemContainerGenerator.ContainerFromIndex(columnIndex) as Microsoft.Windows.Controls.DataGridCell;
                }
            }
            return result;
        }

        private void AddBrowser(string applicationName, byte count, bool allowNewWindowHook, bool overrideSameWindow)
        {
            if (!DataTabControl.Items.Contains(popUpUrl))
                DataTabControl.Items.Add(popUpUrl);

            if (count == 1)
            {
                gridPopupURL.Children.Remove(tbSubTab);
                HelperWindow wbo = new HelperWindow(gridPopupURL, this, DataTabControl);
                webBrowser = wbo.WebBrowser;
                popUpUrl.Header = webBrowser.Name = applicationName;
                dicWebbrowser.Add(applicationName, webBrowser);
            }
            else
            {
                if (gridPopupURL.Children.Contains(webBrowser))
                    gridPopupURL.Children.Remove(webBrowser);

                HelperWindow wbo = null;
                switch (browsercount)
                {
                    case 0:
                        wbo = new HelperWindow(gridFirst, this, tbSubTab);
                        firstTab.Header = applicationName;
                        firstBrowser = wbo.WebBrowser;
                        firstBrowser.Name = applicationName;
                        dicWebbrowser.Add(applicationName, firstBrowser);
                        break;

                    default:
                        Grid gridBrowserContainer = new Grid();
                        gridBrowserContainer.HorizontalAlignment = HorizontalAlignment.Stretch;
                        gridBrowserContainer.VerticalAlignment = VerticalAlignment.Stretch;
                        gridBrowserContainer.Background = Brushes.Black;
                        gridBrowserContainer.Name = "grid" + applicationName;
                        TabItem tbiBrowser = new TabItem();
                        tbiBrowser.HorizontalAlignment = HorizontalAlignment.Stretch;
                        tbiBrowser.VerticalAlignment = VerticalAlignment.Stretch;
                        tbiBrowser.Header = applicationName;
                        tbiBrowser.Content = gridBrowserContainer;
                        tbSubTab.Items.Add(tbiBrowser);
                        WebBrowser tempWebBrowser = CreateWebBrowser();
                        gridBrowserContainer.Children.Add(tempWebBrowser);
                        HelperWindow wbo1 = new HelperWindow(gridBrowserContainer, this, tbSubTab);
                        tempWebBrowser = wbo1.WebBrowser;
                        tempWebBrowser.Name = applicationName;
                        dicWebbrowser.Add(applicationName, tempWebBrowser);
                        break;
                }
            }

            browsercount++;
        }

        /// <summary>
        ///     Handles the Tick event of the agentStateTimer control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        private void agentStateTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                ChangeVoiceStatus(_agentstate);

                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Email))
                {
                    if (_ixnHandler._lstEmailState.Count == 0)
                        _ixnHandler._lstEmailState.Add(InteractionHandler.AgentEmailState);
                    _ixnHandler.ChangeEmailStatus(InteractionHandler.AgentEmailState);
                }
                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Chat))
                {
                    if (_ixnHandler._lstChatState.Count == 0)
                        _ixnHandler._lstChatState.Add(InteractionHandler.AgentChatState);
                    _ixnHandler.ChangeChatStatus(InteractionHandler.AgentChatState);
                }
                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.OutboundPreview))
                {
                    if (_ixnHandler._lstOutboundState.Count == 0)
                        _ixnHandler._lstOutboundState.Add(InteractionHandler.AgentOutboundState);
                    _ixnHandler.ChangeOutboundStatus(InteractionHandler.AgentOutboundState);
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("agentStateTimer_Tick:" + commonException);
            }
        }

        /// <summary>
        /// Handles the Tick event of the agentWrapupTimer control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void agentWrapupTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                _logger.Debug("agentWrapupTimer_Tick Entry");
                _logger.Debug("Is agent on call : " + _dataContext.isOnCall.ToString() + " - Agent State : " + _agentstate);
                if (_dataContext.isOnCall || _agentstate == "OnRinging")
                {
                    _agentWrapupTimer.Stop();
                    _logger.Debug("Agent Wrapup timer is stopped");
                }
                else
                {
                    //if (!_dataContext.isAgentExtendACWTime && _configContainer.AllKeys.Contains("voice.acw.enabled")
                    //        && ((string)_configContainer.GetValue("voice.acw.enabled")).ToLower().Equals("true"))
                    //{
                    _logger.Debug("AgentExtendACWTime : " + _dataContext.isAgentExtendACWTime + " IsEnableACW : " + _configContainer.GetValue("voice.acw.enabled"));
                    _agentWrapupTimer.Stop();
                    _logger.Debug("Agent Wrapup timer is stopped");
                    //}
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("Error occurred as " + commonException.Message);
            }
            _logger.Debug("agentWrapupTimer_Tick Exit");
        }

        /// <summary>
        /// Handles the Click event of the Answer control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void Answer_Click(object sender, RoutedEventArgs e)
        {
            {
                _taskbarNotifier.stayOpenTimer.Stop();
                _taskbarNotifier.DisplayState = Pointel.TaskbarNotifier.TaskbarNotifier.DisplayStates.Hiding;
                var softAnswer = new SoftPhone();
                softAnswer.Answer();
            }
        }

        private void AutoAnswer()
        {
            Dispatcher.Invoke(new Action(() =>
            {
                try
                {
                    //Thread.Sleep((_configContainer.AllKeys.Contains("voice.auto-answer.timer") ? int.Parse((string)_configContainer.GetValue("voice.auto-answer.timer")) : 0) * 1000);

                    _taskbarNotifier.stayOpenTimer.Stop();
                    _taskbarNotifier.DisplayState = Pointel.TaskbarNotifier.TaskbarNotifier.DisplayStates.Hiding;

                    var softAnswer = new SoftPhone();
                    softAnswer.Answer();
                }
                catch { }
            }));
        }

        /// <summary>
        /// Handles the MouseEnter event of the Border control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseEventArgs"/> instance containing the event data.</param>
        private void Border_MouseEnter(object sender, MouseEventArgs e)
        {
            imgStatusOption.Visibility = Visibility.Visible;
            agentStateBorder.Background = (Brush)new BrushConverter().ConvertFrom("#d6ebff");
        }

        /// <summary>
        /// Handles the MouseLeave event of the Border control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseEventArgs"/> instance containing the event data.</param>
        private void Border_MouseLeave(object sender, MouseEventArgs e)
        {
            imgStatusOption.Visibility = Visibility.Hidden;
            agentStateBorder.Background = Brushes.White;
        }

        /// <summary>
        /// Handles the Click event of the btnAddCallData control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void btnAddCallData_Click(object sender, RoutedEventArgs e)
        {
            _dataContext.CallDataAdd.PlacementTarget = btnAddCallData;
            _dataContext.CallDataAdd.IsOpen = true;
        }

        /// <summary>
        /// Handles the Click event of the btnAlternateCall control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void btnAlternateCall_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var softAlternateCall = new SoftPhone();
                softAlternateCall.AlternateCall(_dataContext.ThisDN);
                softAlternateCall = null;
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar_AlternateCall:" + commonException);
            }
        }

        /// <summary>
        ///     Handles the Click event of the btnAnswer control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnAnswer_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_dataContext.TalkText == "Release")
                {
                    Release_Click(null, null);
                }
                else
                {
                    Answer_Click(null, null);
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("btnAnswer_Click:" + commonException);
            }
        }

        /// <summary>
        ///     Handles the Click event of the btnCallData control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnCallData_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //Code added by Manikandan on 08-04-2014 to show CallInfo window if Enable.view key is true
                if (_dataContext.IsCallWindowEnabled)
                {
                    //_dataContext.A_DataTabVisibility = Visibility.Collapsed;
                    var window = IsWindowOpen<Window>("UserCallInfo");
                    if (window != null)
                    {
                        if (window.WindowState == WindowState.Minimized)
                        {
                            window.WindowState = WindowState.Normal;
                            window.Focus();
                        }
                        else
                            window.Focus();
                    }
                    else
                    {
                        CallInfo callInfo = new CallInfo();
                        callInfo.Show();
                    }
                }
                //End

                if (_configContainer.GetAsBoolean("voice.enable.popup-case-data", false))
                    btnOpenCallDataWin_Click(null, null);
                else
                {
                    if (_dataContext.BottomRowHeight == new GridLength(0))
                    {
                        SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), false);
                    }
                    //Code Added - 04/10/2013
                    else
                    {
                        if (_dataContext.Bottomwindow == Datacontext.OpendBy.MyMessage || _dataContext.Bottomwindow == Datacontext.OpendBy.MyContact)
                        {
                            _dataContext.Bottomwindow = Datacontext.OpendBy.Workspace;
                        }
                        _dataContext.WorksapceTabVisibility = Visibility.Visible;
                        _dataContext.MessageTabVisibility = Visibility.Hidden;
                        _dataContext.ContactTabVisibility = Visibility.Hidden;
                    }
                    _dataContext.A_DataTabVisibility = Visibility.Visible;
                    //Code Added - V.Palaniappan
                    //3.1.2014
                    for (int i = 0; i < DataTabControl.Items.Count; i++)
                    {
                        var item = DataTabControl.Items.GetItemAt(i) as TabItem;
                        if (item != null && item.Name.Equals("calldata"))
                        {
                            DataTabControl.SelectedIndex = i;
                            tb_CallData.SelectedIndex = 0;
                        }
                    } //End
                    _isopendbyUser = true;
                }

                InitialloadData();
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar:btnCallData_Click:" + commonException);
            }
        }

        /// <summary>
        ///     Handles the Click event of the btnClear control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnClear_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                DGAttachData.CancelEdit();
                BindGrid();
            }
            catch (Exception commonException)
            {
                _logger.Error("Error occurred as " + commonException.Message);
            }
        }

        /// <summary>
        ///     Handles the Click event of the btnConference control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnConference_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _logger.Debug("btnConference_Click Started");
                if (!_dataContext.DiallingNumber.Equals(txtDN.Text))
                {
                    _dataContext.DiallingNumber = txtDN.Text;
                }
                if (_dataContext.ConfText == "Comp Conf")
                {
                    var softComplete = new SoftPhone();
                    softComplete.CompleteConference();
                    softComplete = null;
                    _dataContext.UserSetConfType = Datacontext.ConsultType.None;
                    _dataContext.IsInitiateTransClicked = false;
                    _dataContext.IsInitiateConfClicked = false;
                    _dataContext.IsConfDialPadOpen = false;
                    _dataContext.IsTransDialPadOpen = false;
                }
                else if (_dataContext.ConfText == "Delete Conf")
                {
                    if (txtDN.Text != null && !txtDN.Text.Equals(""))
                    {
                        if (txtDN.Text == _dataContext.ThisDN || _dataContext.DiallingNumber == _dataContext.ThisDN)
                            DisplayOwnDNCallErrorMessage();
                        else
                        {
                            var softDelete = new SoftPhone();
                            softDelete.DeleteConference(txtDN.Text);
                            softDelete = null;
                            _dataContext.UserSetConfType = Datacontext.ConsultType.None;
                            _dataContext.IsInitiateTransClicked = false;
                            _dataContext.IsInitiateConfClicked = false;
                            _dataContext.IsConfDialPadOpen = false;
                            _dataContext.IsTransDialPadOpen = false;
                        }
                    }
                    else
                        txtDN.Focus();
                }
                else
                {
                    if (!_dataContext.IsConfDialPadOpen)
                    {
                        if (_dataContext.UserSetConfType == Datacontext.ConsultType.None)
                        {
                            bool _is1StepConfEnabled = false;
                            bool _is2StepConfEnabled = false;
                            if (_configContainer.AllKeys.Contains("voice.enable.single-step-conference") &&
                                ((string)_configContainer.GetValue("voice.enable.single-step-conference")).Equals("true"))
                                _is1StepConfEnabled = true;

                            if (_configContainer.AllKeys.Contains("voice.enable.two-step-conference") &&
                                ((string)_configContainer.GetValue("voice.enable.two-step-conference")).Equals("true"))
                                _is2StepConfEnabled = true;

                            if (_is1StepConfEnabled != _is2StepConfEnabled)
                            {
                                if (_is1StepConfEnabled)
                                    _dataContext.UserSetConfType = Datacontext.ConsultType.OneStep;
                                if (_is2StepConfEnabled)
                                    _dataContext.UserSetConfType = Datacontext.ConsultType.DualStep;
                            }
                            else
                            {
                                _dataContext.UserSetConfType = Datacontext.ConsultType.None;
                                ConsultCallSelection_Open(btnConference);
                                _dataContext.IsConfDialPadOpen = false;
                                return;
                            }
                        }
                        if (!_dataContext.DiallingNumber.Equals(string.Empty) &&
                            _dataContext.DiallingNumber != null)
                        {
                            _logger.Info("Dialling Number is : " + _dataContext.DiallingNumber);
                            if (_dataContext.UserSetConfType == Datacontext.ConsultType.OneStep)
                            {
                                _logger.Info("Dialing Mode : Single Step Conference");

                                if (txtDN.Text == _dataContext.ThisDN || _dataContext.DiallingNumber == _dataContext.ThisDN)
                                    DisplayOwnDNCallErrorMessage();
                                else
                                {
                                    _dataContext.IsInitiateTransClicked = false;
                                    _dataContext.IsInitiateConfClicked = false;
                                    _isTransferClick = false;
                                    _dataContext.DialedNumber = txtDN.Text;
                                    var soft = new SoftPhone();
                                    soft.SingleStepConference(_dataContext.DiallingNumber);
                                    soft = null;
                                    //Added for recent call list
                                    if (!_recentContacts.Contains(txtDN.Text))
                                    {
                                        if (!string.IsNullOrEmpty(txtDN.Text))
                                            _recentContacts.Add(txtDN.Text);
                                    }
                                    if (!txtDN.Items.Contains(txtDN.Text))
                                    {
                                        if (!string.IsNullOrEmpty(txtDN.Text))
                                            txtDN.ItemsSource = (_recentContacts as IEnumerable<string>).Reverse();
                                    }
                                    //end
                                    _dataContext.DiallingNumber = string.Empty;
                                    _dataContext.DialedNumbers = string.Empty;
                                    _dataContext.UserSetConfType = Datacontext.ConsultType.None;
                                    txtDN.Text = string.Empty;
                                    _dataContext.IsConfDialPadOpen = false;
                                }
                            }
                            else if (_dataContext.UserSetConfType == Datacontext.ConsultType.DualStep)
                            {
                                _logger.Info("Dialing Mode : Two Step Conference");
                                if (txtDN.Text == _dataContext.ThisDN || _dataContext.DiallingNumber == _dataContext.ThisDN)
                                    DisplayOwnDNCallErrorMessage();
                                else
                                {
                                    _logger.Info("Two Step Conference Beginning");
                                    _dataContext.IsInitiateTransClicked = false;
                                    _dataContext.IsInitiateConfClicked = true;
                                    _dataContext.DialedNumber = txtDN.Text;
                                    if (!IsBlockedNumber(_dataContext.DiallingNumber))
                                    {
                                        var soft = new SoftPhone();
                                        //Added by moorthy, This implies unsolicited initiate transfer/conference
                                        var ReasonCode = new Genesyslab.Platform.Commons.Collections.KeyValueCollection();
                                        ReasonCode.Add("OperationMode", "Conference");
                                        soft.InitiateConference(PrefixDialedNumber(_dataContext.DiallingNumber), ReasonCode);
                                        soft = null;
                                        //Added for recent call list
                                        if (!_recentContacts.Contains(txtDN.Text))
                                        {
                                            if (!string.IsNullOrEmpty(txtDN.Text))
                                                _recentContacts.Add(txtDN.Text);
                                        }
                                        if (!txtDN.Items.Contains(txtDN.Text))
                                        {
                                            if (!string.IsNullOrEmpty(txtDN.Text))
                                                txtDN.ItemsSource = (_recentContacts as IEnumerable<string>).Reverse();
                                        }
                                        //end
                                    }
                                    _dataContext.DiallingNumber = string.Empty;
                                    _dataContext.DialedNumbers = string.Empty;
                                    _dataContext.UserSetConfType = Datacontext.ConsultType.None;
                                    _dataContext.IsConfDialPadOpen = false;
                                    _logger.Info("Two Step Conference End.");
                                }
                            }
                        }
                        else
                        {
                            //open Dial pad after dial click redirect to this method.

                            if (!_dataContext.IsConfDialPadOpen)
                            {
                                if (_dataContext.UserSetConfType != Datacontext.ConsultType.None)
                                {
                                    _dataContext.IsConfDialPadOpen = true;
                                    OpenDialPad(Datacontext.DialPadType.Conference, btnConference);
                                }
                            }
                            else
                            {
                                //open ConsultCallSelection after selection redirect to this method.
                                _dataContext.UserSetConfType = Datacontext.ConsultType.None;
                                ConsultCallSelection_Open(btnConference);
                                _dataContext.IsConfDialPadOpen = false;
                            }
                        }
                    }
                    else
                    {
                        //code Added - To avoid displaying Menu as well dial pad on continuous conference button click
                        //08.1.2014
                        if (_dataContext.IsConfDialPadOpen)
                        {
                            if (_dataContext.UserSetConfType != Datacontext.ConsultType.None)
                            {
                                _dataContext.IsConfDialPadOpen = true;
                                OpenDialPad(Datacontext.DialPadType.Conference, btnConference);
                            }
                            else
                            {
                                _dataContext.UserSetConfType = Datacontext.ConsultType.None;
                                ConsultCallSelection_Open(btnConference);
                                _dataContext.IsConfDialPadOpen = false;
                            }
                        }
                        else
                        {
                            _dataContext.UserSetConfType = Datacontext.ConsultType.None;
                            ConsultCallSelection_Open(btnConference);
                            _dataContext.IsConfDialPadOpen = false;
                        }
                        //end
                    }
                }
                _logger.Debug("btnConference_Click Ended.");
            }
            catch (Exception commonException)
            {
                _logger.Error("btnConference_Click:" + commonException);
            }
        }

        /// <summary>
        ///     Handles the Click event of the btnDial control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnDial_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (!_dataContext.isOnCall)
                {
                    _talkTime = 0;
                    _errorCount = 0;
                    if (txtDN.Text != null && !txtDN.Text.Equals(""))
                    {
                        if (txtDN.Text == _dataContext.ThisDN || _dataContext.DiallingNumber == _dataContext.ThisDN)
                            DisplayOwnDNCallErrorMessage();
                        else
                        {
                            if (!IsBlockedNumber(txtDN.Text))
                            {

                                if (!string.IsNullOrEmpty(txtDN.Text))
                                {
                                    if (_recentContacts.Contains(txtDN.Text))
                                        _recentContacts.Remove(txtDN.Text);
                                    _recentContacts.Add(txtDN.Text);
                                }

                                txtDN.ItemsSource = (_recentContacts as IEnumerable<string>).Reverse();

                                _dataContext.DialedNumber = txtDN.Text;
                                var softDial = new SoftPhone();
                                softDial.Dial(PrefixDialedNumber(txtDN.Text));
                                softDial = null;
                                _dataContext.DiallingNumber = string.Empty;
                            }
                        }
                    }
                    else
                    {
                        //sample win = new sample();
                        //win.Show();
                        dialpad = null;
                        dialpad = new DialPad(Datacontext.DialPadType.Normal);
                        dialpad.eventFireBackNum += WriteToTargetDN;
                        //var grid = new Grid();
                        //grid.Background = Brushes.White;
                        //grid.Children.Add(dialpad);
                        var menuConsultItem = new MenuItem();
                        menuConsultItem.StaysOpenOnClick = true;
                        menuConsultItem.Background = Brushes.Transparent;
                        menuConsultItem.Header = dialpad;
                        menuConsultItem.Margin = new Thickness(-12, -3, -18, -3);
                        menuConsultItem.Width = Double.NaN;
                        _dataContext.cmshow.Items.Clear();
                        _dataContext.cmshow.Style = (Style)FindResource("Contextmenu");
                        _dataContext.cmshow.Items.Add(menuConsultItem);
                        _dataContext.cmshow.PlacementTarget = btnDial;
                        _dataContext.cmshow.Placement = PlacementMode.Bottom;
                        _dataContext.cmshow.IsOpen = true;
                        _dataContext.cmshow.StaysOpen = true;
                        _dataContext.cmshow.Focus();
                    }
                }
                //below code added for the purpose of dtmf
                //Smoorthy
                else
                {
                    if (_configContainer.AllKeys.Contains("voice.enable.dtmf") &&
                                ((string)_configContainer.GetValue("voice.enable.dtmf")).ToLower().Equals("true"))
                    {
                        dtmf = null;
                        _dataContext.StatusMessage = string.Empty;
                        _dataContext.StatusMessageHeight = new GridLength(0);
                        dtmf = new DTMF();
                        //var grid = new Grid();
                        //grid.Background = Brushes.White;
                        //grid.Children.Add(dtmf);
                        var menuConsultItem = new MenuItem();
                        menuConsultItem.StaysOpenOnClick = true;
                        menuConsultItem.Background = Brushes.Transparent;
                        menuConsultItem.Header = dtmf;
                        menuConsultItem.Margin = new Thickness(-12, 0, -18, 0);
                        menuConsultItem.Width = Double.NaN;
                        _dataContext.cmshow.Items.Clear();
                        _dataContext.cmshow.Items.Add(menuConsultItem);
                        _dataContext.cmshow.Style = (Style)FindResource("Contextmenu");
                        _dataContext.cmshow.StaysOpen = true;
                        _dataContext.cmshow.PlacementTarget = btnDial;
                        _dataContext.cmshow.Placement = PlacementMode.Bottom;
                        _dataContext.cmshow.IsOpen = true;
                        _dataContext.cmshow.Focus();
                    }
                }
                //end
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar:btnDial_Click:" + commonException);
            }
        }

        /// <summary>
        ///     Handles the MouseRightButtonUp event of the btnDial control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.</param>
        private void btnDial_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            e.Handled = true;
        }

        /// <summary>
        ///     Handles the Click event of the btnExit control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnExit_Click(object sender, RoutedEventArgs e)
        {
            //Dictionary<Datacontext.Channels, string> _dict = new Dictionary<Datacontext.Channels, string>();
            //_dict = _dataContext.htMediaCurrentState.Cast<DictionaryEntry>().ToDictionary(kvp => (Datacontext.Channels)kvp.Key, kvp => (string)kvp.Value);
            //var keyValue = _dict.Where(x => x.Value.Contains("Pending"));
            //if (keyValue.Count() == 0)
            //{
            this.Close();
            //}
        }

        private void btnFacet_Click(object sender, RoutedEventArgs e)
        {
            //if (_configContainer.AllKeys.Contains("crm.third-party-tool") && _configContainer.GetAsBoolean("crm.third-party-tool"))
            //{
            //    if (_dataContext.userAttachData != null && _dataContext.userAttachData.Count > 0 && _dataContext.userAttachData.ContainsKey("MemberType") && _dataContext.userAttachData["MemberType"] == "FACETS")
            //    {
            //        var file = Path.Combine(Path.Combine(System.Windows.Forms.Application.StartupPath, "Plugins"), "Pointel.Integration.Core.dll");
            //        if (File.Exists(file))
            //        {
            //            Assembly asm = Assembly.LoadFile(file);
            //            var thirdPartyInterfrace = (IDesktopMessenger)(from asmType in asm.GetTypes() where asmType.GetInterface("IDesktopMessenger") != null select (IDesktopMessenger)Activator.CreateInstance(asmType)).FirstOrDefault();
            //            if (thirdPartyInterfrace != null)
            //            {
            //                if (_configContainer.AllKeys.Contains("facet.process-name") && !string.IsNullOrEmpty(_configContainer.GetAsString("facet.process-name")) && _dataContext.userAttachData.ContainsKey("FACETSMemberNumber") && _dataContext.userAttachData.ContainsKey("MemberGroup"))
            //                    thirdPartyInterfrace.NotifyFacetPopup(_configContainer.GetAsString("facet.process-name"), _dataContext.userAttachData["FACETSMemberNumber"].ToString(), _dataContext.userAttachData["MemberGroup"].ToString());
            //            }
            //        }
            //        else
            //            _logger.Warn("Integration.Core Plug-in dll not exist");
            //    }
            //}
        }

        /// <summary>
        ///     Handles the Click event of the btnHold control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnHold_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_dataContext.HoldText != "Hold")
                {
                    Retrieve_Click(null, null);
                }
                else
                {
                    Hold_Click(null, null);
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("btnHold_Click:" + commonException);
            }
        }

        /// <summary>
        ///     Handles the Click event of the btnLogin control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnLogin_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_dataContext.LogText != "Logout")
                {
                    txtDN.Text = string.Empty;
                    VoiceStateChange(AgentStateType.Channel, "Log On");
                }
                else
                {
                    VoiceStateChange(AgentStateType.Channel, "Logout");
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("Error occurred as : " + commonException);
            }
        }

        /// <summary>
        /// Handles the Click event of the btnMergeCall control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void btnMergeCall_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var softMergeCall = new SoftPhone();
                softMergeCall.MergeCall(_dataContext.IsInitiateTransClicked ? "ForTransfer" : "ForConference");
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar:btnMergeCall_click:" + commonException);
            }
        }

        /// <summary>
        ///     Handles the Click event of the btnMinimize control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnMinimize_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        private void btnOpenCallDataWin_Click(object sender, RoutedEventArgs e)
        {
            var window = IsWindowOpen<Window>("CallDataWin");
            if (window != null)
            {
                if (window.WindowState == WindowState.Minimized)
                {
                    window.WindowState = WindowState.Normal;
                    window.Focus();
                }
                else
                    window.Focus();
            }
            else
            {
                var dic = new Dictionary<string, string>();
                dic.Add("voice.calldata.popup-position", "");
                dic.Add("voice.calldata.popup-size", "");
                if (_configContainer.GetAsBoolean("enable.save.location-locally", false))
                {

                    var path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData).ToString() + @"\Pointel\AgentInteractionDesktop\"
                        + _dataContext.UserName + ".config";
                    (new XMLHandler()).CDPW_ReadXmlData(path, dic);
                }
                else
                {
                    var agentDeatils = (KeyValueCollection)_dataContext.Person.UserProperties["agent.ixn.desktop"];
                    if (agentDeatils.AllKeys.Contains("voice.calldata.popup-position"))
                        dic["voice.calldata.popup-position"] = agentDeatils["voice.calldata.popup-position"].ToString();
                    if (agentDeatils.AllKeys.Contains("voice.calldata.popup-size"))
                        dic["voice.calldata.popup-size"] = agentDeatils["voice.calldata.popup-size"].ToString();
                }

                var calldp = new CallDataPopup(dic["voice.calldata.popup-position"], dic["voice.calldata.popup-size"]);
                calldp.Show();

            }
            if (sender != null && _dataContext.BottomRowHeight != new GridLength(0))
                btn_Hide_Click(null, null);
        }

        /// <summary>
        ///     Handles the Click event of the btnPin control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnPin_Click(object sender, RoutedEventArgs e)
        {
            //Code added for hide the showhide option in oncall
            //if (!_dataContext.isOnCall && !Datacontext.isRinging && !Datacontext.isDialling)
            //{
            var temp = (Image)btnPin.Content;
            if (temp.Source.Equals(imgPinOpen.Source))
            {
                btnPin.Content = imgPinClose;
                //btnPinStatus = "Show";
            }
            if (temp.Source.Equals(imgPinClose.Source))
            {
                btnPin.Content = imgPinOpen;
                //btnPinStatus = "Show";
            }

            if (temp.Source.Equals(imgPin_EnterOpen.Source))
            {
                btnPin.Content = imgPin_EnterClose;
                Topmost = true;
                //btnPinStatus = "Hide";
            }
            else if (temp.Source.Equals(imgPin_EnterClose.Source))
            {
                btnPin.Content = imgPin_EnterOpen;
                Topmost = false;
                //btnPinStatus = "Show";
            }
        }

        /// <summary>
        ///     Handles the MouseEnter event of the btnPin control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseEventArgs" /> instance containing the event data.</param>
        private void btnPin_MouseEnter(object sender, MouseEventArgs e)
        {
            var temp = (Image)btnPin.Content;
            if (temp.Source == imgPinOpen.Source)
                btnPin.Content = imgPin_EnterOpen;
            if (temp.Source == imgPinClose.Source)
                btnPin.Content = imgPin_EnterClose;
        }

        /// <summary>
        ///     Handles the MouseLeave event of the btnPin control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseEventArgs" /> instance containing the event data.</param>
        private void btnPin_MouseLeave(object sender, MouseEventArgs e)
        {
            var temp = (Image)btnPin.Content;
            if (temp.Source == imgPin_EnterOpen.Source)
                btnPin.Content = imgPinOpen;
            if (temp.Source == imgPin_EnterClose.Source)
                btnPin.Content = imgPinClose;
        }

        /// <summary>
        ///     Handles the Click event of the btnReconnect control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnReconnect_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_dataContext.ReConText == "Reconnect")
                {
                    _dataContext.IsInitiateTransClicked = false;
                    _dataContext.IsInitiateConfClicked = false;
                    _dataContext.IsReconnectClicked = true;
                    _dataContext.isOnCall = true;
                    RequeueIntervalTime = 0;
                    if (_dataContext.RequeueTimer.IsEnabled)
                        _dataContext.RequeueTimer.Stop();
                    var reconnectRequest = new SoftPhone();
                    reconnectRequest.CancelTransfer();
                    reconnectRequest = null;
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar_btnReconnect:" + commonException);
            }
        }

        /// <summary>
        ///     Handles the Click event of the btnTransfer control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnTransfer_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (!_dataContext.DiallingNumber.Equals(txtDN.Text))
                {
                    _dataContext.DiallingNumber = txtDN.Text;
                }
                if (_dataContext.TransText == "Comp Trans")
                {
                    var SoftCompTrans = new SoftPhone();
                    SoftCompTrans.CompleteTransfer();
                    SoftCompTrans = null;
                    _dataContext.UserSetTransType = Datacontext.ConsultType.None;
                    _dataContext.IsInitiateTransClicked = false;
                    _dataContext.IsInitiateConfClicked = false;
                    _dataContext.IsTransDialPadOpen = false;
                    _dataContext.IsConfDialPadOpen = false;
                }
                else
                {
                    if (!_dataContext.IsTransDialPadOpen)
                    {
                        bool _is1StepTransferEnabled = false;
                        bool _is2StepTransferEnabled = false;
                        if (_configContainer.AllKeys.Contains("voice.enable.single-step-transfer") &&
                                ((string)_configContainer.GetValue("voice.enable.single-step-transfer")).Equals("true"))
                            _is1StepTransferEnabled = true;

                        if (_configContainer.AllKeys.Contains("voice.enable.two-step-transfer") &&
                                ((string)_configContainer.GetValue("voice.enable.two-step-transfer")).Equals("true"))
                            _is2StepTransferEnabled = true;

                        if (_dataContext.UserSetTransType == Datacontext.ConsultType.None)
                        {
                            if (_is1StepTransferEnabled != _is2StepTransferEnabled)
                            {
                                if (_is1StepTransferEnabled)
                                    _dataContext.UserSetTransType = Datacontext.ConsultType.OneStep;
                                if (_is2StepTransferEnabled)
                                    _dataContext.UserSetTransType = Datacontext.ConsultType.DualStep;
                            }
                            else
                            {
                                //open ConsultCallSelection after selection redirect to this method.
                                _dataContext.UserSetTransType = Datacontext.ConsultType.None;
                                ConsultCallSelection_Open(btnTransfer);
                                _dataContext.IsTransDialPadOpen = false;
                                return;
                            }
                        }
                        if (!_dataContext.DiallingNumber.Equals(string.Empty) &&
                            _dataContext.DiallingNumber != null)
                        {
                            if (_dataContext.UserSetTransType != Datacontext.ConsultType.None)
                            {
                                if (_dataContext.UserSetTransType == Datacontext.ConsultType.OneStep)
                                {
                                    if (txtDN.Text == _dataContext.ThisDN || _dataContext.DiallingNumber == _dataContext.ThisDN)
                                        DisplayOwnDNCallErrorMessage();
                                    else
                                    {
                                        _dataContext.IsInitiateTransClicked = false;
                                        _dataContext.IsInitiateConfClicked = false;
                                        _dataContext.DialedNumber = txtDN.Text;
                                        if (!IsBlockedNumber(_dataContext.DiallingNumber))
                                        {
                                            var soft = new SoftPhone();
                                            //Added by moorthy, This implies unsolicited initiate transfer/conference
                                            var ReasonCode = new Genesyslab.Platform.Commons.Collections.KeyValueCollection();
                                            ReasonCode.Add("OperationMode", "Transfer");
                                            soft.InitiateTransfer(PrefixDialedNumber(_dataContext.DiallingNumber), ReasonCode);
                                            //_dataContext.IsInitiateTransClicked = true;
                                            if (_dataContext.SwitchName.ToLower().Contains("nortel"))
                                            {
                                                if (!_dataContext.IsHoldClicked)
                                                {
                                                    soft.CompleteTransfer();
                                                    _isTransferClick = false;
                                                }
                                            }
                                            else
                                            {
                                                _isTransferClick = true;
                                            }
                                            soft = null;
                                            //Added for recentcalllist
                                            if (!_recentContacts.Contains(txtDN.Text))
                                            {
                                                if (!string.IsNullOrEmpty(txtDN.Text))
                                                    _recentContacts.Add(txtDN.Text);
                                            }
                                            if (!txtDN.Items.Contains(txtDN.Text))
                                            {
                                                if (!string.IsNullOrEmpty(txtDN.Text))
                                                    txtDN.ItemsSource = (_recentContacts as IEnumerable<string>).Reverse();
                                            }
                                            //end
                                        }
                                        _dataContext.UserSetTransType = Datacontext.ConsultType.None;
                                        _dataContext.DiallingNumber = string.Empty;
                                        _dataContext.DialedNumbers = string.Empty;
                                        _dataContext.IsTransDialPadOpen = false;
                                    }
                                }
                                else if (_dataContext.UserSetTransType == Datacontext.ConsultType.DualStep)
                                {
                                    if (txtDN.Text == _dataContext.ThisDN || _dataContext.DiallingNumber == _dataContext.ThisDN)
                                        DisplayOwnDNCallErrorMessage();
                                    else
                                    {
                                        _dataContext.IsInitiateTransClicked = true;
                                        _dataContext.IsInitiateConfClicked = false;
                                        _dataContext.DialedNumber = txtDN.Text;
                                        if (!IsBlockedNumber(_dataContext.DiallingNumber))
                                        {
                                            var soft = new SoftPhone();
                                            //Added by moorthy, This implies unsolicited initiate transfer/conference
                                            var ReasonCode = new Genesyslab.Platform.Commons.Collections.KeyValueCollection();
                                            ReasonCode.Add("OperationMode", "Transfer");
                                            soft.InitiateTransfer(PrefixDialedNumber(_dataContext.DiallingNumber), ReasonCode);
                                            soft = null;
                                            //Added for recentcalllist
                                            if (!_recentContacts.Contains(txtDN.Text))
                                            {
                                                if (!string.IsNullOrEmpty(txtDN.Text))
                                                    _recentContacts.Add(txtDN.Text);
                                            }
                                            if (!txtDN.Items.Contains(txtDN.Text))
                                            {
                                                if (!string.IsNullOrEmpty(txtDN.Text))
                                                    txtDN.ItemsSource = (_recentContacts as IEnumerable<string>).Reverse();
                                            }
                                        }
                                        //end
                                        _dataContext.UserSetTransType = Datacontext.ConsultType.None;
                                        _dataContext.DiallingNumber = string.Empty;
                                        _dataContext.DialedNumbers = string.Empty;
                                        //_dataContext.IsConfDialPadOpen = false;
                                        _dataContext.IsTransDialPadOpen = false;
                                    }
                                }
                            }
                        }
                        else
                        {
                            //open Dial pad after dial click redirect to this method.
                            if (_dataContext.UserSetTransType != Datacontext.ConsultType.None)
                            {
                                _dataContext.IsTransDialPadOpen = true; //
                                OpenDialPad(Datacontext.DialPadType.Transfer, btnTransfer);
                                //_dataContext.IsTransDialPadOpen = false;
                            }
                            else
                            {
                                //open ConsultCallSelection after selection redirect to this method.
                                _dataContext.UserSetTransType = Datacontext.ConsultType.None;
                                ConsultCallSelection_Open(btnTransfer);
                                _dataContext.IsTransDialPadOpen = false;
                            }
                        }
                    }
                    else
                    {
                        //code Added - To avoid displaying Menu as well dialpad on continuous transfer button click
                        //08.1.2014
                        if (_dataContext.IsTransDialPadOpen)
                        {
                            if (_dataContext.UserSetTransType != Datacontext.ConsultType.None)
                            {
                                _dataContext.IsTransDialPadOpen = true;
                                OpenDialPad(Datacontext.DialPadType.Transfer, btnTransfer);
                            }
                            else
                            {
                                _dataContext.UserSetTransType = Datacontext.ConsultType.None;
                                ConsultCallSelection_Open(btnTransfer);
                                _dataContext.IsTransDialPadOpen = false;
                            }
                        }
                        else
                        {
                            _dataContext.UserSetTransType = Datacontext.ConsultType.None;
                            ConsultCallSelection_Open(btnTransfer);
                            _dataContext.IsTransDialPadOpen = false;
                        }
                        //end
                    }
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("btnTransfer_Click:" + commonException);
            }
        }

        /// <summary>
        ///     Handles the Click event of the btnUpdate control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void btnUpdate_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var selectedCallData = DGAttachData.SelectedCells[0].Item as CallData;
                string key = selectedCallData.Key.ToString().Trim();
                string value = selectedCallData.Value.ToString().Trim();
                var addCallData = new SoftPhone();
                if (_dataContext.userAttachData.ContainsKey(key))
                {
                    string originalValue = _dataContext.userAttachData[key];
                    if (value != originalValue || string.IsNullOrWhiteSpace(value))
                    {
                        _dataContext.userAttachData.Remove(key);
                        _dataContext.userAttachData.Add(key, value);
                        var casedata = new Dictionary<string, string>();
                        casedata.Add(key, value);
                        addCallData.UpdateUserData(casedata);
                    }
                }
                BindGrid();
            }
            catch (Exception commonException)
            {
                _logger.Error("Error occurred as " + commonException.Message);
            }
        }

        /// <summary>
        /// Handles the Click event of the btn_Hide control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void btn_Hide_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _isopendbyUser = false;
                SizeChanged -= SoftphoneBar_SizeChanged;
                baseheight = new GridLength(grdBottom.ActualHeight);
                _dataContext.BottomRowHeight = new GridLength(0);
                MinHeight = grdTitle.ActualHeight + grdTool.ActualHeight + 20;
                Height = MinHeight;
                MaxHeight = Height;
                SizeChanged += new SizeChangedEventHandler(SoftphoneBar_SizeChanged);
                if (DataTabControl.SelectedItem == popUpUrl)
                    DataTabControl.SelectedIndex = 0;
                DataTabControl.Visibility = System.Windows.Visibility.Collapsed;
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        /// <summary>
        /// Handles the Click event of the btn_LeftSettingButton control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseButtonEventArgs"/> instance containing the event data.</param>
        private void btn_LeftSettingButton_Click(object sender, MouseButtonEventArgs e)
        {
            popupState.IsOpen = false;
            var logoutItems = _dataContext.htMediaCurrentState.Values.OfType<string>().Where(s => s.Contains("Logout"));
            var _outOfServiceItems = _dataContext.htMediaCurrentState.Values.OfType<string>().Where(s => s.Contains("Out Of Service"));
            if (_outOfServiceItems != null && _dataContext.htMediaCurrentState.Count == _outOfServiceItems.Count())
            {
                _dataContext.EnableMenuitems = false;
                _dataContext.EnableLogonMenuitem = false;
                _dataContext.EnableGlobalDNDMenuitem = false;
            }
            else if (logoutItems != null && _dataContext.htMediaCurrentState.Count == logoutItems.Count())
            {
                _dataContext.EnableMenuitems = false;
                _dataContext.EnableLogonMenuitem = true;
            }
            else if (logoutItems != null && logoutItems.Count() == 0)
            {
                _dataContext.EnableMenuitems = true;
                _dataContext.EnableLogonMenuitem = false;
            }
            else
            {
                _dataContext.EnableMenuitems = true;
                _dataContext.EnableLogonMenuitem = true;
            }
            if (_dataContext.htMediaCurrentState.Count == 1 && _dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
            {
                if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                    _dataContext.EnableGlobalDNDMenuitem = false;
                else
                    _dataContext.EnableGlobalDNDMenuitem = true;
            }
            else
                _dataContext.EnableGlobalDNDMenuitem = true;

            if (_dataContext.GlobalStatesContextMenu.Items.Count > 0)
            {
                _dataContext.GlobalStatesContextMenu.Style = (Style)FindResource("Contextmenu");
                _dataContext.GlobalStatesContextMenu.Style = (Style)FindResource("Contextmenu");
                _dataContext.GlobalStatesContextMenu.PlacementTarget = imgSoftIcon;
                _dataContext.GlobalStatesContextMenu.Placement = PlacementMode.Mouse;
                _dataContext.GlobalStatesContextMenu.IsOpen = true;
                _dataContext.GlobalStatesContextMenu.Focus();
            }
        }

        /// <summary>
        ///     Handles the MouseRightButtonUp event of the btn_LeftSettingButton control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.</param>
        private void btn_LeftSettingButton_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            e.Handled = true;
        }

        /// <summary>
        /// Handles the Click event of the btn_Menu control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void btn_Menu_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _dataContext.OptionsMenu.Items.Clear();

                #region Stat gadget

                //if (_configContainer.AllKeys.Contains("statistics.enable.plugin") &&
                //     ((string)_configContainer.GetValue("statistics.enable.plugin")).ToLower().Equals("true"))
                //{
                var menuItemn5 = new MenuItem();
                menuItemn5.Style = (Style)FindResource("Menuitem");

                BindingOperations.SetBinding(menuItemn5, MenuItem.HeaderProperty, new Binding() { Path = new PropertyPath("NotifyGadgetDisplayName"), Source = Datacontext.GetInstance() });

                BindingOperations.SetBinding(menuItemn5, MenuItem.VisibilityProperty, new Binding() { Path = new PropertyPath("GadgetVisibility"), Source = Datacontext.GetInstance() });
                if (_dataContext.GadgetState == "Opened")
                {
                    _dataContext.NotifyGadgetDisplayName = "Close Stat Gadget";
                }
                else
                {
                    _dataContext.NotifyGadgetDisplayName = "Show Stat Gadget";
                }
                if (!Process.GetProcessesByName("StatTickerFive").Any(x => x.Id.ToString().Trim().Contains(_dataContext.StatProcessId.ToString())))
                    _dataContext.NotifyGadgetDisplayName = "Show Stat Gadget";
                menuItemn5.Click += menuItem_Click;
                menuItemn5.Name = "StatGadget";
                _dataContext.OptionsMenu.Items.Add(menuItemn5);
                _dataContext.OptionsMenu.Items.Add(new Separator() { Margin = new Thickness(-28, 0, 2, 0) });
                //}

                #endregion Stat gadget

                #region Workspace

                foreach (TabItem item in DataTabControl.Items)
                {
                    var Header = item.Header.ToString();
                    if (item.Visibility == System.Windows.Visibility.Visible && !string.IsNullOrEmpty(Header) && Header != "_Interaction Data")
                    {
                        var menuItem = new MenuItem();
                        menuItem.Click += menuItemPro_Click;
                        menuItem.Header = Header.Replace("_", "");
                        _dataContext.OptionsMenu.Items.Add(menuItem);
                    }
                }

                #endregion Workspace

                #region My Message

                if (_configContainer.AllKeys.Contains("voice.enable.broadcast") &&
                        ((string)_configContainer.GetValue("voice.enable.broadcast")).ToLower().Equals("true"))
                {
                    _dataContext.OptionsMenu.Items.Add(new Separator() { Margin = new Thickness(-28, 0, 2, 0) });
                    foreach (TabItem item in MessageTabControl.Items)
                    {
                        var Header = item.Header.ToString();
                        if (item.Visibility == System.Windows.Visibility.Visible && !string.IsNullOrEmpty(Header))
                        {
                            var menuItem = new MenuItem();
                            menuItem.Click += menuItemMSG_Click;
                            menuItem.Header = Header.Replace("_", "");
                            _dataContext.OptionsMenu.Items.Add(menuItem);
                        }
                    }
                }

                #endregion My Message

                #region Contact Directory

                if (_dataContext.IsContactsPluginAdded && ConfigContainer.Instance().AllKeys.Contains("voice.enable.contact-directory")
            && ConfigContainer.Instance().GetAsBoolean("voice.enable.contact-directory"))
                {
                    _dataContext.OptionsMenu.Items.Add(new Separator() { Margin = new Thickness(-28, 0, 2, 0) });
                    foreach (TabItem item in ContactTabControl.Items)
                    {
                        var Header = item.Header.ToString();
                        if (item.Visibility == System.Windows.Visibility.Visible && !string.IsNullOrEmpty(Header))
                        {
                            var menuItem = new MenuItem();
                            menuItem.Click += menuItemContact_Click;
                            menuItem.Header = Header.Replace("_", "");
                            _dataContext.OptionsMenu.Items.Add(menuItem);
                        }
                    }
                }

                #endregion Contact Directory

                #region Agent Options

                bool isAgentOptions = true;
                if (_configContainer.AllKeys.Contains("login.enable.user-settings") && !_configContainer.GetAsBoolean("login.enable.user-settings"))
                    isAgentOptions = false;
                if (isAgentOptions)
                {
                    _dataContext.OptionsMenu.Items.Add(new Separator() { Margin = new Thickness(-28, 0, 2, 0) });
                    _dataContext.EnableRefinePlace = !Datacontext.isRinging && !_dataContext.IsOnChatIXN && !_dataContext.IsOnEmailIXN && !_dataContext.isOnCall;
                    var refinePlace = new MenuItem();
                    refinePlace.Header = "Refine Place/Channel selection";
                    BindingOperations.SetBinding(refinePlace, IsEnabledProperty,
                                            new Binding { Path = new PropertyPath("EnableRefinePlace"), Source = Datacontext.GetInstance() });
                    refinePlace.Style = (Style)FindResource("Menuitem1");
                    refinePlace.Click += refinePlace_Click;

                    var changePassword = new MenuItem();
                    changePassword.Header = "Change Password";
                    changePassword.Style = (Style)FindResource("Menuitem1");
                    changePassword.Click += changePassword_Click;

                    var usersettings = new MenuItem();
                    usersettings.Header = "User Settings";
                    usersettings.Style = (Style)FindResource("Menuitem1");
                    usersettings.Items.Add(refinePlace);
                    usersettings.Items.Add(changePassword);
                    _dataContext.OptionsMenu.Items.Add(usersettings);
                }

                #endregion Agent Options

                if (_dataContext.OptionsMenu.Items.Count > 0)
                {
                    _dataContext.OptionsMenu.FlowDirection = System.Windows.FlowDirection.LeftToRight;
                    _dataContext.OptionsMenu.StaysOpen = true;
                    _dataContext.OptionsMenu.PlacementTarget = btn_Menu;
                    _dataContext.OptionsMenu.Placement = PlacementMode.Bottom;
                    _dataContext.OptionsMenu.IsOpen = true;
                    _dataContext.OptionsMenu.Focus();
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        private void btn_Salesforce_Click(object sender, RoutedEventArgs e)
        {
            if (!_alivestatus)
                ((ISFDCConnector)_plugins.PluginCollections[Plugins.Salesforce]).PopupBrowser();
        }

        /// <summary>
        ///     Calls the back_btnevent.
        /// </summary>
        private void CallBack_btnevent(string callBy)
        {
            if (callBy == "transfer")
                btnTransfer_Click(null, null);
            else
                btnConference_Click(null, null);
        }

        /// <summary>
        /// Handles the Click event of the CallDataAddMenuitem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void CallDataAddMenuitem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                MenuItem menuitem = sender as MenuItem;

                var updateCallData = new SoftPhone();
                if (!_dataContext.userAttachData.ContainsKey(menuitem.Header.ToString()))
                {
                    _dataContext.userAttachData.Add(menuitem.Header.ToString(), string.Empty);
                    if (_dataContext.NotifyCallData.Count(p => p.Key == menuitem.Header.ToString()) == 0)
                    {
                        Datacontext.GetInstance()
                            .NotifyCallData.Add(new CallData(menuitem.Header.ToString(), string.Empty,
                                _dataContext.KeyFontFamily, _dataContext.KeyFontWeight));
                    }

                    //updateCallData.UpdateUserData(_dataContext.userAttachData);
                    BindGrid();
                    try
                    {
                        //CallDataWin
                        var window = IsWindowOpen<Window>("CallDataWin");
                        if (window != null && window is CallDataPopup)
                        {
                            var cdPopwindow = (CallDataPopup)window;
                            if (cdPopwindow != null)
                                cdPopwindow.CallDataAddMenuitem1_Click(sender, e);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.Warn("Error while sending menu click event to call data pop up window as, " + ex.ToString());

                    }
                    _dataContext.CallDataAdd.Items.Remove(menuitem);
                    if (_dataContext.CallDataAdd.Items.Count == 0)
                        _dataContext.IsVoiceEnabledAddCallData = Visibility.Collapsed;
                    else
                        _dataContext.IsVoiceEnabledAddCallData = Visibility.Visible;
                    DGAttachData.UpdateLayout();
                    if (DGAttachData.Items.Count > 2)
                        DGAttachData.ScrollIntoView(DGAttachData.Items[DGAttachData.Items.Count - 2]);
                    int rowIndex =
                                Datacontext.GetInstance()
                                    .NotifyCallData.IndexOf(
                                        Datacontext.GetInstance()
                                            .NotifyCallData.Where(p => p.Key == menuitem.Header.ToString())
                                            .FirstOrDefault());
                    var dataGridCellInfo = new Microsoft.Windows.Controls.DataGridCellInfo(DGAttachData.Items[rowIndex], DGAttachData.Columns[1]);
                    var cell = TryToFindGridCell(DGAttachData, dataGridCellInfo);
                    if (cell == null) return;
                    cell.Focus();
                    _isCaseDataManualBeginEdit = true;
                    DGAttachData.BeginEdit();
                }
                if (_dataContext.NotifyCallData.Count <= 0)
                {
                    DGAttachData.Visibility = Visibility.Collapsed;
                    txtAttachDataInfo.Visibility = Visibility.Visible;
                }
                else
                {
                    DGAttachData.Visibility = Visibility.Visible;
                    txtAttachDataInfo.Visibility = Visibility.Collapsed;
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("CallDataAddMenuitem_Click: " + commonException.Message.ToString());
            }
        }

        private void CallData_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                var item = sender as TabControl;
                var selected = item.SelectedItem as TabItem;
                if (selected.Header.ToString() == "_Dispositions" && _dispositionUC != null)
                {
                    string DispositionCodeKey = _configContainer.GetValue("interaction.disposition.key-name");
                    Dictionary<string, string> dispositionCode = new Dictionary<string, string>();
                    if (!string.IsNullOrEmpty(_dataContext.userAttachData[DispositionCodeKey].ToString()))
                        dispositionCode.Add(DispositionCodeKey, _dataContext.userAttachData[DispositionCodeKey].ToString());
                    else
                        dispositionCode.Add(DispositionCodeKey, "None");
                    if (_dataContext.userAttachData.ContainsKey("ConnectionId"))
                        _dispositionUC.ReLoadDispositionCodes(dispositionCode, _dataContext.userAttachData["ConnectionId"].ToString());
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred at CallData_SelectionChanged" + ex.Message);
            }
        }

        private void changePassword_Click(object sender, RoutedEventArgs e)
        {
            var changepasswordWindow = new ChangePassword();
            changepasswordWindow.ShowDialog();
            if (changepasswordWindow.DialogResult == true)
            {
                _errorMessage.Clear();
                //_errorMessage.Add("IWS_Message", "");
                _errorMessage.Add("IWS_Subject", "Password has been changed successfully");
                _errorMessage.Add("IWS_Sender", "System");
                _errorMessage.Add("IWS_Priority", "2");
                _errorMessage.Add("IWS_MessageType", "System");
                _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                GettingUserData(VoiceEvents.None, _errorMessage);
            }
        }

        /// <summary>
        /// Changes the state of the stat gadget.
        /// </summary>
        private void ChangeStatGadgetState()
        {
            try
            {
                XMLHandler xmlHandler = new XMLHandler();
                xmlHandler.ModifyXmlData(_dataContext.SettingsXMLFile, xmlHandler.ConfigKeys[XMLHandler.Keys.GadgetState].ToString(), _dataContext.GadgetState.ToString());
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar:ChangeStatGadgetState:" + commonException.Message);
            }
        }

        /// <summary>
        /// Handles the Click event of the ChatStateMenu control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void ChatStateMenu_Click(object sender, RoutedEventArgs e)
        {
            MenuItem menuitem = sender as MenuItem;
            var tempState = menuitem.Header.ToString().Replace("Not Ready - ", "");
            string keyCode = null;
            if (_configContainer.AllKeys.Contains("ChatNotReadyReasonCodes"))
            {
                if (((Dictionary<string, string>)_configContainer.GetValue("ChatNotReadyReasonCodes")).ContainsKey(tempState))
                    keyCode = ((Dictionary<string, string>)_configContainer.GetValue("ChatNotReadyReasonCodes"))[tempState];
            }
            InteractionsMediaStateChange(Datacontext.Channels.Chat, (menuitem.Header.ToString() == "Log Off" ? "Logout" : menuitem.Header.ToString()), keyCode);
            //ChatStateChange(AgentStateType.Channel, (menuitem.Header.ToString() == "Log Off" ? "Logout" : menuitem.Header.ToString()));
        }

        private void CheckAndLoadContactPlugin()
        {
            if (Datacontext.AvailableServerDic.ContainsValue(Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGContactServer.ToString()))
                LoadContactPlugin();
            else
                _logger.Info("UCS not configured.");

            try
            {
                if (!_dataContext.IsContactsPluginAdded)
                {
                    _logger.Warn("Contacts Plugin is not loaded");
                    _dataContext.ContactTabVisibility = Visibility.Collapsed;
                    if (DataTabControl.Items.Contains(TabHistory))
                        DataTabControl.Items.Remove(TabHistory);
                }
                // Added by sakthi to remove if suppose the Contact plugin is not loaded or my history disabled state.
                if (!(ConfigContainer.Instance().AllKeys.Contains("voice.enable.my-history") && ConfigContainer.Instance().GetAsBoolean("voice.enable.my-history")))
                {
                    _logger.Warn("My history disabled by administrator.");
                    if (DataTabControl.Items.Contains(TabHistory))
                        DataTabControl.Items.Remove(TabHistory);
                }
                if (!(ConfigContainer.Instance().AllKeys.Contains("voice.enable.contact-directory")
                    && ConfigContainer.Instance().GetAsBoolean("voice.enable.contact-directory")))
                {
                    _logger.Warn("My Contact Directory disabled by administrator.");
                }
            }
            catch (Exception _generalException)
            {
                _logger.Error("Error occurred as " + _generalException.Message);
            }
        }

        /// <summary>
        /// Closes the outbound screen pop.
        /// </summary>
        private void CloseOutboundScreenPop()
        {
            try
            {
                if (objOutboundScreenPop != null)
                {
                    objOutboundScreenPop.Close();
                    objOutboundScreenPop = null;
                }
            }
            catch (Exception ex)
            {
                _logger.Error("CloseOutboundScreenPop : General Exception caught as " + ex.ToString());
            }
        }

        private void CloseStatGadget()
        {
            //if (_dataContext.StatProcessId != 0)
            //{
            //    StatisticHelperClient.SendRequest(StatRequest.Close);
            //    Process.GetProcessesByName("StatTickerFive").Where(x => x.Id == _dataContext.StatProcessId).FirstOrDefault().Kill();
            //    _dataContext.StatProcessId = 0;
            //}
            StatisticHelperClient.CloseStatProtocol();
            if (_dataContext.StatProcessId != 0)
            {
                StatisticHelperClient.SendRequest(StatRequest.Close);
                Thread.Sleep(2000);
                var stat = Process.GetProcessesByName("StatTickerFive").Where(x => x.Id == _dataContext.StatProcessId).FirstOrDefault();
                if (stat != null)
                    stat.Kill();
                _dataContext.StatProcessId = 0;
            }
        }

        /// <summary>
        ///     Handles the Closed event of the cmshow control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <exception cref="System.NotImplementedException"></exception>
        private void cmshow_Closed(object sender, RoutedEventArgs e)
        {
            if (dialpad != null)
            {
                try
                {
                    dialpad.eventFireBackNum -= WriteToTargetDN;
                }
                catch (Exception ex)
                {
                    _logger.Error("Error occurred as " + ex.Message);
                }
            }

            WriteToTargetDN("");
        }

        /// <summary>
        ///     Handles the KeyDown event of the cmshow control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="KeyEventArgs" /> instance containing the event data.</param>
        private void cmshow_KeyDown(object sender, KeyEventArgs e)
        {
            if ((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift)
            {
                if (e.Key == Key.D3 || e.Key == Key.D8)
                {
                    if (e.Key == Key.D3)
                    {
                        _dataContext.DialedNumbers = _dataContext.DialedNumbers +
                                                                  Keyboardvalue(e.Key);
                        _dataContext.DiallingNumber = _dataContext.DiallingNumber +
                                                                   Keyboardvalue(e.Key);
                    }
                    if (e.Key == Key.D8)
                    {
                        _dataContext.DialedNumbers = _dataContext.DialedNumbers +
                                                                  Keyboardvalue(e.Key);
                        _dataContext.DiallingNumber = _dataContext.DiallingNumber +
                                                                   Keyboardvalue(e.Key);
                    }
                }
                else
                {
                    e.Handled = true;
                }
            }
            else
            {
                switch (e.Key)
                {
                    case Key.D0:
                    case Key.D1:
                    case Key.D2:
                    case Key.D3:
                    case Key.D4:
                    case Key.D5:
                    case Key.D6:
                    case Key.D7:
                    case Key.D8:
                    case Key.D9:
                    case Key.NumLock:
                    case Key.NumPad0:
                    case Key.NumPad1:
                    case Key.NumPad2:
                    case Key.NumPad3:
                    case Key.NumPad4:
                    case Key.NumPad5:
                    case Key.NumPad6:
                    case Key.NumPad7:
                    case Key.NumPad8:
                    case Key.NumPad9:
                    case Key.Multiply:
                    case Key.Left:
                    case Key.Right:
                    case Key.End:
                    case Key.Home:
                    case Key.Prior:
                    case Key.Next:
                        {
                            _dataContext.DialedNumbers = _dataContext.DialedNumbers +
                                                                      Keyboardvalue(e.Key);
                            _dataContext.DiallingNumber = _dataContext.DiallingNumber +
                                                                       Keyboardvalue(e.Key);
                            break;
                        }
                    case Key.Delete:
                    case Key.Back:
                        break;

                    case Key.Enter:
                        if (!Datacontext.isRinging && !_dataContext.isOnCall && _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().ToLower() != "logout")
                        {
                            if (_dataContext.ForwardDN == string.Empty)
                                btnDial_Click(null, null);
                        }
                        break;

                    default:
                        e.Handled = true;
                        break;
                }
                while (txtDN.Text.Length >= _dataContext.MaxDialDigits && e.Key != Key.Back &&
                       e.Key != Key.Delete
                       && e.Key != Key.Left && e.Key != Key.Right && e.Key != Key.End && e.Key != Key.Home &&
                       e.Key != Key.Prior && e.Key != Key.Next)
                {
                    var txt = txtDN.Template.FindName("PART_EditableTextBox", txtDN) as TextBox;
                    if (txt != null && (txtDN.Text.Length - txt.SelectedText.Length) >= _dataContext.MaxDialDigits)
                        e.Handled = true;
                    break;
                }
            }
        }

        /// <summary>
        /// Consults the call selection menu.
        /// </summary>
        /// <returns></returns>
        private List<MenuItem> ConsultCallSelectionMenu()
        {
            var tempMenu = new List<MenuItem>();
            var item = new MenuItem();
            item.Margin = new Thickness(2);
            item.Icon = new Image
            {
                Height = 15,
                Width = 15,
                Source = GetBitmapImage(
                    new Uri("/Agent.Interaction.Desktop;component/Images/Voice/Voice.SingleStep.png", UriKind.Relative))
            };
            item.Header = "Single Step";
            item.Click += ConsultCallSelection_Click;
            tempMenu.Add(item);
            var item1 = new MenuItem();
            item1.Margin = new Thickness(2);
            item1.Icon = new Image
            {
                Height = 15,
                Width = 25,
                Source = GetBitmapImage(
                    new Uri("/Agent.Interaction.Desktop;component/Images/Voice/Voice.TwoStep.png", UriKind.Relative))
            };
            item1.Header = "Two Step";
            item1.Click += ConsultCallSelection_Click;
            tempMenu.Add(item1);
            return tempMenu;
        }

        /// <summary>
        /// Handles the Click event of the ConsultCallSelection control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void ConsultCallSelection_Click(object sender, RoutedEventArgs e)
        {
            var temp = sender as MenuItem;
            if (temp.Header.ToString() == "Two Step")
            {
                _dataContext.Dualclick = true;
                _dataContext.Singleclick = false;
            }
            if (temp.Header.ToString() == "Single Step")
            {
                _dataContext.Dualclick = false;
                _dataContext.Singleclick = true;
            }
            var tempbtn = _dataContext.ConsultCallSelection.PlacementTarget as Button;
            if (tempbtn.Name == "btnTransfer")
            {
                _dataContext.UserSetTransType = _dataContext.Singleclick
                    ? Datacontext.ConsultType.OneStep
                    : Datacontext.ConsultType.DualStep;
                // _dataContext.UserSetConfType = Datacontext.ConsultType.None;
                btnTransfer_Click(null, null);
            }
            else if (tempbtn.Name == "btnConference")
            {
                _dataContext.UserSetConfType = _dataContext.Singleclick
                    ? Datacontext.ConsultType.OneStep
                    : Datacontext.ConsultType.DualStep;
                //_dataContext.UserSetTransType = Datacontext.ConsultType.None;
                btnConference_Click(null, null);
            }
            _dataContext.Dualclick = false;
            _dataContext.Singleclick = false;
        }

        /// <summary>
        /// Consults the call selection_ open.
        /// </summary>
        /// <param name="PlacementTargetButton">The placement target button.</param>
        private void ConsultCallSelection_Open(Button PlacementTargetButton)
        {
            if (_dataContext.ConsultCallSelection.Items.Count > 0)
            {
                _dataContext.ConsultCallSelection.PlacementTarget = PlacementTargetButton;
                _dataContext.ConsultCallSelection.Placement = PlacementMode.Bottom;
                _dataContext.ConsultCallSelection.Focus();
                _dataContext.ConsultCallSelection.IsOpen = true;
            }
        }

        private WebBrowser CreateWebBrowser()
        {
            // HelperWindow wbo = new HelperWindow(gridContainer, this, tabControl);
            WebBrowser webBrowser = new WebBrowser();
            webBrowser.Navigating += new System.Windows.Navigation.NavigatingCancelEventHandler(firstBrowser_Navigating);
            webBrowser.LoadCompleted += new System.Windows.Navigation.LoadCompletedEventHandler(firstBrowser_LoadCompleted);
            webBrowser.HorizontalAlignment = HorizontalAlignment.Stretch;
            webBrowser.VerticalAlignment = VerticalAlignment.Stretch;
            return webBrowser;
        }

        /// <summary>
        ///     Handles the SelectionChanged event of the DataTabControl control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="SelectionChangedEventArgs" /> instance containing the event data.</param>
        private void DataTabControl_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                FocusManager.SetFocusedElement(this, DataTabControl.SelectedItem as TabItem);
                if (DataTabControl.SelectedItem == popUpUrl)
                {
                    if (gridPopupURL.Children.Contains(tbSubTab))
                        tbSubTab.Visibility = System.Windows.Visibility.Visible;
                }
                else if (gridPopupURL.Children.Contains(tbSubTab))
                    tbSubTab.Visibility = System.Windows.Visibility.Collapsed;

                if (e != null && e.AddedItems != null && e.AddedItems.Count > 0)
                {
                    var selectedTab = e.AddedItems[0] as TabItem;

                    if (selectedTab != null)
                    {
                        var header = selectedTab.Header.ToString().Replace("_", "");
                        DGAttachData.CancelEdit();
                        BindGrid();
                        //if (_dataContext.BottomRowHeight == baseheight)
                        //    _isopendbyUser = true;
                        //else
                        //    _isopendbyUser = false;
                        if (header.Equals("My Channels"))
                        {
                            InitialloadData();
                        }
                        else if (header.Equals("Interaction Data"))
                        {
                            DGAttachData.CancelEdit();
                            BindGrid();
                        }
                        //Implemented by sakthi to load myhistory in firstclick load.
                        else if (header.Equals("My History") && !IsMyHistoryLoaded)
                        {
                            //if (Datacontext.AvailableServerDic.ContainsValue(Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGContactServer.ToString())
                            //    && _dataContext.IsContactsPluginAdded)
                            //{
                            LoadMyHistory();
                            //}
                            IsMyHistoryLoaded = true;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        /// <summary>
        ///     Handles the BeginningEdit event of the DGAttachData control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">
        ///     The <see cref="Microsoft.Windows.Controls.DataGridBeginningEditEventArgs" /> instance containing the
        ///     event data.
        /// </param>
        private void DGAttachData_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {
            var selectedCallData = e.Row.Item as CallData;
            if (selectedCallData != null)
            {
                if (selectedCallData.Value.StartsWith("http") || selectedCallData.Value.StartsWith("www"))
                {
                    e.Cancel = true;
                    if (_configContainer.AllKeys.Contains("voice.enable.attach-data-popup-url") && ((string)_configContainer.GetValue("voice.enable.attach-data-popup-url")).ToLower().Equals("true"))
                    {
                        string urlString = selectedCallData.Value.Contains("http") ? selectedCallData.Value : "http://" + selectedCallData.Value;
                        Uri uriResult;
                        if (Uri.TryCreate(urlString, UriKind.Absolute, out uriResult)
                            && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
                            Process.Start(uriResult.AbsoluteUri);
                    }
                }

                //Code added - hide the editable option in above key in call data datagrid
                //Smoorthy - 07-11-2013
                else if (_configContainer.AllKeys.Contains("VoiceAttachDataKey") &&
                    _configContainer.GetValue("VoiceAttachDataKey") != null)
                {
                    //ANI CallID CallType ConnID OtherDN ThisDN
                    //if (!string.IsNullOrEmpty(selectedCallData.Value))
                    //{
                    if (_isCaseDataManualBeginEdit)
                    {
                        e.Cancel = false;
                        _isCaseDataManualBeginEdit = false;
                    }
                    else if (((List<string>)_configContainer.GetValue("VoiceAttachDataKey")).Any(
                                x =>
                                    Regex.Replace(x, @"\s+", "").ToString().Trim().ToLower() == selectedCallData.Key.ToString().Trim().ToLower()) &&
                                    (_configContainer.AllKeys.Contains("voice.enable.modify-case-data") && ((string)_configContainer.GetValue("voice.enable.modify-case-data")).ToLower().Equals("true")))
                    {
                        e.Cancel = false;
                    }
                    else
                    {
                        e.Cancel = true;
                    }
                    //}
                }
                else
                {
                    e.Cancel = true;
                }
                //End
            }
        }

        private void DGAttachData_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.C && Keyboard.Modifiers == ModifierKeys.Control)
            {
                try
                {
                    if (DGAttachData.SelectedCells != null && DGAttachData.SelectedCells[0].Item != null)
                    {
                        var data = (DGAttachData.SelectedCells[0].Item as CallData).Value;
                        data = Uri.UnescapeDataString(data);
                        Clipboard.Clear();
                        Clipboard.SetText(data);
                        return;
                    }
                    _logger.Warn("warning clipboard data not updated.");

                }
                catch (Exception ex)
                {
                    _logger.Warn("Warning occurred while copying data as " + ex.Message);
                }

            }
        }

        //void SetDataToClipboard(string data)
        //{
        //    Thread.Sleep(300);
        //    this.Dispatcher.Invoke((Action)(delegate
        //    {
        //        Clipboard.Clear();
        //        Clipboard.SetData(DataFormats.Text, data);
        //    }));
        //}
        //private void DGAttachData_CopyingRowClipboardContent(object sender, Microsoft.Windows.Controls.DataGridRowClipboardEventArgs e)
        //{
        //    Thread thread = new Thread(() => SetDataToClipboard(e.ClipboardRowContent[0].Content.ToString()));
        //    thread.Start();
        //    //var content = e.ClipboardRowContent[0].Content.ToString();
        //    //content = content.Substring(content.Length - 1, 1);
        //    //e.ClipboardRowContent.Clear();
        //    //e.ClipboardRowContent.Add(new Microsoft.Windows.Controls.DataGridClipboardCellContent(e.Item, (sender as Microsoft.Windows.Controls.DataGrid).Columns[1], content));
        //}
        /// <summary>
        /// Handles the PreparingCellForEdit event of the DGAttachData control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="Microsoft.Windows.Controls.DataGridPreparingCellForEditEventArgs"/> instance containing the event data.</param>
        private void DGAttachData_PreparingCellForEdit(object sender, Microsoft.Windows.Controls.DataGridPreparingCellForEditEventArgs e)
        {
            var contentPresenter = e.EditingElement as ContentPresenter;
            var editingTemplate = contentPresenter.ContentTemplate;
            var textBox = (editingTemplate as DataTemplate).FindName("txtValue", (contentPresenter as ContentPresenter));
            if (textBox == null) return;
            if (!(textBox is TextBox)) return;
            (textBox as TextBox).Focus();
        }

        /// <summary>
        /// Handles the RowEditEnding event of the DGAttachData control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="Microsoft.Windows.Controls.DataGridRowEditEndingEventArgs"/> instance containing the event data.</param>
        private void DGAttachData_RowEditEnding(object sender, Microsoft.Windows.Controls.DataGridRowEditEndingEventArgs e)
        {
            try
            {
                DataGridRow dgRow = e.Row;
                if (dgRow != null)
                {
                    var selectedCallData = dgRow.Item as CallData;
                    string key = selectedCallData.Key.ToString().Trim();
                    string value = selectedCallData.Value.ToString().Trim();
                    var addCallData = new SoftPhone();
                    if (_dataContext.userAttachData.ContainsKey(key))
                    {
                        string originalValue = _dataContext.userAttachData[key];
                        if (value != originalValue)
                        {
                            _dataContext.userAttachData.Remove(key);
                            _dataContext.userAttachData.Add(key, value);
                            var casedata = new Dictionary<string, string>();
                            casedata.Add(key, value);
                            addCallData.UpdateUserData(casedata);
                        }
                    }
                    BindGrid();
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        private void DGCasedataValue_Copy_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (DGAttachData.SelectedCells != null && DGAttachData.SelectedCells[0].Item != null)
                {
                    var data = (DGAttachData.SelectedCells[0].Item as CallData).Value;
                    data = Uri.UnescapeDataString(data);
                    Clipboard.Clear();
                    Clipboard.SetText(data);
                    return;
                }
                _logger.Warn("warning clipboard data not updated.");

            }
            catch (Exception ex)
            {
                _logger.Warn("Warning occurred while copying data as " + ex.Message);
            }
        }

        //Code Added - To implement the popup url feature in the datagrid
        //01-10-2013 ShenbagaMoorthy
        /// <summary>
        ///     Handles the SelectionChanged event of the DGAttachData control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="SelectionChangedEventArgs" /> instance containing the event data.</param>
        //private void DGAttachData_SelectionChanged(object sender, SelectionChangedEventArgs e)
        //{
        //    var selectedCallData = DGAttachData.SelectedItem as CallData;
        //    if (selectedCallData != null)
        //    {
        //        string urlString = selectedCallData.Value;
        //        if (urlString.StartsWith("www"))
        //            urlString = "http://" + urlString;
        //        Uri uriResult;
        //        bool result = Uri.TryCreate(selectedCallData.Value, UriKind.Absolute, out uriResult)
        //            && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps ||
        //            uriResult.Scheme == Uri.UriSchemeFtp || uriResult.Scheme == Uri.UriSchemeFile);
        //        if (result)
        //        {
        //            e.Handled = true;
        //            if (_configContainer.AllKeys.Contains("voice.enable.attach-data-popup-url") && ((string)_configContainer.GetValue("voice.enable.attach-data-popup-url")).ToLower().Equals("true"))
        //            {
        //                try
        //                {
        //                    if (uriResult.Scheme == Uri.UriSchemeFile)
        //                        Process.Start(urlString);
        //                    else
        //                        Process.Start("iexplore.exe", urlString);
        //                }
        //                catch (Exception error)
        //                {
        //                    MessageBox mb = new MessageBox("Error", "Unable to open the url." + Environment.NewLine + error.Message, "", "Ok", false);
        //                    mb.ShowDialog();
        //                }
        //            }
        //        }
        //    }
        //}
        private void DGMyChannels_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            if (!_configContainer.AllKeys.Contains("voice.enable.forward-call") || !((string)_configContainer.GetValue("voice.enable.forward-call")).ToLower().Equals("true"))
            {
                DGMyChannels.Columns[2].Visibility = Visibility.Collapsed;
            }
            else
            {
                DGMyChannels.Columns[2].Visibility = Visibility.Visible;
            }
        }

        //end
        private void DGMyMessages_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            //Code added by Manikandan to disable double click event in header
            var dep = e.OriginalSource as DependencyObject;
            while (dep != null && !(dep is DataGridRowHeader))
            {
                dep = VisualTreeHelper.GetParent(dep);
            }
            //header found
            if (dep is DataGridRowHeader)
                return;
            //End
            else
            {
                var window = IsWindowOpen<Window>("MessageSummary");
                if (window != null)
                    window.Close();
                var msgSummary = new MyMessageSummary(this);
                if (msgSummary != null)
                    msgSummary.LoadGrid("Bottom");
            }
        }

        /// <summary>
        ///     Handles the ContextMenuOpening event of the DG_ScrollViewer control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Controls.ContextMenuEventArgs" /> instance containing the event data.</param>
        private void DG_ScrollViewer_ContextMenuOpening(object sender, ContextMenuEventArgs e)
        {
            if (_dataContext.IsAddSkillsEnabled)
            {
                _dataContext.CanAddSkill = false;
                _dataContext.CanEditSkill = false;
                _dataContext.CanDeleteSkill = false;
                if (_dataContext.MySkills.Count < _dataContext.LoadAllSkills.Count)
                {
                    _dataContext.CanAddSkill = true;
                    _dataContext.SkillsContextMenu.IsOpen = true;
                }
                else
                    e.Handled = true;
            }
            else
                e.Handled = true;
        }

        /// <summary>
        /// Handles the SizeChanged event of the dispositionGrid control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="SizeChangedEventArgs"/> instance containing the event data.</param>
        private void dispositionGrid_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (dispositionGrid.ActualWidth > 0 && dispositionGrid.Children.Count > 0)
            {
                if (_configContainer.AllKeys.Contains("voice.disposition.codes") &&
                   ((Dictionary<string, string>)_configContainer.GetValue("voice.disposition.codes")).Count > 0)
                {
                    if (dispositionGrid.Children[0] is UserControl)
                    {
                        (dispositionGrid.Children[0] as UserControl).Width = dispositionGrid.ActualWidth;
                        (dispositionGrid.Children[0] as UserControl).Height = dispositionGrid.ActualHeight;
                    }
                }
            }
        }

        /// <summary>
        /// Handles the SizeChanged event of the dockWorkbin control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="SizeChangedEventArgs"/> instance containing the event data.</param>
        private void dockWorkbin_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (dockWorkbin.Children.Count != 0)
                if (dockWorkbin.Children[0] is UserControl)
                    (dockWorkbin.Children[0] as UserControl).Width = dockWorkbin.ActualWidth - 10;
        }

        /// <summary>
        /// Does the post call survey.
        /// </summary>
        private void DoPostCallSurvey()
        {
            try
            {
                if (_configContainer.AllKeys.Contains("pcs.transfer-dn") && !string.IsNullOrEmpty((string)_configContainer.GetValue("pcs.transfer-dn")))
                {
                    var soft = new SoftPhone();
                    var ReasonCode = new Genesyslab.Platform.Commons.Collections.KeyValueCollection();
                    ReasonCode.Add("OperationMode", "Transfer");
                    soft.InitiateTransfer(LongDistanceCodeCheck((string)_configContainer.GetValue("pcs.transfer-dn")), ReasonCode);
                    if (_dataContext.SwitchName.ToLower().Contains("nortel"))
                    {
                        if (!_dataContext.IsHoldClicked)
                        {
                            soft.CompleteTransfer();
                            _isTransferClick = false;
                        }
                    }
                    else
                    {
                        _isTransferClick = true;
                    }
                    soft = null;
                }
            }
            catch (Exception generalException)
            {
                _logger.Error("Error Occurred as " + generalException.ToString());
            }
        }

        /// <summary>
        ///     Handles the Closed event of the EmailContextMenu control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void EmailContextMenu_Closed(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_dataContext.EmailContextMenu.IsOpen)
                {
                    _dataContext.EmailContextMenu.IsOpen = false;
                    _dataContext.EmailContextMenu.StaysOpen = false;
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        /// <summary>
        /// Handles the Click event of the EmailStateMenu control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void EmailStateMenu_Click(object sender, RoutedEventArgs e)
        {
            MenuItem menuitem = sender as MenuItem;
            var tempState = menuitem.Header.ToString().Replace("Not Ready - ", "");
            string keyCode = null;
            if (_configContainer.AllKeys.Contains("EmailNotReadyReasonCodes"))
            {
                if (((Dictionary<string, string>)_configContainer.GetValue("EmailNotReadyReasonCodes")).ContainsKey(tempState))
                    keyCode = ((Dictionary<string, string>)_configContainer.GetValue("EmailNotReadyReasonCodes"))[tempState];
            }
            InteractionsMediaStateChange(Datacontext.Channels.Email, (menuitem.Header.ToString() == "Log Off" ? "Logout" : menuitem.Header.ToString()), keyCode);
            //EmailStateChange(AgentStateType.Channel, (menuitem.Header.ToString() == "Log Off" ? "Logout" : menuitem.Header.ToString()));
        }

        /// <summary>
        /// Emails the status menu.
        /// </summary>
        /// <returns></returns>
        private MenuItem[] EserviceStatusMenu(Datacontext.Channels channelType)
        {
            if (_configContainer.AllKeys.Contains("agent-status.enabled-actions-by-channel") &&
                    _configContainer.GetValue("agent-status.enabled-actions-by-channel") != null)
            {
                string[] emailStatus = ((string)_configContainer.GetValue("agent-status.enabled-actions-by-channel")).Split(',');
                emailStatus = emailStatus.Distinct().ToArray();
                if (emailStatus == null && emailStatus.Length <= 0) return null;
                var temp = new MenuItem[emailStatus.Length];
                int i = 0;
                Dictionary<string, string> nrDic = null;
                switch (channelType)
                {
                    case Datacontext.Channels.Email:
                        if (_configContainer.AllKeys.Contains("EmailNotReadyReasonCodes"))
                            nrDic = (Dictionary<string, string>)_configContainer.GetValue("EmailNotReadyReasonCodes");
                        break;

                    case Datacontext.Channels.Chat:
                        if (_configContainer.AllKeys.Contains("ChatNotReadyReasonCodes"))
                            nrDic = (Dictionary<string, string>)_configContainer.GetValue("ChatNotReadyReasonCodes");
                        break;

                    case Datacontext.Channels.OutboundPreview:
                        if (_configContainer.AllKeys.Contains("OutboundNotReadyReasonCodes"))
                            nrDic = (Dictionary<string, string>)_configContainer.GetValue("OutboundNotReadyReasonCodes");
                        break;
                }

                foreach (string state in emailStatus)
                {
                    var item = new MenuItem();
                    switch (state)
                    {
                        case "Ready":
                            item.Icon = new Image
                            {
                                Height = 10,
                                Width = 10,
                                Source =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png", UriKind.Relative)),
                            };
                            item.Header = "Ready";
                            break;

                        case "NotReady":
                            item.Icon = new Image
                            {
                                Height = 10,
                                Width = 10,
                                Source =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                        UriKind.Relative))
                            };
                            item.Header = "Not Ready";
                            break;

                        case "Logon":
                            item.Header = "Log On";
                            break;

                        case "LogOff":
                            item.Header = "Log Off";
                            break;

                        case "NotReadyReason":
                            if (nrDic != null)
                            {
                                Array.Resize(ref temp, (temp.Length + nrDic.Count));
                                foreach (string key in nrDic.Keys)
                                {
                                    var menuNotReadyCode = new MenuItem();
                                    menuNotReadyCode.Margin = new Thickness(2);
                                    menuNotReadyCode.Icon = new Image
                                    {
                                        Height = 10,
                                        Width = 10,
                                        Source =
                                            GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                                UriKind.Relative))
                                    };
                                    menuNotReadyCode.Header = "Not Ready - " + key;
                                    BindingOperations.SetBinding(menuNotReadyCode, IsEnabledProperty,
                                        new Binding { Path = new PropertyPath("EnableMenuitems"), Source = Datacontext.GetInstance() });
                                    switch (channelType)
                                    {
                                        case Datacontext.Channels.Email:
                                            menuNotReadyCode.Click += EmailStateMenu_Click;
                                            break;

                                        case Datacontext.Channels.Chat:
                                            menuNotReadyCode.Click += ChatStateMenu_Click;
                                            break;

                                        case Datacontext.Channels.OutboundPreview:
                                            menuNotReadyCode.Click += OutboundStateMenu_Click;
                                            break;
                                    }
                                    temp[i] = menuNotReadyCode;
                                    if (key != nrDic.LastOrDefault().Key)
                                        i++;
                                }
                            }
                            break;

                        case "Dnd":
                            item.Icon = new Image
                            {
                                Height = 10,
                                Width = 10,
                                Source =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/DontDis.png",
                                        UriKind.Relative))
                            };
                            item.Header = "Do Not Disturb";
                            break;
                    }
                    item.Margin = new Thickness(2);
                    if (state == "Logon")
                        BindingOperations.SetBinding(item, IsEnabledProperty,
                                new Binding { Path = new PropertyPath("EnableLogonMenuitem"), Source = Datacontext.GetInstance() });
                    else if (state == "Dnd")
                        BindingOperations.SetBinding(item, IsEnabledProperty,
                            new Binding { Path = new PropertyPath("EnableDNDMenuitems"), Source = Datacontext.GetInstance() });
                    else
                        BindingOperations.SetBinding(item, IsEnabledProperty,
                                new Binding { Path = new PropertyPath("EnableMenuitems"), Source = Datacontext.GetInstance() });

                    switch (channelType)
                    {
                        case Datacontext.Channels.Email:
                            item.Click += EmailStateMenu_Click;
                            break;

                        case Datacontext.Channels.Chat:
                            item.Click += ChatStateMenu_Click;
                            break;

                        case Datacontext.Channels.OutboundPreview:
                            item.Click += OutboundStateMenu_Click;
                            break;
                    }

                    if (item.Header != null)
                        temp[i] = item;
                    i++;
                }
                temp = temp.Where(x => x != null).ToArray();
                return temp;
            }
            return null;
        }

        //Callback reference method for Team Communicator
        /// <summary>
        /// Events the notify.
        /// </summary>
        /// <param name="dictionaryValues">The dictionary values.</param>
        /// <returns></returns>
        private string EventNotify(Dictionary<string, string> dictionaryValues)
        {
            return string.Empty;
        }

        private IMessage FindInteraction(string connID)
        {
            string[] array = new string[]{ "TConnectionId",
              "OwnerId",
              "Status",
              "ParentId",
              "StartDate"};
            var sSC1 = new SimpleSearchCriteria()
            {
                AttrName = "TConnectionId",
                AttrValue = connID,
                Operator = new NullableOperators(Operators.Equal)
            };
            var srchCrit = new SearchCriteriaCollection();
            srchCrit.Add(sSC1);

            return ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).GetInteractionList(_configContainer.TenantDbId, 0, EntityTypes.PhoneCall, srchCrit,
                array.ToList<string>());
        }

        private void firstBrowser_LoadCompleted(object sender, System.Windows.Navigation.NavigationEventArgs e)
        {
        }

        private void firstBrowser_Navigating(object sender, System.Windows.Navigation.NavigatingCancelEventArgs e)
        {
        }

        /// <summary>
        ///     Handles the Click event of the ForwardMenuitem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void ForwardMenuitem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var menu = (MenuItem)sender;
                ObservableCollection<IMediaStatus> _tempMediaStatus = new ObservableCollection<IMediaStatus>();
                if (menu.Header.Equals("Forward"))
                {
                    _dataContext.ForwardDN = string.Empty;
                    var showMessageBox = new MessageBox("ForwardCall", "Enter forward destination on media voice",
                        "_Apply", "_Cancel", true);
                    showMessageBox.Name = "Forward";
                    showMessageBox.Owner = this;
                    showMessageBox.ShowDialog();
                    if (showMessageBox.DialogResult == true)
                    {
                        showMessageBox.Dispose();
                        var callForwardSet = new SoftPhone();
                        callForwardSet.ForwardCallCancel();
                        callForwardSet.ForwardCallSet(_dataContext.ForwardDN);
                        callForwardSet = null;
                    }
                }
                else if (menu.Header.Equals("Cancel Forward"))
                {
                    var showMessageBox = new MessageBox("Cancel Forward Call",
                        "Are you sure that you want to cancel forward to" + " " + _dataContext.ForwardDN + " " +
                        "on media voice?", "_Yes", "_No", true);
                    showMessageBox.Name = "Forward";
                    showMessageBox.Owner = this;
                    showMessageBox.ShowDialog();
                    if (showMessageBox.DialogResult == true)
                    {
                        showMessageBox.Dispose();
                        var cancelForward = new SoftPhone();
                        cancelForward.ForwardCallCancel();
                        cancelForward = null;
                    }
                }
            }
            catch (Exception commonException)
            {
                _logger.Error("Error occurred as " + commonException.Message);
            }
        }

        private void GenerateHtml()
        {
        }

        private Tuple<InteractionContent, InteractionAttributes, BaseEntityAttributes> GenerateInteractiondetails(string connID,
            string phoneNumber, string CallTypeId, string contacId, DateTime? time, Statuses statuses, KeyValueCollection allAttributes)
        {
            InteractionContent interactionContent = null;

            InteractionAttributes interactionAttributes = new InteractionAttributes();
            BaseEntityAttributes baseEntityAttributes = null;
            try
            {
                interactionAttributes.OwnerId = new NullableInt(_ownerId);
                interactionAttributes.TenantId = new NullableInt(_configContainer.TenantDbId);
                interactionAttributes.EntityTypeId = new NullableEntityTypes(EntityTypes.PhoneCall);

                interactionAttributes.Status = new NullableStatuses(statuses);
                if (statuses == Statuses.InProcess)
                {
                    interactionAttributes.MediaTypeId = "voice";
                    interactionAttributes.TypeId = CallTypeId;
                    interactionAttributes.ContactId = contacId;
                    interactionAttributes.CreatorAppId = _configContainer.ApplicationDbId;

                    if (time != null)
                    {
                        interactionAttributes.StartDate = new NullableDateTime((DateTime)time);
                    }
                }
                if (!string.IsNullOrEmpty(_voiceInteractionID)) //statuses == Statuses.Stopped &&
                {
                    if (time != null)
                        interactionAttributes.EndDate = new NullableDateTime((DateTime)time);
                    interactionAttributes.Id = _voiceInteractionID;
                }

                if (allAttributes != null)
                    interactionAttributes.AllAttributes = allAttributes;

                PhoneCallEntityAttributes phoneCallEntityAttributes = new PhoneCallEntityAttributes();
                if (!string.IsNullOrEmpty(connID) && !string.IsNullOrEmpty(phoneNumber))
                {
                    phoneCallEntityAttributes.TConnectionId = connID;
                    phoneCallEntityAttributes.PhoneNumber = phoneNumber;
                }
                else if (statuses == Statuses.Stopped)
                {
                    phoneCallEntityAttributes.Duration = Convert.ToInt32(((DateTime)time).Subtract(_lastCallStartTime).TotalSeconds);
                }
                baseEntityAttributes = phoneCallEntityAttributes;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message.ToString());
            }

            return new Tuple<InteractionContent, InteractionAttributes, BaseEntityAttributes>(interactionContent, interactionAttributes, baseEntityAttributes);
        }

        private SoftPhoneStatusController GetAfterCallWorkPhonestatus()
        {
            SoftPhoneStatusController status = new SoftPhoneStatusController();

            status.LoginButtonStatus = false;
            status.LogoutButtonStatus = true;
            status.ReadyButtonStatus = true;
            status.NotreadyButtonStatus = false;
            status.HoldButtonStatus = false;
            status.RetrieveButtonStatus = false;
            status.AnswerButtonStatus = false;
            status.ReleaseButtonStatus = false;
            status.ConferenceInitiateStatus = false;
            status.CompleteConferenceStatus = false;
            status.TransferInitiateStatus = false;
            status.TransferCompleteStatus = false;
            //Code Added - V.Palaniappan
            //09.12.2013
            status.DeleteConferenceStatus = false;
            //End
            status.CancelConferenceStatus = false;
            status.CancelTransferStatus = false;

            status.DialButtonStatus = true;
            //Code Added -V.Palaniappan
            //04.12.2013
            status.AlternateButtonStatus = false;
            status.MergeButtonStatus = false;

            return status;
        }

        /// <summary>
        /// Gets the cell.
        /// </summary>
        /// <param name="grid">The grid.</param>
        /// <param name="rowIndex">Index of the row.</param>
        /// <param name="coloumnCount">The coloumn count.</param>
        /// <returns></returns>
        private Microsoft.Windows.Controls.DataGridCell GetCell(Microsoft.Windows.Controls.DataGrid grid, int rowIndex, int coloumnCount)
        {
            try
            {
                Microsoft.Windows.Controls.DataGridCell cell = null;
                var dataGridCellInfo = new Microsoft.Windows.Controls.DataGridCellInfo(grid.Items[rowIndex], grid.Columns[coloumnCount]);
                cell = TryToFindGridCell(grid, dataGridCellInfo);
                return cell;
            }
            catch (Exception ex)
            {
                _logger.Error("GetCell() : " + ex.Message);
                return null;
            }
        }

        /// <summary>
        /// Gets the contact information.
        /// </summary>
        /// <param name="contactId">The contact identifier.</param>
        /// <param name="interactionId">The interaction identifier.</param>
        private void GetContactInformation(string contactId, string interactionId)
        {
            try
            {
                bool showContactTab = true;
                try
                {
                    if (_configContainer.AllKeys.Contains("voice.enable.interaction-contact")
                        && !_configContainer.GetAsBoolean("voice.enable.interaction-contact"))
                        showContactTab = false;
                }
                catch { }
                voiceContact.Visibility = Visibility.Collapsed;
                if (Datacontext.AvailableServerDic.ContainsValue(Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGContactServer.ToString())
                            && _plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact) && showContactTab)
                {
                    if (gridVoiceContact.Children.Count != 0 && !(gridVoiceContact.Children[0] is TextBlock))
                    {
                        ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).UpdateContactUserControl((gridVoiceContact.Children[0] as UserControl), contactId, MediaTypes.Voice);
                    }
                    else
                    {
                        gridVoiceContact.Children.Clear();
                        UserControl contactUserControl = ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).GetContactUserControl(contactId, MediaTypes.Voice);
                        if (contactUserControl == null)
                        {
                            voiceContact.Visibility = Visibility.Visible;
                            _logger.Warn("GetContactDirectoryUserControl returns null");
                            gridVoiceContact.Children.Add(GetTextBlock("There is no contact information available to display"));
                            return;
                        }
                        else
                        {
                            voiceContact.Visibility = Visibility.Visible;
                            gridVoiceContact.Margin = new Thickness(5);
                            gridVoiceContact.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                            contactUserControl.Width = gridVoiceContact.Width;
                            contactUserControl.Height = gridVoiceContact.Height;
                            gridVoiceContact.Children.Add(contactUserControl);
                        }
                    }
                }
                else
                {
                    voiceContact.Visibility = Visibility.Collapsed;
                    //gridVoiceContact.Children.Add(GetTextBlock("There is no contact information available to display"));
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        private SoftPhoneStatusController GetNotReadyStatus()
        {
            SoftPhoneStatusController status = new SoftPhoneStatusController();

            status.LoginButtonStatus = false;
            status.LogoutButtonStatus = true;
            status.ReadyButtonStatus = true;
            status.NotreadyButtonStatus = false;
            status.HoldButtonStatus = false;
            status.RetrieveButtonStatus = false;
            status.AnswerButtonStatus = false;
            status.ReleaseButtonStatus = false;
            status.ConferenceInitiateStatus = false;
            status.CompleteConferenceStatus = false;
            status.TransferInitiateStatus = false;
            status.TransferCompleteStatus = false;
            //Code Added - V.Palaniappan
            //09.12.2013
            status.DeleteConferenceStatus = false;
            //End
            status.CancelConferenceStatus = false;
            status.CancelTransferStatus = false;

            status.DialButtonStatus = true;
            //Code Added -V.Palaniappan
            //04.12.2013
            status.AlternateButtonStatus = false;
            status.MergeButtonStatus = false;
            //End
            return status;
        }

        /// <summary>
        /// Gets the text block.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <returns></returns>
        private TextBlock GetTextBlock(string message)
        {
            TextBlock txtBlockError = new TextBlock();
            txtBlockError.Text = message;
            //txtBlockError.FontWeight = FontWeights.Bold;
            txtBlockError.FontSize = 12;
            txtBlockError.Margin = new Thickness(5);
            txtBlockError.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
            txtBlockError.VerticalAlignment = System.Windows.VerticalAlignment.Top;
            return txtBlockError;
        }

        private void GlobalStateMenuItems()
        {
            try
            {
                var logoutItems = _dataContext.htMediaCurrentState.Values.OfType<string>().Where(s => s.Contains("Logout"));
                var _outOfServiceItems = _dataContext.htMediaCurrentState.Values.OfType<string>().Where(s => s.Contains("Out Of Service"));
                if (_outOfServiceItems != null && _dataContext.htMediaCurrentState.Count == _outOfServiceItems.Count())
                {
                    _dataContext.EnableMenuitems = false;
                    _dataContext.EnableLogonMenuitem = false;
                    _dataContext.EnableGlobalDNDMenuitem = false;
                }
                else if (logoutItems != null && _dataContext.htMediaCurrentState.Count == logoutItems.Count())
                {
                    _dataContext.EnableMenuitems = false;
                    _dataContext.EnableLogonMenuitem = true;
                }
                else if (logoutItems != null && logoutItems.Count() == 0)
                {
                    _dataContext.EnableMenuitems = true;
                    _dataContext.EnableLogonMenuitem = false;
                }
                else
                {
                    _dataContext.EnableMenuitems = true;
                    _dataContext.EnableLogonMenuitem = true;
                }
                if (_dataContext.htMediaCurrentState.Count == 1 && _dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
                {
                    if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout"))
                        _dataContext.EnableGlobalDNDMenuitem = false;
                    else
                        _dataContext.EnableGlobalDNDMenuitem = true;
                }
                else
                    _dataContext.EnableGlobalDNDMenuitem = true;
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred in showing notify icon global menu items : " + ex.Message.ToString());
            }
        }

        //Code added by Manikandan to implement global status context menu
        private void GlobalStatesContextMenu_Closed(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_dataContext.GlobalStatesContextMenu.IsOpen)
                {
                    _dataContext.GlobalStatesContextMenu.IsOpen = false;
                    _dataContext.GlobalStatesContextMenu.StaysOpen = false;
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        /// <summary>
        /// Globals the status menu.
        /// </summary>
        /// <returns></returns>
        private MenuItem[] GlobalStatusMenu()
        {
            if (_configContainer.AllKeys.Contains("agent-status.enabled-actions-global") &&
                    _configContainer.GetValue("agent-status.enabled-actions-global") != null)
            {
                string[] globalStatus = ((string)_configContainer.GetValue("agent-status.enabled-actions-global")).Split(',');
                globalStatus = globalStatus.Distinct().ToArray();
                var temp = new MenuItem[globalStatus.Length];
                int i = 0;
                foreach (string state in globalStatus)
                {
                    var item = new MenuItem();
                    item.Margin = new Thickness(2);
                    switch (state)
                    {
                        case "Ready":
                            item.Icon = new Image
                            {
                                Height = 10,
                                Width = 10,
                                Source =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png", UriKind.Relative))
                            };
                            item.Header = "Ready";
                            break;

                        case "NotReady":
                            item.Icon = new Image
                            {
                                Height = 10,
                                Width = 10,
                                Source =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                        UriKind.Relative))
                            };
                            item.Header = "Not Ready";
                            break;

                        case "NotReadyReason":
                            if (_configContainer.AllKeys.Contains("GlobalNotReadyReasonCodes"))
                            {
                                var nrDic = ((Dictionary<string, string>)_configContainer.GetValue("GlobalNotReadyReasonCodes"));
                                Array.Resize(ref temp, (temp.Length + nrDic.Count));
                                foreach (string key in nrDic.Keys)
                                {
                                    var menuVoiceNotReadyCode = new MenuItem();
                                    menuVoiceNotReadyCode.Margin = new Thickness(2);
                                    menuVoiceNotReadyCode.Icon = new Image
                                    {
                                        Height = 10,
                                        Width = 10,
                                        Source =
                                            GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                                UriKind.Relative))
                                    };
                                    menuVoiceNotReadyCode.Header = "Not Ready - " + key;
                                    BindingOperations.SetBinding(menuVoiceNotReadyCode, IsEnabledProperty,
                                        new Binding { Path = new PropertyPath("EnableMenuitems"), Source = Datacontext.GetInstance() });
                                    menuVoiceNotReadyCode.Click += GlobalStatusMenuClick;
                                    temp[i] = menuVoiceNotReadyCode;
                                    if (key != nrDic.LastOrDefault().Key)
                                        i++;
                                }
                            }
                            break;

                        case "AfterCallWork":
                            item.Icon = new Image
                            {
                                Height = 10,
                                Width = 10,
                                Source =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/ACW.png", UriKind.Relative))
                            };
                            item.Header = "After Call Work";
                            break;

                        case "Dnd":
                            item.Icon = new Image
                            {
                                Height = 10,
                                Width = 10,
                                Source =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/DontDis.png",
                                        UriKind.Relative))
                            };
                            item.Header = "Do Not Disturb";
                            break;

                        case "Logon":
                            item.Header = "Log On";
                            break;

                        case "LogOff":
                            item.Header = "Log Off";
                            break;
                    }
                    if (state == "Logon")
                        BindingOperations.SetBinding(item, IsEnabledProperty,
                                new Binding { Path = new PropertyPath("EnableLogonMenuitem"), Source = Datacontext.GetInstance() });
                    else if (state == "Dnd")
                        BindingOperations.SetBinding(item, IsEnabledProperty,
                            new Binding { Path = new PropertyPath("EnableGlobalDNDMenuitem"), Source = Datacontext.GetInstance() });
                    else
                        BindingOperations.SetBinding(item, IsEnabledProperty,
                                new Binding { Path = new PropertyPath("EnableMenuitems"), Source = Datacontext.GetInstance() });
                    item.Click += GlobalStatusMenuClick;
                    if (item.Header != null)
                        temp[i] = item;
                    i++;
                }
                temp = temp.Where(x => x != null).ToArray();
                return temp;
            }
            return null;
        }

        //Code added by Manikandan to implement Global Status Menu Click
        /// <summary>
        /// Global status menu click.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void GlobalStatusMenuClick(object sender, RoutedEventArgs e)
        {
            var menuitem = sender as MenuItem;
            string selectedMenu = (menuitem.Header.ToString() == "Log Off" ? "Logout" : menuitem.Header.ToString());
            try
            {
                bool isPending;
                bool isKeyTrue;
                bool IsLogout;
                if (!selectedMenu.Contains("After"))
                {
                    #region Get not ready key

                    var tempState = selectedMenu.Replace("Not Ready - ", "");
                    string keyCode = null;
                    if (_configContainer.AllKeys.Contains("GlobalNotReadyReasonCodes"))
                    {
                        if (((Dictionary<string, string>)_configContainer.GetValue("GlobalNotReadyReasonCodes")).ContainsKey(tempState))
                            keyCode = ((Dictionary<string, string>)_configContainer.GetValue("GlobalNotReadyReasonCodes"))[tempState];
                    }

                    #endregion Get not ready key

                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Email))
                    {
                        //For Email Global State.
                        isPending = _dataContext.IsOnEmailIXN;
                        isKeyTrue = (_configContainer.AllKeys.Contains("email.enable.agent-select-status-interaction") &&
                      ((string)_configContainer.GetValue("email.enable.agent-select-status-interaction")).ToLower().Equals("true"));
                        IsLogout = ((selectedMenu != "Log On" && !_dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString().Contains("Logout"))
                            || (selectedMenu == "Log On" && _dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString().Contains("Logout")));
                        if ((isPending && isKeyTrue && IsLogout) || (!isPending && IsLogout) || selectedMenu.Contains("Do Not Disturb"))
                        {
                            InteractionsMediaStateChange(Datacontext.Channels.Email, selectedMenu, keyCode);
                        }
                        //EmailStateChange(AgentStateType.Global, selectedMenu);
                    }
                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Chat))
                    {
                        //For Chat Global State.
                        isPending = _dataContext.IsOnChatIXN;
                        isKeyTrue = (_configContainer.AllKeys.Contains("chat.enable.agent-select-status-interaction") &&
                      ((string)_configContainer.GetValue("chat.enable.agent-select-status-interaction")).ToLower().Equals("true"));
                        IsLogout = ((selectedMenu != "Log On" && !_dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString().Contains("Logout"))
                            || (selectedMenu == "Log On" && _dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString().Contains("Logout")));
                        if ((isPending && isKeyTrue && IsLogout) || (!isPending && IsLogout) || selectedMenu.Contains("Do Not Disturb"))
                        {
                            InteractionsMediaStateChange(Datacontext.Channels.Chat, selectedMenu, keyCode);
                        }
                        //ChatStateChange(AgentStateType.Global, selectedMenu);
                    }
                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.OutboundPreview))
                    {
                        if (selectedMenu != "Log On" || (selectedMenu == "Log On" && _dataContext.htMediaCurrentState[Datacontext.Channels.OutboundPreview].ToString().Contains("Logout")))
                            OutboundStateChange(AgentStateType.Global, selectedMenu);

                    }
                }
                //For Voice Global State.
                isPending = _dataContext.isOnCall;
                isKeyTrue = (_configContainer.AllKeys.Contains("voice.enable.agent-select-status-interaction") &&
              ((string)_configContainer.GetValue("voice.enable.agent-select-status-interaction")).ToLower().Equals("true"));
                IsLogout = (selectedMenu != "Log On"
                    || (selectedMenu == "Log On" && _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("Logout")));
                if ((isPending && isKeyTrue && IsLogout) || (!isPending && IsLogout))
                    VoiceStateChange(AgentStateType.Global, selectedMenu);
            }
            catch (Exception commonException)
            {
                _logger.Error("GlobalStatusMenuClick :" + commonException);
            }
        }

        private void grdNotify_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            menuItemMSG_Click(null, null);
        }

        private void Himss_Click(object sender, RoutedEventArgs e)
        {
            //this.Dispatcher.Invoke((Action)(delegate
            //{
            try
            {
                if (_iDesktopMessenger != null && !string.IsNullOrEmpty(_mid))
                    _iDesktopMessenger.PopupMID(_mid);
            }
            catch (Exception ex)
            {
                _logger.Warn("Error occurred while trying to launch the HIMMS url as : " + ex.ToString());
            }
            //}));
        }

        /// <summary>
        /// Handles the Click event of the Hold control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void Hold_Click(object sender, RoutedEventArgs e)
        {
            //if (_dataContext.HoldImageSource != null &&
            //           _dataContext.HoldImageSource.ToString().Contains("Call.Hold.png"))
            {
                _dataContext.IsHoldClicked = true;
                var softHold = new SoftPhone();
                softHold.Hold();
                softHold = null;
            }
        }

        /// <summary>
        ///     Handles the MouseMove event of the HookManager control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Forms.MouseEventArgs" /> instance containing the event data.</param>
        private void HookManager_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            _x = Convert.ToInt32(string.Format("{0:0000}", e.X));
            _y = Convert.ToInt32(string.Format("{0:0000}", e.Y));
            var showareawidth = (float)(SystemParameters.PrimaryScreenWidth / 3);
            if (_x <= (int)Math.Ceiling(showareawidth) || _x >= (int)Math.Ceiling(showareawidth * 2)) return;
            if (winHideTimer.IsEnabled) return;
            if (_y != 0 && _y != -1) return;
            Visibility = Visibility.Visible;
            btnMinimize.IsEnabled = false;
            winHideTimer.Start();
            winHideTimer.IsEnabled = true;
            //Topmost = true;
        }

        /// <summary>
        ///     Handles the MouseEnter event of the imgSoftIcon control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseEventArgs" /> instance containing the event data.</param>
        private void imgSoftIcon_MouseEnter(object sender, MouseEventArgs e)
        {
            popupState.IsOpen = true;
            popupState.StaysOpen = true;
            popupState.Focusable = false;
            popupState.PlacementTarget = imgSoftIcon;

            if (Thread.CurrentThread == Dispatcher.CurrentDispatcher.Thread)
            {
                InitialloadData();
            }
            else
            {
                this.Dispatcher.BeginInvoke((Action)(delegate
                {
                    InitialloadData();
                }), DispatcherPriority.DataBind);
            }
        }

        /// <summary>
        ///     Handles the MouseLeave event of the imgSoftIcon control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseEventArgs" /> instance containing the event data.</param>
        private void imgSoftIcon_MouseLeave(object sender, MouseEventArgs e)
        {
            popupState.IsOpen = false;
            popupState.StaysOpen = false;
        }

        private void InitializeSalesforce()
        {
            try
            {
                if (Datacontext.GetInstance().IsSalesforcePluginEnabled && _plugins.PluginCollections.ContainsKey(Plugins.Salesforce))
                {
                    _dataContext.IsSalesForceEnabled = System.Windows.Visibility.Visible;
                    Thread salesforceThread = new Thread(delegate()
                    {
                        try
                        {
                            ISFDCConnector salesforce = ((ISFDCConnector)_plugins.PluginCollections[Plugins.Salesforce]);

                            SFDCConnectionOptions sfdcConOptions = new SFDCConnectionOptions()
                            {
                                AgentGroups = (_configContainer.GetValue("CfgAgentGroup") is List<CfgAgentGroup>) ? _configContainer.GetValue("CfgAgentGroup") : null,
                                EnableSubcriberLog = true,
                                Application = _configContainer.GetValue("CfgApplication"),
                                Person = _configContainer.GetValue("CfgPerson"),
                                ThisDN = Datacontext.GetInstance().ThisDN,
                            };
                            try
                            {
                                sfdcConOptions.ConfService = _configContainer.ConfServiceObject;
                            }
                            catch
                            {
                            }
                            try
                            {
                                sfdcConOptions.UCSProtocol = ProtocolManagers.Instance().ProtocolManager[ServerType.Ucserver.ToString()];
                            }
                            catch
                            {
                            }
                            try
                            {
                                sfdcConOptions.TserverProtocol = ProtocolManagers.Instance().ProtocolManager[ServerType.Tserver.ToString()];
                            }
                            catch
                            {
                            }

                            salesforce.LogMessage += new LogMessage(salesforce_LogMessage);
                            salesforce.AgentState += new AgentStateHandler(salesforce_AgentState);
                            salesforce.NotifyConnectionStatusMessage += new ConnectionStatusMessage(salesforce_SFDCConnectionStatus);
                            salesforce.NotifyUrl += new NotifySFDCUrl(salesforce_ReceiveSFDCWindow);
                            salesforce.NotifySFDCConnectionStatusChanges += new ConnectionStatusChange(salesforce_NotifySFDCConnectionStatusChanges);
                            salesforce.Subscribe(sfdcConOptions);
                        }
                        catch (Exception _generalException)
                        {
                            _logger.Error("Error occurred as " + _generalException.Message);
                        }
                    });
                    salesforceThread.Start();
                }
                else
                    _dataContext.IsSalesForceEnabled = System.Windows.Visibility.Collapsed;
            }
            catch (Exception _generalException)
            {
                _logger.Error("Error occurred as " + _generalException.Message);
            }
        }

        private void InitializeTeamCommunicatorValues()
        {
            try
            {
                if (!_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.TeamCommunicator))
                    return;
                Dictionary<string, object> _teamCommunicatorValues = new Dictionary<string, object>();
                _teamCommunicatorValues.Add("UserName", _dataContext.UserName);

                if (_configContainer.AllKeys.Contains("teamcommunicator.filter-list"))
                    _teamCommunicatorValues.Add("teamcommunicator.filter-list", (string)_configContainer.GetValue("teamcommunicator.filter-list"));//"Agent,AgentGroup,Skill,InteractionQueue,Queue,RoutingPoint");
                if (_configContainer.AllKeys.Contains("teamcommunicator.custom-favorite-list"))
                    _teamCommunicatorValues.Add("teamcommunicator.custom-favorite-list", (string)_configContainer.GetValue("teamcommunicator.custom-favorite-list"));//"Category,DisplayName,FirstName,LastName,EmailAddress,PhoneNumber");
                if (_configContainer.AllKeys.Contains("teamcommunicator.internal-favorite-list"))
                    _teamCommunicatorValues.Add("teamcommunicator.internal-favorite-list", (string)_configContainer.GetValue("teamcommunicator.internal-favorite-list"));//"Category,FirstName,LastName,DisplayName");
                if (_configContainer.AllKeys.Contains("teamcommunicator.max-recent-records"))
                    _teamCommunicatorValues.Add("teamcommunicator.max-recent-records", (string)_configContainer.GetValue("teamcommunicator.max-recent-records"));// "10");
                if (_configContainer.AllKeys.Contains("teamcommunicator.max-suggestion-size"))
                    _teamCommunicatorValues.Add("teamcommunicator.max-suggestion-size", (string)_configContainer.GetValue("teamcommunicator.max-suggestion-size"));//"10");
                if (_configContainer.AllKeys.Contains("teamcommunicator.max-favorites-size"))
                    _teamCommunicatorValues.Add("teamcommunicator.max-favorites-size", (string)_configContainer.GetValue("teamcommunicator.max-favorites-size"));//"50");
                if (_configContainer.AllKeys.Contains("teamcommunicator.statistics-routing-points"))
                    _teamCommunicatorValues.Add("teamcommunicator.statistics-routing-points", (string)_configContainer.GetValue("teamcommunicator.statistics-routing-points"));//"8101");
                //if (_dataContext.AnnexStatValues.ContainsKey("workbins"))
                //    _dataContext.dicCMEObjects.Add("workbins", _dataContext.AnnexStatValues["workbins"]);

                if (_configContainer.AllKeys.Contains("log.filter-level"))
                    _teamCommunicatorValues.Add("log.filter-level", (string)_configContainer.GetValue("log.filter-level"));//"AID"
                if (_configContainer.AllKeys.Contains("teamcommunicator.corporate-favorites-file"))
                    _teamCommunicatorValues.Add("teamcommunicator.corporate-favorites-file", (string)_configContainer.GetValue("teamcommunicator.corporate-favorites-file"));//"AID"
                //_dataContext.dicCMEObjects.Add("ComObject", Datacontext.comObject);
                _teamCommunicatorValues.Add("TenantDBID", _configContainer.TenantDbId);

                if (_configContainer.AllKeys.Contains("AllPersons"))
                {
                    var items = _configContainer.GetValue("AllPersons");
                    if (items != null)
                    {
                        _teamCommunicatorValues.Add("AllPersons", items);
                        _configContainer.NullValue("AllPersons");
                    }
                }

                _teamCommunicatorValues.Add("Initialize", string.Empty);

                string primaryHost = string.Empty;
                string primaryPort = string.Empty;
                if (_configContainer.AllKeys.Contains("teamcommunicator.statistics-host"))//primary Host -----------------------------------------------------------
                    primaryHost = (string)_configContainer.GetValue("");
                if (_configContainer.AllKeys.Contains("teamcommunicator.statistics-port"))//primary port -----------------------------------------------------------
                    primaryPort = (string)_configContainer.GetValue("");

                //commented by rajkumar 20/2/2016
                //if (!string.IsNullOrEmpty(primaryHost) && !string.IsNullOrEmpty(primaryPort) &&
                //    (_configContainer.AllKeys.Contains("teamcommunicator.enable.plugin") &&
                //        ((string)_configContainer.GetValue("teamcommunicator.enable.plugin")).ToLower().Equals("true")))
                //    _teamCommunicatorValues.Add("OpenServer", true);

                if (_plugins.PluginCollections.ContainsKey(Plugins.Contact))
                {
                    List<string> stringlist = new List<string>();
                    stringlist.Add("EmailAddress");
                    stringlist.Add("FirstName");
                    stringlist.Add("LastName");
                    stringlist.Add("PhoneNumber");
                    var _contactOutputValues = Pointel.Interactions.Contact.Core.Request.RequestToGetContacts.GetContactList(_configContainer.TenantDbId, stringlist, 0);

                    _teamCommunicatorValues.Add("AllContacts", _contactOutputValues.IContactMessage);
                }
                if (!IsSendWorkbinToTeamCommunicator && _plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                {
                    var pluginWorkbin = (IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin];
                    List<string> workbinList = pluginWorkbin.GetPersonalWorkbinList();
                    List<string> teamWorkbinList = pluginWorkbin.GetTeamWorkbinList();
                    if (workbinList != null)
                    {
                        string workbinNames = string.Empty;
                        foreach (string workBinType in workbinList)
                        {
                            if (string.IsNullOrEmpty(workbinNames))
                                workbinNames = workBinType;
                            else
                                workbinNames += "," + workBinType;
                        }
                        _teamCommunicatorValues.Add("workbins", workbinNames);
                    }
                    if (teamWorkbinList != null)
                    {
                        string workbinNames = string.Empty;
                        foreach (string workBinType in teamWorkbinList)
                        {
                            if (string.IsNullOrEmpty(workbinNames))
                                workbinNames = workBinType;
                            else
                                workbinNames += "," + workBinType;
                        }
                        _teamCommunicatorValues.Add("teamworkbins", workbinNames);
                    }
                    bool _supervisorMovetoWorkbin = false;
                    bool _supervisorMovetoInteractionQueue = false;
                    if (_configContainer.AllKeys.Contains("supervisor.enable.move-workbin") &&
                                    ((string)_configContainer.GetValue("supervisor.enable.move-workbin")).ToLower().Equals("true"))
                        _supervisorMovetoWorkbin = true;

                    if (_configContainer.AllKeys.Contains("supervisor.enable.move-interactionqueue") &&
                                    ((string)_configContainer.GetValue("supervisor.enable.move-interactionqueue")).ToLower().Equals("true"))
                        _supervisorMovetoInteractionQueue = true;

                    _teamCommunicatorValues.Add("myteamworkbin.supervisor.enable-move-workbin", _supervisorMovetoWorkbin);
                    _teamCommunicatorValues.Add("myteamworkbin.supervisor.enable-move-interactionqueue", _supervisorMovetoInteractionQueue);
                }

                // Dispatcher.BeginInvoke((Action)(delegate{
                ((ITeamCommunicatorPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.TeamCommunicator]).NotifyCMEObjects(_teamCommunicatorValues);
                //}),DispatcherPriority.Render);

                //ThreadPool.QueueUserWorkItem(new WaitCallback(
                //(((ITeamCommunicatorPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.TeamCommunicator]).NotifyCMEObjects)), _teamCommunicatorValues);
                _teamCommunicatorValues = null;
            }
            catch (Exception ex)
            {
                _logger.Error("Error in initializing team communicator : " + ex.Message.ToString());
            }
        }

        private bool IsBlockedNumber(string dialedNumber)
        {
            //voice.enable.block-numbers is an hidden key
            //(default/if not configured) value : true for functionality
            bool canDial = true;

            try
            {
                if (_configContainer.AllKeys.Contains("voice.enable.block-numbers")
                    && !Convert.ToBoolean(_configContainer.GetValue("voice.enable.block-numbers")))
                    return false;
            }
            catch
            {
                _logger.Warn("Block numbers may not work. config key has invalid value "
                    + "voice.enable.block-numbers:" + (string)_configContainer.GetValue("voice.enable.block-numbers"));
            }
            if (_configContainer.AllKeys.Contains("voice.blocked-numbers"))
            {
                var blockedNumbers = ((string)_configContainer.GetValue("voice.blocked-numbers")).Split(',');
                if (blockedNumbers.Contains(dialedNumber))
                {
                    canDial = false;
                    _errorMessage.Clear();
                    _errorMessage.Add("IWS_Message", "The dialed number (" + dialedNumber + ") is blocked by the administrator.");
                    _errorMessage.Add("IWS_Subject", "Dialed number is not allowed to call.");
                    _errorMessage.Add("IWS_Sender", "System");
                    _errorMessage.Add("IWS_Priority", "2");
                    _errorMessage.Add("IWS_MessageType", "Information");
                    _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                    _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                    GettingUserData(VoiceEvents.None, _errorMessage);
                }
            }
            return !canDial;
        }

        private void LoadChatPlugin()
        {
            try
            {
                var file = Path.Combine(Path.Combine(System.Windows.Forms.Application.StartupPath, "Plugins"), "Pointel.Interactions.Chat.dll");
                if (File.Exists(file))
                {
                    Assembly asm = Assembly.LoadFile(file);
                    var chatInterfrace = (IChatPlugin)(from asmType in asm.GetTypes() where asmType.GetInterface("IChatPlugin") != null select (IChatPlugin)Activator.CreateInstance(asmType)).FirstOrDefault();
                    _plugins.PluginCollections.Add(Pointel.Interactions.IPlugins.Plugins.Chat, chatInterfrace);
                }
                else
                    _logger.Warn("LoadChatPlugins() : Chat Plug-in dll not exist");
            }
            catch (Exception commonException)
            {
                var reflectionTypeLoadException = commonException as ReflectionTypeLoadException;
                if (reflectionTypeLoadException != null)
                {
                    string error = reflectionTypeLoadException.LoaderExceptions.Aggregate(string.Empty, (current, item) => current + (" " + item.Message));

                    _logger.Error("LoadChatPlugins() : " + error);
                }
                else
                    _logger.Error("Error occurred as " + commonException.Message);
            }
        }

        private void LoadContactPlugin()
        {
            try
            {
                var file = Path.Combine(Path.Combine(System.Windows.Forms.Application.StartupPath, "Plugins"), "Pointel.Interactions.Contact.dll");
                if (File.Exists(file))
                {
                    Assembly asm = Assembly.LoadFile(file);
                    var contactInterfrace = (IContactPlugin)(from asmType in asm.GetTypes() where asmType.GetInterface("IContactPlugin") != null select (IContactPlugin)Activator.CreateInstance(asmType)).FirstOrDefault();
                    _plugins.PluginCollections.Add(Pointel.Interactions.IPlugins.Plugins.Contact, contactInterfrace);
                    _dataContext.IsContactsPluginAdded = true;
                }
                else
                    _logger.Warn("LoadContactPlugin : Contact Plug-in dll not exist");
            }
            catch (Exception generalException)
            {
                var reflectionTypeLoadException = generalException as ReflectionTypeLoadException;
                if (reflectionTypeLoadException != null)
                {
                    var error = reflectionTypeLoadException.LoaderExceptions.Aggregate(string.Empty, (current, item) => current + (" " + item.Message));

                    _logger.Error("LoadContactPlugin : " + error);
                }
                else
                    _logger.Error("Error occurred as " + generalException.Message);
            }
        }

        private void LoadEmailPlugin()
        {
            try
            {
                var file = Path.Combine(Path.Combine(System.Windows.Forms.Application.StartupPath, "Plugins"), "Pointel.Interactions.Email.dll");
                if (File.Exists(file))
                {
                    Assembly asm = Assembly.LoadFile(file);
                    var emailInterfrace = (IEmailPlugin)(from asmType in asm.GetTypes() where asmType.GetInterface("IEmailPlugin") != null select (IEmailPlugin)Activator.CreateInstance(asmType)).FirstOrDefault();
                    _plugins.PluginCollections.Add(Pointel.Interactions.IPlugins.Plugins.Email, emailInterfrace);
                }
                else
                    _logger.Warn("LoadPlugins : Email Plug-in dll not exist");
            }
            catch (Exception generalException)
            {
                var reflectionTypeLoadException = generalException as ReflectionTypeLoadException;
                if (reflectionTypeLoadException != null)
                {
                    string error = reflectionTypeLoadException.LoaderExceptions.Aggregate(string.Empty, (current, item) => current + (" " + item.Message));

                    _logger.Error("LoadPlugins : " + error);
                }
                else
                    _logger.Error("Error occurred as " + generalException.Message);
            }
        }

        private void LoadImages()
        {
            try
            {
                if (_configContainer.AllKeys.Contains("image-path"))
                    _imagePath = _configContainer.GetValue("image-path") + "\\Voice";
                else
                    _imagePath = Environment.CurrentDirectory.ToString() + @"\\Voice";

                _imageDatacontext.ImgLoginEnabled = GetBitmapImage(new Uri(_imagePath + "\\Login-in-icon.png", UriKind.Relative));
                _imageDatacontext.ImgLogoutEnabled = GetBitmapImage(new Uri(_imagePath + "\\Login-out-icon.png", UriKind.Relative));
                _imageDatacontext.ImgReadyEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Ready.png", UriKind.Relative));
                _imageDatacontext.ImgNotReadyEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.NotReady.png", UriKind.Relative));
                _imageDatacontext.ImgDialPadEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.png", UriKind.Relative));
                _imageDatacontext.ImgHoldEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Hold.png", UriKind.Relative));
                _imageDatacontext.ImgRetrieveEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Retrive.png", UriKind.Relative));
                _imageDatacontext.ImgConfEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Confrence.png", UriKind.Relative));
                _imageDatacontext.ImgCompConfEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Confrence.Complete.png", UriKind.Relative));
                _imageDatacontext.ImgTransEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Transfer.png", UriKind.Relative));
                _imageDatacontext.ImgCompTransEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Transfer.Complete.png", UriKind.Relative));
                _imageDatacontext.ImgReconnectEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.ReConnect.png", UriKind.Relative));
                _imageDatacontext.ImgAltCallEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Alternative.png", UriKind.Relative));
                _imageDatacontext.ImgMergeCallEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Merge.png", UriKind.Relative));
                _imageDatacontext.ImgReleaseEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Release.png", UriKind.Relative));
                _imageDatacontext.ImgCallDataEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.AttachData.png", UriKind.Relative));
                _imageDatacontext.ImgDeleteConfEnabled = GetBitmapImage(new Uri(_imagePath + "\\Call.DeleteConf.png", UriKind.Relative));

                _imageDatacontext.ImgLoginDisabled = GetBitmapImage(new Uri(_imagePath + "\\Login-in-icon.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgLogoutDisabled = GetBitmapImage(new Uri(_imagePath + "\\Login-out-icon.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgReadyDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Ready.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgNotReadyDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.NotReady.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgHoldDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Hold.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgRetrieveDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Retrive.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgTransDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Transfer.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgCompTransDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Transfer.Complete.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgConfDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Confrence.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgCompConfDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Confrence.Complete.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgReconnectDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.ReConnect.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgCallDataDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.AttachData.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgCallDataDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.AttachData.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgAltCallDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Alternative.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgMergeCallDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Merge.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgReleaseDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Release.Disable.png", UriKind.Relative));
                _imageDatacontext.ImgDialPadDisabled = GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png", UriKind.Relative));

                _imageDatacontext.ImgLogoutStatus = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png", UriKind.Relative));
                _imageDatacontext.ImgNotReadyStatus = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png", UriKind.Relative));
                _imageDatacontext.ImgReadyStatus = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png", UriKind.Relative));
                _imageDatacontext.ImgDNDStatus = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/DontDis.png", UriKind.Relative));
                _imageDatacontext.ImgOutofServiceStatus = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Out_of_Service.png",
                                    UriKind.Relative));
                _imageDatacontext.ImgACWStatus = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/ACW.png",
                                          UriKind.Relative));
                // _imageDatacontext.ImgFacet = GetBitmapImage(new Uri(_imagePath + "\\facets.png", UriKind.Relative));
                // _imageDatacontext.ImgEpic = GetBitmapImage(new Uri(_imagePath + "\\epic.png", UriKind.Relative));
            }
            catch (Exception ex)
            {
                _logger.Error("Error while loading images : " + ((ex.InnerException == null) ? ex.Message.ToString() : ex.InnerException.ToString()));
            }
            finally
            {
            }
        }

        /// <summary>
        /// Loads my contacts.
        /// </summary>
        private void LoadMyContacts()
        {
            try
            {
                UserControl contactUserControl = ((IContactPlugin)_plugins.PluginCollections[Plugins.Contact]).GetContactDirectoryUserControl(false, null, null);
                if (contactUserControl == null)
                {
                    _logger.Warn("gridVoiceContactContactDirectoryUserControl returns null");
                    return;
                }
                ContactTabGrid.Children.Clear();
                ContactTabGrid.Children.Add(contactUserControl);
                contactUserControl.Margin = new Thickness(2);
                contactUserControl.VerticalAlignment = System.Windows.VerticalAlignment.Stretch;
                contactUserControl.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
            }
            catch (Exception ex)
            {
                _logger.Error("Error in Loading MyContacts : " + ((ex.InnerException == null) ? ex.Message.ToString() : ex.InnerException.ToString()));
            }
        }

        private void LoadMyHistory()
        {
            try
            {
                HistoryTabGrid.Children.Clear();

                //if (!_plugins.PluginCollections.ContainsKey(Plugins.Contact) || (_configContainer.AllKeys.Contains("voice.enable.my-history")
                //    && !((string)_configContainer.GetValue("voice.enable.my-history")).ToLower().Equals("true")))
                //{
                //    if (DataTabControl.Items.Contains(TabHistory))
                //        DataTabControl.Items.Remove(TabHistory);
                //    _logger.Warn("Contacts Plugin is not loaded");
                //    HistoryTabGrid.Children.Add(GetTextBlock("There is no history found to display."));
                //    return;
                //}

                UserControl historyUserControl = ((IContactPlugin)_plugins.PluginCollections[Plugins.Contact]).GetContactHistoryUserControl(_dataContext.Person.DBID.ToString());
                if (historyUserControl == null)
                {
                    _logger.Warn("GetContactDirectoryUserControl returns null");
                    HistoryTabGrid.Children.Add(GetTextBlock("There is no history found to display."));
                    return;
                }
                else if (historyUserControl != null)
                {
                    HistoryTabGrid.Margin = new Thickness(5);
                    HistoryTabGrid.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                    historyUserControl.Width = HistoryTabGrid.Width;
                    historyUserControl.Height = HistoryTabGrid.Height;
                    HistoryTabGrid.Children.Add(historyUserControl);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error in Loading MyContacts : " + ((ex.InnerException == null) ? ex.Message.ToString() : ex.InnerException.ToString()));
            }
        }

        private void LoadOutboundPlugin()
        {
            try
            {
                var file = Path.Combine(Path.Combine(System.Windows.Forms.Application.StartupPath, "Plugins"), "Pointel.Interactions.Outbound.dll");
                if (File.Exists(file))
                {
                    Assembly asm = Assembly.LoadFile(file);
                    var outboundInterface = (IOutboundPlugin)(from asmType in asm.GetTypes() where asmType.GetInterface("IOutboundPlugin") != null select (IOutboundPlugin)Activator.CreateInstance(asmType)).FirstOrDefault();
                    _plugins.PluginCollections.Add(Pointel.Interactions.IPlugins.Plugins.OutboundPreview, outboundInterface);
                }
                else
                    _logger.Warn("LoadSalesforcePlugin() : Outbound Plug-in dll not exist");
            }
            catch (Exception commonException)
            {
                var reflectionTypeLoadException = commonException as ReflectionTypeLoadException;
                if (reflectionTypeLoadException != null)
                {
                    string error = reflectionTypeLoadException.LoaderExceptions.Aggregate(string.Empty, (current, item) => current + (" " + item.Message));

                    _logger.Error("LoadOutboundPlugin() : " + error);
                }
                else
                    _logger.Error("Error occurred as " + commonException.Message);
            }
        }

        /// <summary>
        /// Loads the salesforce plugin.
        /// </summary>
        private void LoadSalesforcePlugin()
        {
            try
            {
                Datacontext.GetInstance().IsSalesforcePluginEnabled = (ConfigContainer.Instance().AllKeys.Contains("salesforce.enable.plugin") && ConfigContainer.Instance().GetAsBoolean("salesforce.enable.plugin"));
                if (Datacontext.GetInstance().IsSalesforcePluginEnabled)
                {
                    var file = Path.Combine(Path.Combine(System.Windows.Forms.Application.StartupPath, "Plugins"), "Pointel.Salesforce.Adapter.dll");
                    if (File.Exists(file))
                    {
                        Assembly asm = Assembly.LoadFile(file);
                        Type connectorClass = asm.GetTypes().Where(x => x.GetInterface("ISFDCConnector") != null).SingleOrDefault();
                        //.Where(x => x.GetInterface("ISFDCConnector") != null).ToArray();
                        if (connectorClass != null)
                        {
                            var salesforceInterface = (ISFDCConnector)Activator.CreateInstance(connectorClass);
                            _plugins.PluginCollections.Add(Pointel.Interactions.IPlugins.Plugins.Salesforce, salesforceInterface);
                            Datacontext.GetInstance().IsSalesforcePluginAdded = true;
                        }
                    }
                    else
                        _logger.Warn("Sales force enabled, But library is missing.");
                }
            }
            catch (Exception commonException)
            {
                var reflectionTypeLoadException = commonException as ReflectionTypeLoadException;
                if (reflectionTypeLoadException != null)
                {
                    string error = reflectionTypeLoadException.LoaderExceptions.Aggregate(string.Empty, (current, item) => current + (" " + item.Message));

                    _logger.Error("LoadSalesforcePlugin() : " + error);
                }
                else
                    _logger.Error("Error occurred as " + commonException.Message);
            }
        }

        private void LoadStat()
        {
            Dispatcher.BeginInvoke((Action)(delegate
            {
                bool isNeedStat = false;
                if (!_configContainer.AllKeys.Contains("statistics.enable-mystat-aid") ||
                        !((string)_configContainer.GetValue("statistics.enable-mystat-aid")).ToLower().Equals("true"))
                {
                    DataTabControl.Items.Remove(MyStatistics);
                    isNeedStat = false;
                }
                else
                    isNeedStat = true;

                if (!_configContainer.AllKeys.Contains("statistics.enable-ccstat-aid") ||
                        !((string)_configContainer.GetValue("statistics.enable-ccstat-aid")).Equals("true"))
                {
                    DataTabControl.Items.Remove(ContactStatistics);
                    isNeedStat = false;
                }
                else
                    isNeedStat = true;
                if (isNeedStat)
                {
                    StatisticsListener listener = new StatisticsListener();
                    listener.InitialiseStatTicker();
                }
            }), DispatcherPriority.Render);

            //if (_dataContext.IsTeamCommunicatorPluginAdded &&
            //        (_configContainer.AllKeys.Contains("teamcommunicator.enable.plugin") &&
            //            ((string)_configContainer.GetValue("teamcommunicator.enable.plugin")).ToLower().Equals("true")))
            //{
            //    string primaryHost = string.Empty;
            //    string primaryPort = string.Empty;
            //    if (_configContainer.AllKeys.Contains("teamcommunicator.statistics-host"))//primary Host
            //        primaryHost = (string)_configContainer.GetValue("teamcommunicator.statistics-host");
            //    if (_configContainer.AllKeys.Contains("teamcommunicator.statistics-port"))//primary port
            //        primaryPort = (string)_configContainer.GetValue("teamcommunicator.statistics-port");

            //    if (string.IsNullOrEmpty(primaryHost) || string.IsNullOrEmpty(primaryPort))
            //    {
            //        StatisticsListener listener = new StatisticsListener();
            //        listener.RequestTeamCommunicatorStatistics();
            //    }
            //}
        }

        /// <summary>
        /// Loads the team communicator plugin.
        /// </summary>
        /// <returns></returns>
        private bool LoadTeamCommunicatorPlugin()
        {
            try
            {
                var file = Path.Combine(Path.Combine(System.Windows.Forms.Application.StartupPath, "Plugins"), "Pointel.Interactions.TeamCommunicator.dll");
                if (File.Exists(file))
                {
                    Assembly asm = Assembly.LoadFile(file);
                    var teamCommunicatorInterface = (ITeamCommunicatorPlugin)(from asmType in asm.GetTypes() where asmType.GetInterface("ITeamCommunicatorPlugin") != null select (ITeamCommunicatorPlugin)Activator.CreateInstance(asmType)).FirstOrDefault();
                    _plugins.PluginCollections.Add(Pointel.Interactions.IPlugins.Plugins.TeamCommunicator, teamCommunicatorInterface);
                    InitializeTeamCommunicatorValues();
                }
                else
                    _logger.Warn("LoadPlugins : Team communicatorz Plug-in dll not exist");
            }
            catch (Exception generalException)
            {
                var reflectionTypeLoadException = generalException as ReflectionTypeLoadException;
                if (reflectionTypeLoadException != null)
                {
                    string error = reflectionTypeLoadException.LoaderExceptions.Aggregate(string.Empty, (current, item) => current + (" " + item.Message));

                    _logger.Error("Load Team communicator Plugins : " + error);
                }
                else
                {
                    _logger.Error("Error occurred as " + generalException.Message);
                    if (generalException.InnerException != null)
                        _logger.Error("Error occurred in Inner exception as " + generalException.InnerException);
                    if (generalException.StackTrace != null)
                        _logger.Error("Error occurred in StackTrace as " + generalException.StackTrace);
                }
            }
            finally
            {
            }
            return true;
        }

        private void LoadWorkbinPlugin()
        {
            try
            {
                var file = Path.Combine(Path.Combine(System.Windows.Forms.Application.StartupPath, "Plugins"), "Pointel.Interaction.Workbin.dll");
                if (File.Exists(file))
                {
                    Assembly asm = Assembly.LoadFile(file);
                    var workbinInterfrace = (IWorkbinPlugin)(from asmType in asm.GetTypes() where asmType.GetInterface("IWorkbinPlugin") != null select (IWorkbinPlugin)Activator.CreateInstance(asmType)).FirstOrDefault();
                    _plugins.PluginCollections.Add(Pointel.Interactions.IPlugins.Plugins.Workbin, workbinInterfrace);
                    TabWorkbin.Visibility = System.Windows.Visibility.Visible;
                }
                else
                {
                    TabWorkbin.Visibility = System.Windows.Visibility.Visible;
                    _logger.Warn("LoadWorkbinPlugins : Work-bin Plug-in dll not exist");
                }
            }
            catch (Exception generalException)
            {
                var reflectionTypeLoadException = generalException as ReflectionTypeLoadException;
                if (reflectionTypeLoadException != null)
                {
                    var error = reflectionTypeLoadException.LoaderExceptions.Aggregate(string.Empty, (current, item) => current + (" " + item.Message));

                    _logger.Error("LoadWorkbinPlugins : " + error);
                }
                else
                    _logger.Error("Error occurred as " + generalException.Message);
            }
        }

        /// <summary>
        /// Handles the login short cut key to login subscribed medias.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void Login_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string text = "Log On";
                VoiceStateChange(AgentStateType.Channel, text);
            }
            catch (Exception commonException)
            {
                _logger.Error("Logout_Click :" + commonException);
            }
        }

        /// <summary>
        /// Handles the log out short cut key to login subscribed medias.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void Logout_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string text = "Logout";
                VoiceStateChange(AgentStateType.Channel, text);
            }
            catch (Exception commonException)
            {
                _logger.Error("Logout_Click :" + commonException);
            }
        }

        private void menuItemContact_Click(object sender, RoutedEventArgs e)
        {
            if (!contactLoad)
            {
                LoadMyContacts();
                contactLoad = true;
            }

            SetBottomwindow(Datacontext.OpendBy.MyContact.ToString(), true);
        }

        /// <summary>
        ///     Handles the Click event of the menuItemMSG control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void menuItemMSG_Click(object sender, RoutedEventArgs e)
        {
            SetBottomwindow(Datacontext.OpendBy.MyMessage.ToString(), true);
        }

        /// <summary>
        /// Handles the MouseEnter event of the menuItemn2 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseEventArgs"/> instance containing the event data.</param>
        private void menuItemn2_MouseEnter(object sender, MouseEventArgs e)
        {
            //var items = _dataContext.htMediaCurrentState.Values.OfType<string>().Where(s => s == "Logout");
            //if (items != null && _dataContext.htMediaCurrentState.Count == items.Count())
            //{
            //    _dataContext.EnableMenuitems = false;
            //    _dataContext.EnableLogonMenuitem = true;
            //}
            //else if (items != null && items.Count() == 0)
            //{
            //    _dataContext.EnableMenuitems = true;
            //    _dataContext.EnableLogonMenuitem = false;
            //}
            //else
            //{
            //    _dataContext.EnableMenuitems = true;
            //    _dataContext.EnableLogonMenuitem = true;
            //}
            //_dataContext.EnableDNDMenuitems = !_dataContext.isDND;
            GlobalStateMenuItems();
        }

        /// <summary>
        ///     Handles the Click event of the menuItemPro control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void menuItemPro_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var menuitem = sender as MenuItem;
                string selectedMenu = menuitem.Header.ToString().Replace("_", "");
                StatisticsListener._notifyShowMyStatistics -= NotifyShowMyStatistics;
                StatisticsListener._notifyCCStatistics -= NotifyShowCCStatistics;

                #region Old code

                //if (_dataContext.BottomRowHeight == new GridLength(0))
                //{
                //    _dataContext.Bottomwindow = Datacontext.OpendBy.Workspace;
                //    _dataContext.WorksapceTabVisibility = Visibility.Visible;
                //    _dataContext.ContactTabVisibility = Visibility.Hidden;
                //    _dataContext.MessageTabVisibility = Visibility.Hidden;
                //    _dataContext.BottomRowHeight = baseheight;
                //    _isopendbyUser = true;
                //}
                //else
                //{
                //    if (_dataContext.Bottomwindow == Datacontext.OpendBy.MyMessage || _dataContext.Bottomwindow == Datacontext.OpendBy.MyContact)
                //    {
                //        _dataContext.Bottomwindow = Datacontext.OpendBy.Workspace;
                //        _dataContext.WorksapceTabVisibility = Visibility.Visible;
                //        _dataContext.ContactTabVisibility = Visibility.Hidden;
                //        _dataContext.MessageTabVisibility = Visibility.Hidden;
                //        _isopendbyUser = false;
                //    }
                //}

                #endregion Old code

                SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), true);
                _dataContext.TabSelectedIndex = DataTabControl.Items.IndexOf(DataTabControl.Items.Cast<TabItem>().Where(p => p.Header.ToString().Replace("_", "") == selectedMenu).FirstOrDefault());
                if (selectedMenu == "My Channels")
                {
                    InitialloadData();
                }
                if (selectedMenu == "My Statistics")
                {
                    StatisticsListener._notifyShowMyStatistics += NotifyShowMyStatistics;
                }
                if (selectedMenu == "Contact Center Statistics")
                {
                    StatisticsListener._notifyCCStatistics += NotifyShowCCStatistics;
                }
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message.ToString());
            }

            #region Old Code

            //if (selectedMenu == "My Workbin")
            //{
            //    for (var i = 0; i < DataTabControl.Items.Count; i++)
            //    {
            //        var item = DataTabControl.Items.GetItemAt(i) as TabItem;
            //        if (item != null && !item.Name.Equals("TabWorkbin")) continue;
            //        try
            //        {
            //            var win = (UserControl)_objWorbin;

            //            dockWorkbin.Children.Clear();

            //            //dockWorkbin.Width = _windowWidth - 90;
            //            dockWorkbin.Height = win.Height;

            //            dockWorkbin.Children.Add(win);

            //            DataContext = Datacontext.GetInstance();

            //            _dataContext.TabSelectedIndex = i;
            //            _isopendbyUser = true;
            //            DataTabControl.SelectedIndex = i;

            //            //InitialloadData();
            //        }
            //        catch (Exception exception)
            //        {
            //            _logger.Error("menuItemPro_Click" + exception);
            //        }
            //    }
            //}
            //if (selectedMenu == "My Channels")
            //{
            //    InitialloadData();
            //    _dataContext.TabSelectedIndex = 0;
            //}
            //if (selectedMenu == "My Statistics")
            //{
            //    _dataContext.TabSelectedIndex = 1;
            //}
            //if (selectedMenu == "Contact Center Statistics")
            //{
            //    _dataContext.TabSelectedIndex = 2;
            //}
            //if (selectedMenu == "My Skills")
            //{
            //    for (int i = 0; i < DataTabControl.Items.Count; i++)
            //    {
            //        var item = DataTabControl.Items.GetItemAt(i) as TabItem;
            //        if (item.Name.Equals("TabMySkills"))
            //        {
            //            DataTabControl.SelectedIndex = i;
            //        }
            //    }
            //}

            //if (selectedMenu == "My Workbin")
            //{
            //    _dataContext.TabSelectedIndex = 3;
            //}

            #endregion Old Code
        }

        /// <summary>
        ///     Handles the Click event of the menuItem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        private void menuItem_Click(object sender, EventArgs e)
        {
            var menuItem = (MenuItem)sender;
            if (menuItem.Name == "Exit")
            {
                try
                {
                    if (!Datacontext.isRinging && !_dataContext.IsOnChatIXN && !_dataContext.IsOnEmailIXN && !_dataContext.isOnCall)
                    {
                        bool isApplicationClosing = false;
                        string text = string.Empty;
                        var count = _dataContext.htMediaCurrentState.Values.OfType<string>().Count(s => ((s != "Logout" && s != "Out Of Service" && !s.Contains("(Do Not Disturb)")) || s == "Do Not Disturb"));
                        if (string.IsNullOrEmpty(count.ToString())) return;
                        if (Convert.ToInt16(count) > 1)
                            text = "Are you sure that you want to logout all channels and exit from the application?";
                        else if (Convert.ToInt16(count) == 1)
                            text = "Are you sure that you want to logout and exit from the application?";
                        else if (Convert.ToInt16(count) == 0)
                        {
                            ChangeStatGadgetState();
                            CloseStatGadget();
                            UnsubscribeThirdParty();
                            UnsubscribeSalesForce();
                            Environment.Exit(0);
                        }
                        if (!string.IsNullOrEmpty(text))
                        {
                            if (_configContainer.AllKeys.Contains("voice.enable.popup-disposition") &&
                                 (_configContainer.GetAsBoolean("voice.enable.popup-disposition")) && (_dispositionForm != null && _dispositionForm.IsVisible))
                            {
                                var showMessageBox1 = new MessageBox("Information", "Unable to close the application while the disposition form is open.", "", "_Ok", false);
                                showMessageBox1.Name = "MessageWindow";
                                showMessageBox1.Owner = this;
                                showMessageBox1.ShowDialog();
                                return;
                            }
                            var showMessageBox = new MessageBox("Information", text, "_Yes", "_No", false);
                            showMessageBox.Name = "MessageWindow";
                            showMessageBox.Owner = this;
                            showMessageBox.ShowDialog();
                            if (showMessageBox.DialogResult == true)
                            {
                                isApplicationClosing = true;
                                showMessageBox.Dispose();
                                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
                                    if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() != "Logout")
                                        VoiceStateChange(AgentStateType.Channel, "Logout");
                                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email))
                                    if (_dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString() != "Logout")
                                        InteractionsMediaStateChange(Datacontext.Channels.Email, "Logout");
                                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                                    if (_dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString() != "Logout")
                                        InteractionsMediaStateChange(Datacontext.Channels.Chat, "Logout");
                                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email) || _dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                                    interactionService.UnRegisterClient(_dataContext.ProxyID);
                            }
                            else
                            {
                                isApplicationClosing = false;
                                //e.Cancel = true;
                            }
                        }

                        if (isApplicationClosing)
                        {
                            if ((_configContainer.AllKeys.Contains("broadcast.dn") && !string.IsNullOrEmpty(_configContainer.GetValue("broadcast.dn")))
                               && (_configContainer.AllKeys.Contains("voice.enable.broadcast") &&
                               ((string)_configContainer.GetValue("voice.enable.broadcast")).ToLower().Equals("true")))
                            {
                                var softPhine = new SoftPhone();
                                softPhine.UnRegister(_configContainer.GetValue("broadcast.dn"));
                                softPhine = null;
                            }
                            winHideTimer.Tick -= winHideTimer_Tick;
                            SystemEvents.SessionSwitch -= SystemEvents_SessionSwitch;
                            StateChanged -= Window_StateChanged;
                            if (notifyIcon != null)
                            {
                                notifyIcon.Icon = null;
                                notifyIcon.Dispose();
                                notifyIcon = null;
                            }
                            ClearClipboard();

                            ChangeStatGadgetState();
                            CloseStatGadget();
                            UnsubscribeThirdParty();
                            UnsubscribeSalesForce();
                            Environment.Exit(0);
                        }
                    }
                    else
                    {
                        var showMessageBox = new MessageBox("Information", "Unable to close the application while you are in interaction.", "", "_Ok", false);
                        showMessageBox.Name = "MessageWindow";
                        showMessageBox.Owner = this;
                        showMessageBox.ShowDialog();
                    }
                }
                catch (Exception commonException)
                {
                    _logger.Error("SoftphoneBar:btnExit_Click:" + commonException);
                }
            }
            else if (menuItem.Name == "Normal")
            {
                WindowState = WindowState.Normal;
            }
            else if (menuItem.Name == "Aboutus")
            {
                if (!_dataContext.IsAboutOpened)
                {
                    _aboutus = new About();
                    _aboutus.Show();
                    _dataContext.IsAboutOpened = true;
                }
                else if (_aboutus != null)
                {
                    _aboutus.Blink();
                }
            }
            else if (menuItem.Name == "Help")
            {
                try
                {
                    if (File.Exists(Environment.CurrentDirectory.ToString() + @"\AID_User Manual.chm"))
                        System.Windows.Forms.Help.ShowHelp(null, Environment.CurrentDirectory.ToString() + @"\AID_User Manual.chm");
                    else
                    {
                        MessageBox msg = new MessageBox("Information", "Currently Help file is not available.", "", "_Ok", false);
                        msg.Name = "Help";
                        msg.Owner = this;
                        msg.ShowDialog();
                    }
                }
                catch (Exception ex)
                {
                    _logger.Error("SoftPhone Bar : menuItem_Click() " + ex.Message.ToString());
                }
            }
            else if (menuItem.Name == "StatGadget")
            {
                //if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Statistic))
                //{
                if (_dataContext.NotifyGadgetDisplayName == "Show Stat Gadget")
                {
                    //((IPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Statistic]).ShowGadget(false);
                    StatisticHelperClient.SendRequest(StatRequest.Show);
                    _dataContext.GadgetState = "Opened";
                    _dataContext.NotifyGadgetDisplayName = "Close Stat Gadget";
                }
                else
                {
                    try
                    {
                        //((IPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Statistic]).CloseGadget();
                        StatisticHelperClient.SendRequest(StatRequest.Hide);
                        _isStatGadgetClosedByUser = true;
                        _dataContext.GadgetState = "Closed";
                        _dataContext.NotifyGadgetDisplayName = "Show Stat Gadget";
                    }
                    catch (Exception ex)
                    {
                        _logger.Error("Error occurred as " + ex.Message);
                    }
                }
                //}
            }
        }

        /// <summary>
        ///     Handles the Click event of the menuVoiceNotReadyCode control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void menuVoiceNotReadyCode_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var menuitem = sender as MenuItem;
                string selectedMenu = menuitem.Header.ToString();
                _dataContext.isAgentExtendACWTime = true;
                if (!_configContainer.AllKeys.Contains("VoiceNotReadyReasonCodes")) return;

                if (((Dictionary<string, string>)_configContainer.GetValue("VoiceNotReadyReasonCodes")).ContainsKey(selectedMenu))
                {
                    string keyCode = ((Dictionary<string, string>)_configContainer.GetValue("VoiceNotReadyReasonCodes"))[selectedMenu];
                    _dataContext.IsAgentClickedReady = false;
                    var softNotReady = new SoftPhone();
                    softNotReady.NotReady(selectedMenu, keyCode);
                    softNotReady = null;
                    _isNrReasonCode = true;
                    _dataContext.VoiceNotReadyReasonCode = selectedMenu;
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        /// <summary>
        ///     Handles the Click event of the mnuAdd control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        private void mnuAdd_Click(object sender, RoutedEventArgs e)
        {
            var skillWindow = IsWindowOpen<Window>("UserSkills");
            if (skillWindow != null && _dataContext.IsEditSkill)
            {
                skillWindow.Close();
                var skills = new Skills();
                _dataContext.IsEditSkill = false;
                skills.Show();
            }
            else if (skillWindow != null && !_dataContext.IsEditSkill)
            {
                var skills = (Skills)skillWindow;
                _dataContext.IsEditSkill = false;
                skills.Blink();
            }
            else
            {
                var skills = new Skills();
                _dataContext.IsEditSkill = false;
                skills.Show();
            }
        }

        /// <summary>
        ///     Handles the Click event of the mnuDelete control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        private void mnuDelete_Click(object sender, RoutedEventArgs e)
        {
            var skillWindow = IsWindowOpen<Window>("UserSkills");
            if (skillWindow != null)
                skillWindow.Close();
            var showMessageBox = new MessageBox("Information",
                "Are you sure that you want to Delete the skill from the agent", "_Yes", "_No", false);
            showMessageBox.Name = "SkillWindow";
            showMessageBox.Owner = this;
            showMessageBox.ShowDialog();
            if (showMessageBox.DialogResult == true)
            {
                showMessageBox.Dispose();
                string skillToDelete = "";
                if (_dataContext.EditingSkill != null && _dataContext.EditingSkill.Count > 0)
                    skillToDelete = _dataContext.EditingSkill.FirstOrDefault().Key;
                ComClass.DeleteSkillFromAgent(_dataContext.UserName, skillToDelete);
            }
        }

        /// <summary>
        ///     Handles the Click event of the mnuEdit control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        private void mnuEdit_Click(object sender, RoutedEventArgs e)
        {
            var skillWindow = IsWindowOpen<Window>("UserSkills");
            if (skillWindow != null)// && _dataContext.IsEditSkill && _dataContext.CurrentEditingSkill == _dataContext.EditingSkill.Keys.First())
            {
                if (!_dataContext.IsEditSkill)
                {//Previous window is adding skill
                    skillWindow.Close();
                    var skills = new Skills();
                    _dataContext.IsEditSkill = true;
                    skills.Show();
                }
                else if (_dataContext.IsEditSkill && _dataContext.CurrentEditingSkill == _dataContext.EditingSkill.Keys.First())
                {//Previous window is editing this same skill
                    var skills = (Skills)skillWindow;
                    _dataContext.IsEditSkill = true;
                    skills.Blink();
                }
                else
                {//Previous window is editing other skill
                    skillWindow.Close();
                    var skills = new Skills();
                    _dataContext.IsEditSkill = true;
                    skills.Show();
                }
            }
            else
            {
                var skills = new Skills();
                _dataContext.IsEditSkill = true;
                skills.Show();
            }
        }

        /// <summary>
        ///     Mouses the left button down.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="MouseButtonEventArgs" /> instance containing the event data.</param>
        private void MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (e.ClickCount > 1)
                    e.Handled = true;
                //if (sender is TextBlock && _configContainer.AllKeys.Contains("voice.acw.enabled")
                //                    && ((string)_configContainer.GetValue("voice.acw.enabled")).ToLower().Equals("true"))
                //{
                if (sender is TextBlock)
                {
                    var txtStatus = (TextBlock)sender;
                    if (txtStatus.Name.Equals("lblTitleStatus"))
                    {
                        if (txtStatus.Text.Contains("After Call Work"))
                            _dataContext.isAgentExtendACWTime = true;
                    }
                }
                //}
                DragMove();
                if (!(_configContainer.AllKeys.Contains("allow.system-draggable") &&
                        ((string)_configContainer.GetValue("allow.system-draggable")).ToLower().Equals("true")))
                {
                    if (Left < 0)
                        Left = 0;
                    if (Top < 0)
                        Top = 0;
                    if (Left > SystemParameters.WorkArea.Right - Width)
                        Left = SystemParameters.WorkArea.Right - Width;
                    if (Top > SystemParameters.WorkArea.Bottom - Height)
                        Top = SystemParameters.WorkArea.Bottom - Height < 0.0 ? 0.0 : SystemParameters.WorkArea.Bottom - Height;
                }
            }
            catch (Exception commonException)
            {
                _logger.Warn("Error occurred as " + commonException.Message.ToString());
            }
        }

        private void mySkillNotification(string skillName, string skillLevel, Pointel.Configuration.Manager.Helpers.ConfigValue.CFGOperation operation)
        {
            KeyValueCollection errorMessage = new KeyValueCollection();
            if (operation == Pointel.Configuration.Manager.Helpers.ConfigValue.CFGOperation.Delete)
            {
                errorMessage.Add("IWS_Message",
                                  "Skill (" + skillName + ")");
                errorMessage.Add("IWS_Subject", "Skill Deleted....");
            }
            if (operation == Pointel.Configuration.Manager.Helpers.ConfigValue.CFGOperation.Update)
            {
                errorMessage.Add("IWS_Message",
                                "Skill (" + skillName + " @ " + skillLevel + ")");
                errorMessage.Add("IWS_Subject", "Skill Updated....");
            }
            if (operation == Pointel.Configuration.Manager.Helpers.ConfigValue.CFGOperation.Add)
            {
                errorMessage.Add("IWS_Message",
                                "Skill (" + skillName + " @ " + skillLevel + ")");
                errorMessage.Add("IWS_Subject", "Skill Added....");
            }
            errorMessage.Add("IWS_Sender", "System");
            errorMessage.Add("IWS_Priority", "3");
            errorMessage.Add("IWS_MessageType", "System");
            errorMessage.Add("IWS_Date", DateTime.Now.ToString());
            errorMessage.Add("IWS_Topic", _dataContext.UserName);
            GettingUserData(VoiceEvents.None, errorMessage);
        }

        private void NotifyAgentIXNProxyID()
        {
            if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact))
                ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).NotifyAgentLogin(true, _dataContext.ProxyID);
        }

        /// <summary>
        /// Handles the TrayLeftMouseUp event of the notifyIcon control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void notifyIcon_TrayLeftMouseUp(object sender, RoutedEventArgs e)
        {
            InitialloadData();
        }

        private void NotifyToSalesorce(object objMessage)
        {
            try
            {
                if (objMessage != null)
                {
                    IMessage message = objMessage as IMessage;
                    if (message.Name == EventAttachedDataChanged.MessageName && isDispositionUpdate)
                    {
                        if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Salesforce))
                            ((ISFDCConnector)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Salesforce]).NotifyVoiceDispositionCode(message);
                        return;
                    }
                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Salesforce))
                        ((ISFDCConnector)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Salesforce]).NotifyInteractionEvents(message);
                }
            }
            catch (Exception _generalException)
            {
                _logger.Error("Error Occurred as " + _generalException.Message);
            }
        }

        private void NotifyVoiceMediaStatus(string currentStatus)
        {
            try
            {
                if (string.IsNullOrEmpty(currentStatus)) return;
                switch (currentStatus)
                {
                    case "SwitchDisconnected":
                    case "ServerDisconnected":
                    case "Out Of Service":
                    case "OnCall":
                    case "CallRinging":
                    case "CallDialing":
                    case "OnHold":
                    case "Logout":
                    case "OnRetrieve":
                        _voiceCurrentStatus = false;
                        if (_prevVoiceStatus != _voiceCurrentStatus)
                        {
                            _prevVoiceStatus = _voiceCurrentStatus;
                            if (PluginCollection.GetInstance().PluginCollections.ContainsKey(Plugins.Chat))
                            {
                                ((IChatPlugin)PluginCollection.GetInstance().PluginCollections[Plugins.Chat]).NotifyVoiceMediaStatus(_voiceCurrentStatus);
                            }
                            if (PluginCollection.GetInstance().PluginCollections.ContainsKey(Plugins.Email))
                            {
                                ((IEmailPlugin)PluginCollection.GetInstance().PluginCollections[Plugins.Email]).NotifyVoiceMediaStatus(_voiceCurrentStatus);
                            }
                            if (PluginCollection.GetInstance().PluginCollections.ContainsKey(Plugins.Contact))
                            {
                                ((IContactPlugin)PluginCollection.GetInstance().PluginCollections[Plugins.Contact]).NotifyVoiceMediaStatus(_voiceCurrentStatus);
                            }
                        }

                        break;

                    case "ServerConnected":
                    case "SwitchConnected":
                    case "Ready":
                    case "NotReady":
                    case "AfterCallWork":
                    case "OnRelease":
                    case "Abandoned":
                        _voiceCurrentStatus = true;
                        if (_prevVoiceStatus != _voiceCurrentStatus)
                        {
                            _prevVoiceStatus = _voiceCurrentStatus;
                            if (PluginCollection.GetInstance().PluginCollections.ContainsKey(Plugins.Chat))
                            {
                                ((IChatPlugin)PluginCollection.GetInstance().PluginCollections[Plugins.Chat]).NotifyVoiceMediaStatus(_voiceCurrentStatus);
                            }
                            if (PluginCollection.GetInstance().PluginCollections.ContainsKey(Plugins.Email))
                            {
                                ((IEmailPlugin)PluginCollection.GetInstance().PluginCollections[Plugins.Email]).NotifyVoiceMediaStatus(_voiceCurrentStatus);
                            }
                            if (PluginCollection.GetInstance().PluginCollections.ContainsKey(Plugins.Contact))
                            {
                                ((IContactPlugin)PluginCollection.GetInstance().PluginCollections[Plugins.Contact]).NotifyVoiceMediaStatus(_voiceCurrentStatus);
                            }
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred while sending voice media status to email and chat media : " + ((ex.InnerException == null) ? ex.Message : ex.InnerException.ToString()));
            }
        }

        /// <summary>
        /// Handles the Click event of the Not ready control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void NotReady_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string text = "Not Ready";
                VoiceStateChange(AgentStateType.Channel, text);
            }
            catch (Exception commonException)
            {
                _logger.Error("NotReady_Click :" + commonException);
            }
        }

        /// <summary>
        /// Opens the consult call selection.
        /// </summary>
        /// <param name="dialpadtype">The dialpadtype.</param>
        /// <param name="PlacementTargetButton">The placement target button.</param>
        private void OpenConsultCallSelection(Datacontext.DialPadType dialpadtype, Button PlacementTargetButton)
        {
            try
            {
                _logger.Debug("Opening ConsultCallSelection Window - ConsultCallSelection type: " + dialpadtype);
                //changed true to false - smoorthy
                //15-11-2013
                _dataContext.IsInitiateTransClicked = false;
                //end
                _dataContext.IsInitiateConfClicked = false;
                var view = new ConsulCallSelection(dialpadtype);
                view.eventFireBackNum += CallBack_btnevent;
                var grid = new Grid();
                grid.Background = Brushes.White;
                grid.Children.Add(view);
                var menuConsultItem = new MenuItem();
                menuConsultItem.StaysOpenOnClick = true;
                menuConsultItem.Background = Brushes.Transparent;
                menuConsultItem.Header = grid;
                menuConsultItem.Margin = new Thickness(-12, -8, -18, -6);
                menuConsultItem.Width = Double.NaN;
                _dataContext.cmshow.Items.Clear();
                _dataContext.cmshow.Items.Add(menuConsultItem);
                _dataContext.cmshow.Style = (Style)FindResource("Contextmenu");
                _dataContext.cmshow.StaysOpen = true;
                _dataContext.cmshow.PlacementTarget = PlacementTargetButton;
                _dataContext.cmshow.Placement = PlacementMode.Bottom;
                _dataContext.cmshow.IsOpen = true;
                _dataContext.cmshow.Focus();
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred while opening ConsultCallSelection window: " + ex.Message);
            }
        }

        /// <summary>
        /// Opens the dial pad.
        /// </summary>
        /// <param name="dialpadtype">The dialpadtype.</param>
        /// <param name="PlacementTargetButton">The placement target button.</param>
        private void OpenDialPad(Datacontext.DialPadType dialpadtype, Button PlacementTargetButton)
        {
            try
            {
                _logger.Debug("Opening DialPad Window - Dialpad type: " + dialpadtype);
                _dataContext.IsInitiateTransClicked = false;
                _dataContext.IsInitiateConfClicked = false;
                //Code added by vinoth 19 11 2013.
                if (dialpad != null)
                {
                    dialpad.eventFireBackNum -= WriteToTargetDN;
                    dialpad = null;
                }
                //End
                dialpad = new DialPad(dialpadtype);
                dialpad.eventFireBackNum += WriteToTargetDN;
                //if (_dataContext.UserSetConfType == Datacontext.ConsultType.OneStep ||
                //    _dataContext.UserSetTransType == Datacontext.ConsultType.OneStep)
                //    dialpad.ReloadUI(true);
                //else
                //    dialpad.ReloadUI(false);
                var menuConsultItem = new MenuItem();
                menuConsultItem.StaysOpenOnClick = true;
                menuConsultItem.Background = Brushes.Transparent;
                menuConsultItem.Header = dialpad;
                menuConsultItem.Margin = new Thickness(-12, -3, -18, -3);
                menuConsultItem.Width = Double.NaN;
                _dataContext.cmshow.Items.Clear();
                _dataContext.cmshow.Items.Add(menuConsultItem);
                _dataContext.cmshow.Style = (Style)FindResource("Contextmenu");
                _dataContext.cmshow.StaysOpen = true;
                _dataContext.cmshow.PlacementTarget = PlacementTargetButton;
                _dataContext.cmshow.Placement = PlacementMode.Bottom;
                _dataContext.cmshow.IsOpen = true;
                _dataContext.cmshow.Focus();
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred while opening dialpad window: " + ex.Message);
            }
        }

        private void OutboundStateChange(AgentStateType type, string state)
        {
            this.Dispatcher.BeginInvoke((Action)(delegate
            {
                if (!_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.OutboundPreview)) return;
                if (!_dataContext.htMediaCurrentState[Datacontext.Channels.OutboundPreview].ToString().Contains("Logout [Pending]"))
                    if (_dataContext.htMediaCurrentState[Datacontext.Channels.OutboundPreview].ToString().Contains("[Pending]") && state == "Log On") return;
                Pointel.Interactions.Core.Common.OutputValues output = null;
                InteractionService interactionService = new InteractionService();
                if (!state.Contains("Logout") && _dataContext.isIXNDND)
                {
                    if ((state.Contains("Log On") && (_configContainer.AllKeys.Contains("login.outbound.enable.auto-ready") &&
                                         ((string)_configContainer.GetValue("login.outbound.enable.auto-ready")).ToLower().Equals("true"))) || (state.Contains("Log On") && _dataContext.isIXNDND) || state.Contains("Ready") || state.Contains("Not Ready"))
                    {
                        Pointel.Interactions.Core.Common.OutputValues outPutDndOff = interactionService.AgentDoNotDisturbOff(_dataContext.ProxyID);
                        if (outPutDndOff.MessageCode == "200")
                        {
                            if (_dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString().Contains("[Pending]"))
                            {
                                switch (InteractionHandler.AgentEmailState)
                                {
                                    case "Ready":
                                        _dataContext.EmailStateImageSource = _imageDatacontext.ImgReadyStatus;
                                        //_dataContext.EmailStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png",
                                        // UriKind.Relative));
                                        break;

                                    case "Do Not Disturb":
                                        _dataContext.EmailStateImageSource = _imageDatacontext.ImgDNDStatus;
                                        //_dataContext.EmailStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/DontDis.png",
                                        //UriKind.Relative));
                                        break;

                                    case "Logout":
                                        _dataContext.EmailStateImageSource = _imageDatacontext.ImgLogoutStatus;
                                        //_dataContext.EmailStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png",
                                        // UriKind.Relative));
                                        break;

                                    default:
                                        _dataContext.EmailStateImageSource = _imageDatacontext.ImgNotReadyStatus;
                                        //_dataContext.EmailStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                        //  UriKind.Relative));
                                        break;
                                }
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Email] = InteractionHandler.AgentEmailState + " [Pending]";
                                SoftPhoneBar_channelStates("Email", _dataContext.EmailStateImageSource,
                                            _dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString(), Visibility.Collapsed, "[00:00:00]");
                            }
                            else
                                _ixnHandler.ChangeEmailStatus(InteractionHandler.AgentEmailState);
                            if (_dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString().Contains("[Pending]"))
                            {
                                switch (InteractionHandler.AgentChatState)
                                {
                                    case "Ready":
                                        _dataContext.ChatStateImageSource = _imageDatacontext.ImgReadyStatus;
                                        //_dataContext.ChatStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png",
                                        //    UriKind.Relative));
                                        break;

                                    case "Do Not Disturb":
                                        _dataContext.ChatStateImageSource = _imageDatacontext.ImgDNDStatus;
                                        //_dataContext.ChatStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/DontDis.png",
                                        //    UriKind.Relative));
                                        break;

                                    case "Logout":
                                        _dataContext.ChatStateImageSource = _imageDatacontext.ImgLogoutStatus;
                                        //_dataContext.ChatStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png",
                                        //    UriKind.Relative));
                                        break;

                                    default:
                                        _dataContext.ChatStateImageSource = _imageDatacontext.ImgNotReadyStatus;
                                        //_dataContext.ChatStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                        //    UriKind.Relative));
                                        break;
                                }
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Chat] = InteractionHandler.AgentChatState + " [Pending]";
                                SoftPhoneBar_channelStates("Chat", _dataContext.ChatStateImageSource,
                                            _dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString(), Visibility.Collapsed, "[00:00:00]");
                            }
                            else
                                _ixnHandler.ChangeEmailStatus(InteractionHandler.AgentChatState);
                            _ixnHandler.ChangeChatStatus(InteractionHandler.AgentOutboundState);
                        }
                    }
                }

                switch (state)
                {
                    case "Ready":
                        output = interactionService.AgentReady(_dataContext.ProxyID, Datacontext.Channels.OutboundPreview.ToString().ToLower());
                        break;

                    case "Not Ready":
                        if (InteractionHandler.AgentOutboundState != state && !InteractionHandler.AgentOutboundState.Contains("Not Ready -"))
                            output = interactionService.AgentNotReady(_dataContext.ProxyID, Datacontext.Channels.OutboundPreview.ToString().ToLower());
                        else
                            output = interactionService.AgentNotReadyWithReason(_dataContext.ProxyID, Datacontext.Channels.OutboundPreview.ToString().ToLower(), state, "0");
                        break;

                    case "Logout":
                        output = interactionService.RemoveMedia(_dataContext.ProxyID, Datacontext.Channels.OutboundPreview.ToString().ToLower());
                        if (output.MessageCode == "200") state = "Logout";
                        break;

                    case "Log On":
                        output = interactionService.AddMedia(_dataContext.ProxyID, Datacontext.Channels.OutboundPreview.ToString().ToLower());
                        if (output.MessageCode == "200")
                        {
                            if (_configContainer.AllKeys.Contains("login.outbound.enable.auto-ready") &&
                                         ((string)_configContainer.GetValue("login.outbound.enable.auto-ready")).ToLower().Equals("true"))
                            {
                                if (!_dataContext.isIXNDND)
                                {
                                    interactionService.AgentReady(_dataContext.ProxyID, Datacontext.Channels.OutboundPreview.ToString().ToLower());
                                    state = "Ready";
                                }
                            }
                            else
                            {
                                if (_dataContext.isIXNDND)
                                {
                                    state = "Do Not Disturb";
                                    InteractionHandler.AgentOutboundState = "Not Ready";
                                }
                                else
                                {
                                    output = interactionService.AgentNotReadyWithReason(_dataContext.ProxyID, Datacontext.Channels.OutboundPreview.ToString().ToLower(), state, "0");
                                    state = "Not Ready";
                                }
                            }
                        }
                        if (output.ErrorCode == 34)
                        {
                            Dictionary<string, int> tempDic = new Dictionary<string, int>();
                            tempDic.Add(Datacontext.Channels.OutboundPreview.ToString().ToLower(), (((string)_configContainer.GetValue("login.outbound.enable.auto-ready")).ToLower().Equals("true") ? 1 : 0));
                            output = interactionService.AgentLogin(_dataContext.AgentID, _dataContext.Place, _dataContext.ProxyID, _configContainer.TenantDbId, tempDic);
                            tempDic = null;
                            output.ErrorCode = 0;
                            if (output.MessageCode != "200") break;
                            if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                            {
                                ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).WorkbinFlag(true);
                                ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).NotifyAgentLogin(true);
                                RegisterWorkbinNotification();
                            }
                            //CR by sakthi - 10-09-2015
                            // Added to notify the Email State Information to contact Plugin.
                            if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact))
                            {
                                ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).NotifyEmailMediaState(true);
                            }
                            NotifyAgentIXNProxyID();
                            if (_configContainer.AllKeys.Contains("login.outbound.enable.auto-ready") &&
                                         ((string)_configContainer.GetValue("login.outbound.enable.auto-ready")).ToLower().Equals("true"))
                                state = "Ready";
                            else
                                state = "Not Ready";

                            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email))
                                _ixnHandler.ChangeEmailStatus(InteractionHandler.AgentEmailState);
                            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                                _ixnHandler.ChangeChatStatus(InteractionHandler.AgentChatState);
                        }

                        break;

                    case "Do Not Disturb":
                        output = interactionService.AgentDoNotDisturbOn(_dataContext.ProxyID);
                        if (output.MessageCode == "200")
                        {
                            _dataContext.isIXNDND = true;
                            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.OutboundPreview))
                            {
                                if (_dataContext.htMediaCurrentState[Datacontext.Channels.OutboundPreview].ToString().Contains("Logout"))
                                    state = "Logout";
                            }
                            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email))
                            {
                                if (_dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString().Contains("Logout"))
                                    _ixnHandler.ChangeEmailStatus("Logout (Do Not Disturb)");
                                else if (_dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString().Contains("[Pending]"))
                                {
                                    _dataContext.EmailStateImageSource = _imageDatacontext.ImgDNDStatus;
                                    //_dataContext.EmailStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/DontDis.png",
                                    //UriKind.Relative));
                                    _dataContext.htMediaCurrentState[Datacontext.Channels.Email] = state + " [Pending]";
                                    SoftPhoneBar_channelStates("Email", _dataContext.EmailStateImageSource,
                                                _dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString(), Visibility.Collapsed, "[00:00:00]");
                                }
                                else
                                    _ixnHandler.ChangeEmailStatus("Do Not Disturb");
                            }
                            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                            {
                                if (_dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString().Contains("Logout"))
                                    _ixnHandler.ChangeChatStatus("Logout (Do Not Disturb)");
                                else if (_dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString().Contains("[Pending]"))
                                {
                                    _dataContext.ChatStateImageSource = _imageDatacontext.ImgDNDStatus;
                                    //_dataContext.ChatStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/DontDis.png",
                                    //UriKind.Relative));
                                    _dataContext.htMediaCurrentState[Datacontext.Channels.Chat] = state + " [Pending]";
                                    SoftPhoneBar_channelStates("Chat", _dataContext.ChatStateImageSource,
                                                _dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString(), Visibility.Collapsed, "[00:00:00]");
                                }
                                else
                                    _ixnHandler.ChangeChatStatus("Do Not Disturb");
                            }
                        }
                        break;

                    default:
                        if (state.Contains("Not Ready"))
                        {
                            string tempState = state.Replace("Not Ready - ", "");
                            string keyCode = string.Empty;
                            switch (type)
                            {
                                case AgentStateType.Global:
                                    if (_configContainer.AllKeys.Contains("GlobalNotReadyReasonCodes"))
                                    {
                                        if (((Dictionary<string, string>)_configContainer.GetValue("GlobalNotReadyReasonCodes")).ContainsKey(tempState))
                                            keyCode = ((Dictionary<string, string>)_configContainer.GetValue("GlobalNotReadyReasonCodes"))[tempState];
                                    }
                                    break;

                                case AgentStateType.Channel:
                                    if (_configContainer.AllKeys.Contains("OutboundNotReadyReasonCodes"))
                                    {
                                        if (((Dictionary<string, string>)_configContainer.GetValue("OutboundNotReadyReasonCodes")).ContainsKey(tempState))
                                            keyCode = ((Dictionary<string, string>)_configContainer.GetValue("OutboundNotReadyReasonCodes"))[tempState];
                                    }
                                    break;

                                default:
                                    keyCode = string.Empty;
                                    break;
                            }
                            if (InteractionHandler.AgentOutboundState == "Ready")
                                output = interactionService.AgentNotReady(_dataContext.ProxyID, Datacontext.Channels.OutboundPreview.ToString().ToLower());
                            if (!string.IsNullOrEmpty(keyCode))
                                output = interactionService.AgentNotReadyWithReason(_dataContext.ProxyID, Datacontext.Channels.OutboundPreview.ToString().ToLower(), state, keyCode);
                        }
                        break;
                }
                if (_dataContext.IsOnChatIXN && state != "Log On")
                {
                    if (output.MessageCode == "200" || output.MessageCode == "2002")
                    {
                        switch (state)
                        {
                            case "Ready":
                                _dataContext.OutboundStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png",
                                    UriKind.Relative));
                                break;

                            case "Do Not Disturb":
                                _dataContext.OutboundStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/DontDis.png",
                                    UriKind.Relative));
                                break;

                            case "Logout":
                                _dataContext.OutboundStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png",
                                    UriKind.Relative));
                                break;

                            default:
                                _dataContext.OutboundStateImageSource = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                    UriKind.Relative));
                                break;
                        }
                        if (!state.Contains("Do Not Disturb"))
                            InteractionHandler.AgentOutboundState = state;
                        _dataContext.htMediaCurrentState[Datacontext.Channels.OutboundPreview] = state + " [Pending]";
                        SoftPhoneBar_channelStates("OutboundPreview", _dataContext.OutboundStateImageSource,
                                    _dataContext.htMediaCurrentState[Datacontext.Channels.OutboundPreview].ToString(), Visibility.Collapsed, "[00:00:00]");
                    }
                }
                else
                {
                    if (output.ErrorCode == 34 || output.ErrorCode == 69)
                        output = null;
                    if (output != null && (output.MessageCode == "200" || output.MessageCode == "2002"))
                    {
                        if (state.Contains("Logout") && _dataContext.isIXNDND)
                        {
                            InteractionHandler.AgentOutboundState = state;
                            state = state + " (Do Not Disturb)";
                        }
                        if (!state.Contains("Do Not Disturb"))
                            InteractionHandler.AgentOutboundState = state;
                        _ixnHandler.ChangeOutboundStatus(state);
                    }
                }
                output = null;
            }));
        }

        private void OutboundStateMenu_Click(object sender, RoutedEventArgs e)
        {
            MenuItem menuitem = sender as MenuItem;
            OutboundStateChange(AgentStateType.Channel, (menuitem.Header.ToString() == "Log Off" ? "Logout" : menuitem.Header.ToString()));
        }

        private string PrefixDialedNumber(string dialedNumber)
        {
            dialedNumber = dialedNumber.Trim();
            string prefix = "";
            bool addPrefix = false;
            try
            {
                if (_configContainer.AllKeys.Contains("voice.enable.dial-prefix")
                    && Convert.ToBoolean(_configContainer.GetValue("voice.enable.dial-prefix")))
                    addPrefix = true;
            }
            catch
            {
                _logger.Warn("Prefix numbers may not work. config key has invalid value "
                    + "voice.enable.dial-prefix" + (string)_configContainer.GetValue("voice.enable.dial-prefix"));
            }
            if (addPrefix)
            {
                if (dialedNumber.Length == 7)
                {
                    if (_configContainer.AllKeys.Contains("voice.internal.number-codes"))
                    {
                        var inc = ((string)_configContainer.GetValue("voice.internal.number-codes"));
                        if (!string.IsNullOrEmpty(inc))
                        {
                            var inc1 = inc.Split(',');
                            if (!inc1.Any(pre => dialedNumber.StartsWith(pre)))
                                goto LNP;
                            else
                                goto LASTEND;
                        }
                    }
                    else
                        goto LASTEND;
                }
                else if (dialedNumber.Length == 10)
                {
                    if (_configContainer.AllKeys.Contains("voice.local.number.area-codes"))
                    {
                        var lac = ((string)_configContainer.GetValue("voice.local.number.area-codes"));
                        if (!string.IsNullOrEmpty(lac))
                        {
                            var lac1 = lac.Split(',');
                            if (lac1.Any(pre => dialedNumber.StartsWith(pre)))
                                goto LNP;
                            else
                                goto LDP;
                        }
                    }
                    else
                        goto LASTEND;
                }
                else
                    goto LASTEND;

            LNP:
                if (_configContainer.AllKeys.Contains("voice.local.number-prefix"))
                    prefix = (string)_configContainer.GetValue("voice.local.number-prefix");
                goto END;
            LDP:
                if (_configContainer.AllKeys.Contains("voice.long.distance-prefix"))
                    prefix = (string)_configContainer.GetValue("voice.long.distance-prefix");
                goto END;
            END:
                dialedNumber = prefix + dialedNumber;
            }
        LASTEND:
            return dialedNumber;
        }

        ///// <summary>
        /////     Handles the MouseLeftButtonUp event of the rdbutton control.
        ///// </summary>
        ///// <param name="sender">The source of the event.</param>
        ///// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        //private void rdbutton_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        //{
        //    try
        //    {
        //        if (!_dataContext.IsDispositionNoneChecked)
        //        {
        //            if (_dataContext.userAttachData.ContainsKey("DispositionCode"))
        //            {
        //                _dataContext.userAttachData.Remove("DispositionCode");
        //            }
        //            _dataContext.IsDispositionNoneChecked = true;
        //            _dataContext.userAttachData.Add("DispositionCode", string.Empty);
        //            var soft = new SoftPhone();
        //            soft.UpdateUserData(_dataContext.userAttachData);
        //        }
        //    }
        //    catch (Exception commonException)
        //    {
        //        _logger.Error("SoftphoneBar_rdbutton_MouseLeftButtonUp:" + commonException);
        //    }
        //}
        /// <summary>
        /// Handles the Click event of the Ready control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void Ready_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string text = "Ready";
                VoiceStateChange(AgentStateType.Channel, text);
            }
            catch (Exception commonException)
            {
                _logger.Error("Ready_Click :" + commonException);
            }
        }

        private void ReconnectInteraction()
        {
            try
            {
                #region Reconnect Interaction

                var media = Datacontext.AvailableServerDic.FirstOrDefault(x => x.Value == Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGInteractionServer.ToString()).Key;
                if (media != null)
                {
                    Pointel.Interactions.Core.Common.OutputValues ixnConnectOutput = interactionService.ConnectInteractionServer(media, _dataContext.AgentID);
                    if (ixnConnectOutput.MessageCode == "200")
                    {
                        Pointel.Interactions.Contact.Core.Common.OutputValues ucsOutput = conatctService.ConnectUCS(_configContainer.ConfServiceObject, _configContainer.TenantDbId, _dataContext.ApplicationName, null);
                        Pointel.Interactions.Core.Common.OutputValues registerOutput = interactionService.RegisterClient(_dataContext.AgentID);
                        if (registerOutput.MessageCode == "200")
                        {
                            _dataContext.ProxyID = registerOutput.ProxyID;
                        }
                        Pointel.Interactions.Core.Common.OutputValues ixnLoginResponse = interactionService.AgentLogin(_dataContext.AgentID, _dataContext.Place, _dataContext.ProxyID, _configContainer.TenantDbId, _mediaListWithState);
                        if (ixnLoginResponse.MessageCode == "200")
                        {
                            _emailListener = this;
                            _chatListener = this;

                            // Added by sakthi to check the UCS Configured or not. -- 12-11-2015 : Start

                            CheckAndLoadContactPlugin();

                            // : End

                            LoadWorkbinPlugin();
                            if (!DataTabControl.Items.Contains(TabWorkbin))
                                DataTabControl.Items.Add(TabWorkbin);
                            if (_dataContext.IsEmailPluginAdded && _configContainer.AllKeys.Contains("email.enable.plugin")
                                    && ((string)_configContainer.GetValue("email.enable.plugin")).ToLower().Equals("true") && _dataContext.lstHoldingChannelSelection.ContainsKey("email"))
                            {
                                LoadEmailPlugin();
                                if (((string)_configContainer.GetValue("login.email.enable.auto-ready")).ToLower().Equals("true") && Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["email"]))
                                {
                                    InteractionHandler.AgentEmailState = "Ready";
                                    if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email))
                                    {
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.Email] = InteractionHandler.AgentEmailState;
                                    }
                                    else
                                        _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Email, InteractionHandler.AgentEmailState);
                                    _ixnHandler.ChangeEmailStatus(InteractionHandler.AgentEmailState);

                                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                                    {
                                        ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).WorkbinFlag(true);
                                        ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).NotifyAgentLogin(true);
                                        RegisterWorkbinNotification();
                                    }
                                    //CR by sakthi - 10-09-2015
                                    // Added to notify the Email State Information to contact Plugin.
                                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact))
                                    {
                                        ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).NotifyEmailMediaState(true);
                                    }
                                    NotifyAgentIXNProxyID();
                                }
                                else if (!((string)_configContainer.GetValue("login.email.enable.auto-ready")).ToLower().Equals("true") && Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["email"]))
                                {
                                    InteractionHandler.AgentEmailState = "Not Ready";
                                    if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email))
                                    {
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.Email] = InteractionHandler.AgentEmailState;
                                    }
                                    else
                                        _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Email, InteractionHandler.AgentEmailState);
                                    _ixnHandler.ChangeEmailStatus(InteractionHandler.AgentEmailState);

                                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                                    {
                                        ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).WorkbinFlag(true);
                                        ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).NotifyAgentLogin(true);
                                        RegisterWorkbinNotification();
                                    }
                                    //CR by sakthi - 10-09-2015
                                    // Added to notify the Email State Information to contact Plugin.
                                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact))
                                    {
                                        ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).NotifyEmailMediaState(true);
                                    }
                                    NotifyAgentIXNProxyID();
                                }
                                else
                                {
                                    InteractionHandler.AgentEmailState = "Logout";
                                    if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email))
                                    {
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.Email] = InteractionHandler.AgentEmailState;
                                    }
                                    else
                                        _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Email, InteractionHandler.AgentEmailState);
                                    _ixnHandler.ChangeEmailStatus(InteractionHandler.AgentEmailState);

                                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                                    {
                                        ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).WorkbinFlag(false);
                                        ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).NotifyAgentLogin(true);
                                        RegisterWorkbinNotification();
                                    }
                                    //CR by sakthi - 10-09-2015
                                    // Added to notify the Email State Information to contact Plugin.
                                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact))
                                    {
                                        ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).NotifyEmailMediaState(false);
                                    }
                                    NotifyAgentIXNProxyID();
                                }
                                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Email))
                                {
                                    Dictionary<string, string> agentInfo = new Dictionary<string, string>();
                                    agentInfo.Add("UserName", _dataContext.UserName);
                                    agentInfo.Add("Place", _dataContext.Place);
                                    agentInfo.Add("EmployeeID", _dataContext.AgentEmployeeID);
                                    agentInfo.Add("TenantDBID", _configContainer.TenantDbId.ToString());
                                    agentInfo.Add("ProxyClientID", _dataContext.ProxyID.ToString());
                                    agentInfo.Add("ApplicationName", _dataContext.ApplicationName.ToString());
                                    ((IEmailPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Email]).InitializeEmail(_configContainer.ConfServiceObject, _emailListener,
                                         agentInfo);
                                }

                                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                                {
                                    var pluginWorkbin = (IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin];
                                    if (_dataContext.InteractionProtocol != null)
                                        pluginWorkbin.NotifyInteractionProtocol(_dataContext.InteractionProtocol);

                                    pluginWorkbin.InitializeWorkBin(_dataContext.Place, _dataContext.ProxyID, _emailListener);
                                    _objWorbin = pluginWorkbin.ShowWorkBinForm();
                                    var win = (UserControl)_objWorbin;
                                    win.Width = dockWorkbin.ActualWidth;
                                    dockWorkbin.Children.Clear();
                                    dockWorkbin.Children.Add(win);
                                }
                                _errorMessage.Clear();
                                if (_errorMessage.Count == 0)
                                {
                                    _errorMessage.Add("IWS_Message", "Interaction Server Started Successfully....");
                                    _errorMessage.Add("IWS_Subject", "The channel email is back in service.");
                                    _errorMessage.Add("IWS_Sender", "System");
                                    _errorMessage.Add("IWS_Priority", "4");
                                    _errorMessage.Add("IWS_MessageType", "System");
                                    _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                    _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                    GettingUserData(VoiceEvents.None, _errorMessage);
                                }
                            }
                            if (_dataContext.IsChatPluginAdded && _configContainer.AllKeys.Contains("chat.enable.plugin") && _dataContext.lstHoldingChannelSelection.ContainsKey("chat") &&
                                    ((string)_configContainer.GetValue("chat.enable.plugin")).ToLower().Equals("true"))
                            {
                                LoadChatPlugin();
                                if (((string)_configContainer.GetValue("login.chat.enable.auto-ready")).ToLower().Equals("true") && Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["chat"]))
                                {
                                    InteractionHandler.AgentChatState = "Ready";
                                    if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                                    {
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.Chat] = InteractionHandler.AgentChatState;
                                    }
                                    else
                                        _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Chat, InteractionHandler.AgentChatState);
                                    _ixnHandler.ChangeChatStatus(InteractionHandler.AgentChatState);
                                }
                                else if (!((string)_configContainer.GetValue("login.chat.enable.auto-ready")).ToLower().Equals("true") && Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["chat"]))
                                {
                                    InteractionHandler.AgentChatState = "Not Ready";
                                    if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                                    {
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.Chat] = InteractionHandler.AgentChatState;
                                    }
                                    else
                                        _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Chat, InteractionHandler.AgentChatState);
                                    _ixnHandler.ChangeChatStatus(InteractionHandler.AgentChatState);
                                }
                                else
                                {
                                    InteractionHandler.AgentChatState = "Logout";
                                    if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                                    {
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.Chat] = InteractionHandler.AgentChatState;
                                    }
                                    else
                                        _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Chat, InteractionHandler.AgentChatState);
                                    _ixnHandler.ChangeChatStatus(InteractionHandler.AgentChatState);
                                }
                                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Chat) && _dataContext.lstHoldingChannelSelection.ContainsKey("chat"))
                                {
                                    if (_dataContext.InteractionProtocol != null)
                                        ((IChatPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Chat]).NotifyInteractionProtocol(_dataContext.InteractionProtocol);
                                    var chatMedia = Datacontext.AvailableServerDic.FirstOrDefault(x => x.Value == Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGChatServer.ToString()).Key;
                                    if (chatMedia != null)
                                        ((IChatPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Chat]).InitializeChat(_dataContext.UserName, _configContainer.ConfServiceObject, chatMedia, _dataContext.Place, _chatListener);
                                    else
                                    {
                                        _errorMessage.Clear();
                                        if (_errorMessage.Count == 0)
                                        {
                                            _errorMessage.Add("IWS_Message", "Chat Server not configured....");
                                            _errorMessage.Add("IWS_Subject", "Chat media not initialized.");
                                            _errorMessage.Add("IWS_Sender", "System");
                                            _errorMessage.Add("IWS_Priority", "4");
                                            _errorMessage.Add("IWS_MessageType", "System");
                                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                            GettingUserData(VoiceEvents.None, _errorMessage);
                                        }
                                    }
                                }
                                else
                                {
                                    _errorMessage.Clear();
                                    if (_errorMessage.Count == 0)
                                    {
                                        _errorMessage.Add("IWS_Message", "Chat Server not configured....");
                                        _errorMessage.Add("IWS_Subject", "Chat media not initialized.");
                                        _errorMessage.Add("IWS_Sender", "System");
                                        _errorMessage.Add("IWS_Priority", "4");
                                        _errorMessage.Add("IWS_MessageType", "System");
                                        _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                        _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                        GettingUserData(VoiceEvents.None, _errorMessage);
                                    }
                                }
                                _errorMessage.Clear();
                                if (_errorMessage.Count == 0)
                                {
                                    _errorMessage.Add("IWS_Message", "Interaction Server Started Successfully....");
                                    _errorMessage.Add("IWS_Subject", "The channel chat is back in service.");
                                    _errorMessage.Add("IWS_Sender", "System");
                                    _errorMessage.Add("IWS_Priority", "4");
                                    _errorMessage.Add("IWS_MessageType", "System");
                                    _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                    _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                    GettingUserData(VoiceEvents.None, _errorMessage);
                                }
                            }
                            if (_dataContext.IsOutboundPluginAdded && _configContainer.AllKeys.Contains("outbound.enable.plugin") &&
                                   ((string)_configContainer.GetValue("outbound.enable.plugin")).ToLower().Equals("true"))
                            {
                                LoadChatPlugin();
                                if (((string)_configContainer.GetValue("login.outbound.enable.auto-ready")).ToLower().Equals("true") && Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["outboundpreview"]))
                                {
                                    InteractionHandler.AgentOutboundState = "Ready";
                                    if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.OutboundPreview))
                                    {
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.OutboundPreview] = InteractionHandler.AgentOutboundState;
                                    }
                                    else
                                        _dataContext.htMediaCurrentState.Add(Datacontext.Channels.OutboundPreview, InteractionHandler.AgentOutboundState);
                                    _ixnHandler.ChangeOutboundStatus(InteractionHandler.AgentOutboundState);
                                }
                                else if (!((string)_configContainer.GetValue("login.outbound.enable.auto-ready")).ToLower().Equals("true") && Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["outboundpreview"]))
                                {
                                    InteractionHandler.AgentOutboundState = "Not Ready";
                                    if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.OutboundPreview))
                                    {
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.OutboundPreview] = InteractionHandler.AgentOutboundState;
                                    }
                                    else
                                        _dataContext.htMediaCurrentState.Add(Datacontext.Channels.OutboundPreview, InteractionHandler.AgentOutboundState);
                                    _ixnHandler.ChangeOutboundStatus(InteractionHandler.AgentOutboundState);
                                }
                                else
                                {
                                    InteractionHandler.AgentOutboundState = "Logout";
                                    if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.OutboundPreview))
                                    {
                                        _dataContext.htMediaCurrentState[Datacontext.Channels.OutboundPreview] = InteractionHandler.AgentOutboundState;
                                    }
                                    else
                                        _dataContext.htMediaCurrentState.Add(Datacontext.Channels.OutboundPreview, InteractionHandler.AgentOutboundState);
                                    _ixnHandler.ChangeOutboundStatus(InteractionHandler.AgentOutboundState);
                                }
                                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.OutboundPreview))
                                {
                                    if (_dataContext.InteractionProtocol != null)
                                        ((IOutboundPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.OutboundPreview]).NotifyInteractionProtocol(_dataContext.InteractionProtocol);
                                    ((IOutboundPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.OutboundPreview]).InitializeOutbound(_dataContext.UserName, _dataContext.ApplicationName,
                                        _configContainer.ConfServiceObject, _chatListener);
                                }
                                _errorMessage.Clear();
                                if (_errorMessage.Count == 0)
                                {
                                    _errorMessage.Add("IWS_Message", "Interaction Server Started Successfully....");
                                    _errorMessage.Add("IWS_Subject", "The Channel outbound preview is back in service.");
                                    _errorMessage.Add("IWS_Sender", "System");
                                    _errorMessage.Add("IWS_Priority", "4");
                                    _errorMessage.Add("IWS_MessageType", "System");
                                    _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                    _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                    GettingUserData(VoiceEvents.None, _errorMessage);
                                }
                            }
                            InteractionHandler._isIXNServerDown = false;
                        }
                        else
                        {
                            _errorMessage.Clear();
                            if (_errorMessage.Count == 0)
                            {
                                _errorMessage.Add("IWS_Message", ixnLoginResponse.Message + " -  Interaction Media Error(" + ixnLoginResponse.ErrorCode + ")");
                                _errorMessage.Add("IWS_Subject", ixnLoginResponse.Message);
                                _errorMessage.Add("IWS_Sender", "System");
                                _errorMessage.Add("IWS_Priority", "4");
                                _errorMessage.Add("IWS_MessageType", "System");
                                _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                GettingUserData(VoiceEvents.None, _errorMessage);
                            }
                        }
                    }
                    else if (ixnConnectOutput.MessageCode == "2001")
                    {
                        _logger.Warn("SoftphoneBar:SoftPhoneBar__needToConnectServer:" + ixnConnectOutput.Message);
                    }
                }
                else
                {
                    _logger.Error("SoftphoneBar:SoftPhoneBar__needToConnectServer:" + " Interaction server not configured.");
                    // Added by sakthi to remove the workbin tab, if the ixn not configured
                    DataTabControl.Items.Remove(TabWorkbin);
                }

                #endregion Reconnect Interaction
            }
            catch (Exception generalException)
            {
                _logger.Error("Error occurred in ReconnectInteraction Method " + generalException.ToString());
            }
        }

        private void ReconnectVoice()
        {
            try
            {
                #region Reconnect Voice

                var listner = new SoftPhone();
                _logger.Debug("Login using Place : " + _dataContext.Place + " Username : " + _dataContext.UserName +
                      " Queue : " + _dataContext.QueueSelectedValue + " Application : " + _dataContext.ApplicationName + " LoginID : " +
                      _dataContext.AgentLoginId);
                string workMode = "optional";
                string switchtype = "avaya";
                if (_dataContext.SwitchName.ToLower().Contains("nortel"))
                    switchtype = "nortel";
                var media = (Datacontext.AvailableServerDic.Where(x => x.Value == Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGTServer.ToString())).ToDictionary(x => x.Key, y => y.Value);
                if (media == null)
                    return;
                if (media.Count > 0)
                {
                    if (Datacontext.TServersSwitchDic.ContainsKey(Datacontext.UsedTServerSwitchDBId)
                        && media.Any(x => (x.Key.ToString().Split(','))[0].Trim() == Datacontext.TServersSwitchDic[Datacontext.UsedTServerSwitchDBId]))
                    {
                        var tserverName = media.Where(x => (x.Key.ToString().Split(','))[0].Trim() == Datacontext.TServersSwitchDic[Datacontext.UsedTServerSwitchDBId]).FirstOrDefault().Key;
                        var loginResponse = listner.Initialize(_dataContext.Place, _dataContext.UserName, _configContainer.ConfServiceObject, tserverName, _dataContext.AgentLoginId, _dataContext.AgentPassword, _dataContext.SwitchType);
                        if (loginResponse.MessageCode == "200")
                            loginResponse = listner.Login(_dataContext.Place, _dataContext.UserName, workMode, _dataContext.Queue, _dataContext.AgentLoginId, _dataContext.AgentPassword);
                        if (loginResponse.MessageCode == "200" || loginResponse.MessageCode == "201")
                        {
                            _isLogoutFromAID = false;
                            _voiceCurrentStatus = true;
                            _isVoiceLoginFirstTime = true;
                            if (!_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
                                _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Voice, "LoggedIn");
                            else
                                _dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = "LoggedIn";
                            if (_configContainer.AllKeys.Contains("login.voice.enable.auto-ready") &&
                                        ((string)_configContainer.GetValue("login.voice.enable.auto-ready")).ToLower().Equals("true"))
                            {
                                var softReady = new SoftPhone();
                                softReady.Ready();
                            }
                            _errorMessage.Clear();
                            if (_errorMessage.Count == 0)
                            {
                                _errorMessage.Add("IWS_Message",
                                    "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name +
                                    " Switch)");
                                _errorMessage.Add("IWS_Subject", "The channel voice is back in service.");
                                _errorMessage.Add("IWS_Sender", "System");
                                _errorMessage.Add("IWS_Priority", "4");
                                _errorMessage.Add("IWS_MessageType", "System");
                                _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                GettingUserData(VoiceEvents.None, _errorMessage);
                                _isServerdown = false;
                            }
                        }
                        else if (loginResponse.MessageCode == "2001")
                        {
                            _isVoiceLoginFirstTime = false;
                            NotifyVoiceMediaStatus("Out Of Service");
                            _logger.Warn("SoftphoneBar:SoftPhoneBar__needToConnectServer:" + loginResponse.Message);
                        }
                        else if (loginResponse.MessageCode == "2004")
                        {
                            PlaceAlreadyTaken(loginResponse);
                            NotifyVoiceMediaStatus("Logout");
                        }
                    }
                }
                else
                {
                    _errorMessage.Clear();
                    if (_errorMessage.Count == 0)
                    {
                        _errorMessage.Add("IWS_Message",
                            "Voice (" + _dataContext.ThisDN + "@" + _dataContext.SwitchType.Name +
                            " Switch)" + " T-Server not configured.");
                        _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                        _errorMessage.Add("IWS_Sender", "System");
                        _errorMessage.Add("IWS_Priority", "4");
                        _errorMessage.Add("IWS_MessageType", "System");
                        _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                        _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                        GettingUserData(VoiceEvents.None, _errorMessage);
                        NotifyVoiceMediaStatus("Out Of Service");
                        _isServerdown = false;
                    }
                }

                #endregion Reconnect Voice
            }
            catch (Exception generalException)
            {
                _logger.Error("Error occurred in ReconnectVoice Method " + generalException.ToString());
            }
        }

        private void refinePlace_Click(object sender, RoutedEventArgs e)
        {
            if (!_dataContext.isOnCall)
            {
                var refinePlace = new RefinePlace();
                refinePlace.Owner = this;
                refinePlace.ShowDialog();
            }
        }

        private void RegisterWorkbinNotification()
        {
            Thread thAgentGroup = new Thread(delegate()
            {
                try
                {
                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                    {
                        var pluginWorkbin = (IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin];
                        List<string> workbinList = pluginWorkbin.GetPersonalWorkbinList();
                        foreach (string workBinType in workbinList)
                        {
                            while (true)
                            {
                                Pointel.Interactions.Core.Common.OutputValues registerOutput = interactionService.RequestWorkbinNotifications(_dataContext.ProxyID,
                                workBinType, _dataContext.AgentEmployeeID, null, null, null);
                                if (registerOutput.MessageCode == "200") break;
                            }
                        }

                        List<string> teamWorkbinList = pluginWorkbin.GetTeamWorkbinList();
                        List<string> agentId = pluginWorkbin.GetTeamAgentList();
                        if (teamWorkbinList != null && agentId != null)
                        {
                            foreach (string workbinName in teamWorkbinList)
                            {
                                foreach (string id in agentId)
                                {
                                    while (true)
                                    {
                                        Pointel.Interactions.Core.Common.OutputValues registerOutput = interactionService.RequestWorkbinNotifications(_dataContext.ProxyID, workbinName, id, null, null, null);
                                        if (registerOutput.MessageCode == "200") break;
                                    }
                                }
                            }
                        }

                        if (IsSendWorkbinToTeamCommunicator) return;

                        Dictionary<string, object> _teamCommunicatorValues = new Dictionary<string, object>();
                        if (workbinList != null)
                        {
                            string workbinNames = string.Empty;
                            foreach (string workBinType in workbinList)
                            {
                                if (string.IsNullOrEmpty(workbinNames))
                                    workbinNames = workBinType;
                                else
                                    workbinNames += "," + workBinType;
                            }
                            _teamCommunicatorValues.Add("workbins", workbinNames);
                        }

                        //    List<string> teamWorkbinList = pluginWorkbin.GetTeamWorkbinList();
                        if (teamWorkbinList != null)
                        {
                            string workbinNames = string.Empty;
                            foreach (string workBinType in teamWorkbinList)
                            {
                                if (string.IsNullOrEmpty(workbinNames))
                                    workbinNames = workBinType;
                                else
                                    workbinNames += "," + workBinType;
                            }
                            _teamCommunicatorValues.Add("teamworkbins", workbinNames);
                        }
                        bool _supervisorMovetoWorkbin = false;
                        bool _supervisorMovetoInteractionQueue = false;
                        if (_configContainer.AllKeys.Contains("supervisor.enable.move-workbin") &&
                                        ((string)_configContainer.GetValue("supervisor.enable.move-workbin")).ToLower().Equals("true"))
                            _supervisorMovetoWorkbin = true;

                        if (_configContainer.AllKeys.Contains("supervisor.enable.move-interactionqueue") &&
                                        ((string)_configContainer.GetValue("supervisor.enable.move-interactionqueue")).ToLower().Equals("true"))
                            _supervisorMovetoInteractionQueue = true;

                        _teamCommunicatorValues.Add("myteamworkbin.supervisor.enable-move-workbin", _supervisorMovetoWorkbin);
                        _teamCommunicatorValues.Add("myteamworkbin.supervisor.enable-move-interactionqueue", _supervisorMovetoInteractionQueue);
                        if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.TeamCommunicator))
                        {
                            ((ITeamCommunicatorPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.TeamCommunicator]).NotifyCMEObjects(_teamCommunicatorValues);
                            IsSendWorkbinToTeamCommunicator = true;
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.Error("Error occurred as " + ex.Message);
                }
            });
            thAgentGroup.Start();
        }

        /// <summary>
        /// Handles the Click event of the Release control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void Release_Click(object sender, RoutedEventArgs e)
        {
            if ((_configContainer.AllKeys.Contains("voice.disposition.codes") &&
               ((Dictionary<string, string>)_configContainer.GetValue("voice.disposition.codes")).Count == 0) || CheckDisposition())
            {
                _dataContext.IsReconnectClicked = false;
                _dataContext.IsInitiateConfClicked = false;
                _dataContext.IsInitiateTransClicked = false;
                _dataContext.isOnCall = false;
                var softRelease = new SoftPhone();
                _feedbackNumber = _feedbackNumber.Trim();
                if (_configContainer.AllKeys.Contains("voice.enable.feedback") &&
               _configContainer.GetAsBoolean("voice.enable.feedback") &&
               !string.IsNullOrEmpty(_feedbackNumber) &&
               _feedbackNumber != _dataContext.ThisDN)
                {
                    if (_configContainer.AllKeys.Contains("voice.feedback.is-mandatory") &&
               _configContainer.GetAsBoolean("voice.feedback.is-mandatory"))
                        goto FeedBackTransfer;
                    else if (_configContainer.AllKeys.Contains("voice.feedback.is-mandatory") &&
               _configContainer.GetAsBoolean("voice.feedback.is-mandatory"))
                    {
                        var feedbackDialougeBox = new MessageBox("FeedBack Transfer", "This customer is eligible for taking a FeedBack session." + Environment.NewLine
                            + "Would you like to transfer the call to IVR?.", "_Transfer", "_Release", false);
                        if (feedbackDialougeBox.ShowDialog() == true)
                            goto FeedBackTransfer;
                        else if (feedbackDialougeBox.ShowDialog() == false)
                            goto CallRelease;
                    }
                }
                else
                    goto CallRelease;

            FeedBackTransfer:
                _dataContext.IsInitiateTransClicked = false;
                _dataContext.IsInitiateConfClicked = false;
                _dataContext.DialedNumber = _feedbackNumber;
                //Added by moorthy, This implies unsolicited initiate transfer/conference
                var ReasonCode = new Genesyslab.Platform.Commons.Collections.KeyValueCollection();
                ReasonCode.Add("OperationMode", "Transfer");
                //end
                softRelease.InitiateTransfer(_feedbackNumber, ReasonCode); _feedbackNumber = string.Empty;
                if (_dataContext.SwitchName.ToLower().Contains("nortel"))
                {
                    if (!_dataContext.IsHoldClicked)
                    {
                        softRelease.CompleteTransfer();
                        _isTransferClick = false;
                    }
                }
                else
                {
                    _isTransferClick = true;
                }
                goto EndReleaseLogic;

            CallRelease:
                softRelease.Release();

            EndReleaseLogic:

                softRelease = null;
                txtDN.Text = string.Empty;

                #region Disposition code on release

                if (_isDispositionSent)
                {
                    //if (_dataContext.isDispositionUseAttachData)
                    //    _dataContext.userAttachData.Add("AttributeAttachedData", _dataContext.userAttachData);
                    if (_configContainer.AllKeys.Contains("interaction.disposition.use-connection-id") &&
                                ((string)_configContainer.GetValue("interaction.disposition.use-connection-id")).ToLower().Equals("true"))
                        if (_dataContext.userAttachData.ContainsKey("ConnectionId"))
                            _dataContext.userAttachData.Add("AttributeConnectionID", _dataContext.userAttachData["ConnectionId"]);
                    softRelease.DistributeUserDataEvent(_dataContext.userAttachData, _dataContext.userAttachData["ConnectionId"]);
                }

                #endregion Disposition code on release

                //Code Added by Manikandan on 08-04-20114 to show callinfo window
                if (_dataContext.IsCallWindowEnabled)
                {
                    var window = IsWindowOpen<Window>("UserCallInfo");
                    if (window != null)
                        window.Close();
                }
                //End
            }
            else
            {
                var msg = new MessageBox("Warning", "Disposition code is mandatory.", "", "_Ok", false);
                msg.Name = "DispositionMadatory";
                msg.Owner = this;
                msg.ShowDialog();
                if (msg.DialogResult != true)
                {
                    msg.Dispose();
                    return;
                }
                msg = null;
                if (_dataContext.BottomRowHeight == new GridLength(0))
                {
                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), false);
                }
                else if (_dataContext.WorksapceTabVisibility != Visibility.Visible)
                {
                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), true);
                }
                if (!_dataContext.IsCallWindowEnabled)
                {
                    for (var i = 0; i < DataTabControl.Items.Count; i++)
                    {
                        var item = DataTabControl.Items.GetItemAt(i) as TabItem;
                        if (item != null && !item.Name.Equals("calldata")) continue;
                        DataTabControl.SelectedIndex = i;
                        tb_CallData.SelectedIndex = 1;
                    }
                }
                else
                {
                    for (var i = 0; i < DataTabControl.Items.Count; i++)
                    {
                        var item = DataTabControl.Items.GetItemAt(i) as TabItem;
                        if (item != null && !item.Name.Equals("DispositionTab")) continue;
                        DataTabControl.SelectedIndex = i;
                        tb_CallData.SelectedIndex = 1;
                    }
                }
            }
        }

        private void RequeueTimer_Tick(object sender, EventArgs e)
        {
            if (RequeueIntervalTime == this.RequeueTimeout)
            {
                RequeueIntervalTime = 0;
                _dataContext.RequeueTimer.Stop();
                btnReconnect_Click(null, null);
            }
            else
                RequeueIntervalTime++;
            //throw new NotImplementedException();
        }

        /// <summary>
        ///     Retrieves the state of the previous.
        /// </summary>
        /// <param name="agentStatus">The agent status.</param>
        /// added for getting previous state of the agent
        /// Smoorthy - 09-12-2013
        private void RetrievePreviousState(string agentStatus, string agentWorkMode, Dictionary<string, string> reasons, string status, string connId, string dnType, string partyState = "")
        {
            try
            {
                _logger.Info("RetrievePreviousState");
                _logger.Info("---------------------");
                _logger.Info("AgentState : " + agentStatus);
                _logger.Info("Reasons : " + reasons);
                _logger.Info("Call State : " + status);
                _logger.Info("Connection Id : " + connId);
                _logger.Info("---------------------");
                //    string callControl = string.Empty;
                //    if (_configContainer.AllKeys.Contains("call-control"))
                //        callControl = _configContainer.GetAsString("call-control");

                //if (_dataContext.SwitchName.ToLower().Contains("nortel"))
                //{
                //    if (status == "0" && dnType.ToLower() == "position")
                //        AssignPreviousState(agentStatus);
                //    else if (status == "1" && dnType.ToLower() == "dn" && callControl == "extension")
                //        AssignPreviousCall(connId);
                //    else if (status == "1" && dnType.ToLower() == "position" && callControl != "extension")
                //        AssignPreviousCall(connId);
                //}
                //if (_dataContext.SwitchName.ToLower().Contains("avaya"))
                //{
                if (status == "0")
                    AssignPreviousState(agentStatus, agentWorkMode, reasons);
                else if (status == "1" && !string.IsNullOrEmpty(connId))
                    AssignPreviousCall(connId, partyState);
                //}
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar:RetrievePreviousState():" + commonException);
            }
        }

        /// <summary>
        /// Handles the Click event of the Hold control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        private void Retrieve_Click(object sender, RoutedEventArgs e)
        {
            //if (_dataContext.HoldImageSource != null &&
            //        _dataContext.HoldImageSource.ToString().Contains("Call.Retrive.png"))
            {
                var softRetrieve = new SoftPhone();
                softRetrieve.Retrieve();
                softRetrieve = null;
            }
        }

        private Pointel.Salesforce.Plugin.AgentState salesforce_AgentState()
        {
            int agentState = 0;
            var currentState = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();

            switch (currentState)
            {
                case "Ready":
                    agentState = 2;
                    break;

                case "Not Ready":
                    agentState = 3;
                    break;

                case "Logout":
                    agentState = 8;
                    break;

                case "Do Not Disturb":
                    agentState = 6;
                    break;

                case "Out Of Service":
                    agentState = 9;
                    break;

                case "After Call Work":
                    agentState = 5;
                    break;

                case "Logout (Do Not Disturb)":
                    agentState = 7;
                    break;

                default:
                    if (currentState.Contains("Not Ready -"))
                        agentState = 4;
                    break;
            }
            Pointel.Salesforce.Plugin.AgentState _agentState = new Pointel.Salesforce.Plugin.AgentState()
            {
                CurrentAgentStatus = (Pointel.Salesforce.Plugin.AgentStatus)agentState,
                IsOnCall = _dataContext.isOnCall
            };
            return _agentState;
        }

        private void salesforce_LogMessage(MessageMode Mode, string Message)
        {
            if (string.IsNullOrEmpty(Message)) return;
            switch (Mode)
            {
                case MessageMode.Debug:
                    _logger.Debug(Message);
                    break;

                case MessageMode.Info:
                    _logger.Info(Message);
                    break;

                case MessageMode.Warn:
                    _logger.Warn(Message);
                    break;

                case MessageMode.Error:
                    _logger.Error(Message);
                    break;
            }
        }

        void salesforce_NotifySFDCConnectionStatusChanges(SFDCConnectionStatus status)
        {
            _logger.Trace("SFDC connection Status from AID : " + status.ToString());
            _alivestatus = (status == 0 ? true : false);
            _dataContext.IsSalesforceAlive = !_alivestatus;
            _dataContext.SalesForceText = _alivestatus ? "Connected" : "DisConnected";
            _dataContext.SalesForceTextToolTip = _alivestatus ? "\"SalesForce\" is connected with Agent Interaction Desktop." : "\"SalesForce\" is dis-connected with Agent Interaction Desktop." + Environment.NewLine
                + "Click to re-launch the browser instance if its closed.";
        }

        private void salesforce_ReceiveSFDCWindow(string url)
        {
            try
            {
                NotifyWebUrl(url, "Salesforce", 1);
            }
            catch (Exception _generalException)
            {
                _logger.Error("Error occurred as " + _generalException.Message);
            }
        }

        private void salesforce_SFDCConnectionStatus(MessageMode Mode, string Message)
        {
            //Sales force sate.
            try
            {
            }
            catch (Exception _generalException)
            {
                _logger.Error("Error occurred as " + _generalException.Message);
            }
        }

        private void SetBottomwindow(string bottomUiName, bool isOpenedByUser)
        {
            SizeChanged -= SoftphoneBar_SizeChanged;
            MinHeight = 480;
            MaxHeight = SystemParameters.PrimaryScreenHeight;//725;//578
            switch (bottomUiName)
            {
                case "MyMessage":
                    _dataContext.Bottomwindow = Datacontext.OpendBy.MyMessage;
                    _dataContext.WorksapceTabVisibility = Visibility.Hidden;
                    _dataContext.ContactTabVisibility = Visibility.Hidden;
                    _dataContext.MessageTabVisibility = Visibility.Visible;
                    break;

                case "MyContact":
                    _dataContext.Bottomwindow = Datacontext.OpendBy.MyContact;
                    _dataContext.WorksapceTabVisibility = Visibility.Hidden;
                    _dataContext.MessageTabVisibility = Visibility.Hidden;
                    _dataContext.ContactTabVisibility = Visibility.Visible;
                    break;

                case "Workspace":
                    _dataContext.Bottomwindow = Datacontext.OpendBy.Workspace;
                    _dataContext.MessageTabVisibility = Visibility.Hidden;
                    _dataContext.ContactTabVisibility = Visibility.Hidden;
                    _dataContext.WorksapceTabVisibility = Visibility.Visible;
                    break;
            }
            if (_isfirstBottomHeightSet)
            {
                Height = ((double)_dataContext.ConfiguredWindowHeight / 100) * SystemParameters.PrimaryScreenHeight;//grdTitle.ActualHeight + grdTool.ActualHeight + 648;
                _isfirstBottomHeightSet = false;
                baseheight = new GridLength(Height - grdTitle.ActualHeight - grdTool.ActualHeight - 5 - 2 - 16);// new GridLength(624);
                _dataContext.BottomRowHeight = baseheight;
            }
            else
            {
                Height = grdTitle.ActualHeight + grdTool.ActualHeight + baseheight.Value + 5 + 2 + 16;
                _dataContext.BottomRowHeight = new GridLength(1, GridUnitType.Star);
            }
            _isopendbyUser = isOpenedByUser;
            DataTabControl.Visibility = System.Windows.Visibility.Visible;
            SizeChanged += new SizeChangedEventHandler(SoftphoneBar_SizeChanged);
        }

        private void SetDispositionCode(string connId)
        {
            _isDispositionSent = false;
            ShowDisposition(connId);
            _isAgentClickNRCodeOnCall = false;
            if (_dataContext.IsCallWindowEnabled)
            {
                if (stk_Dispositioncodeonly.Children.Count > 0)
                {
                    foreach (var item in stk_Dispositioncodeonly.Children)
                    {
                        if ((item as RadioButton).Content.ToString().Equals("None"))
                        {
                            _dataContext.IsDispositionNoneChecked = true;
                            (item as RadioButton).IsChecked = true;
                            break;
                        }
                    }
                }
            }
            if (_dataContext.IsCallWindowEnabled)
            {
                if (_dataContext.DispositionVisibility == Visibility.Visible)
                {
                    _dataContext.DispositionOnlyVisibility = Visibility.Visible;
                }

                if (DataTabControl.Items.Contains(calldata))
                {
                    //gridVoiceContact.Children.Clear();
                    DataTabControl.Items.Remove(calldata);
                }

                if (!DataTabControl.Items.Contains(DispositionTab))
                    DataTabControl.Items.Add(DispositionTab);
            }
            else
            {
                if (!DataTabControl.Items.Contains(calldata))
                    DataTabControl.Items.Add(calldata);

                if (DataTabControl.Items.Contains(DispositionTab))
                    DataTabControl.Items.Remove(DispositionTab);

                //To add attach data in context menu of add button
                _dataContext.CallDataAdd.Items.Clear();
                try
                {
                    if (_configContainer.AllKeys.Contains("VoiceAttachDataKey") && _configContainer.GetValue("VoiceAttachDataKey") != null)
                        foreach (string item in ((List<string>)_configContainer.GetValue("VoiceAttachDataKey")))
                        {
                            //if (_configContainer.AllKeys.Contains("voice.enable.case-data-filter") &&
                            //    _configContainer.GetValue("voice.enable.case-data-filter") != null &&
                            //    ((string)_configContainer.GetValue("voice.enable.case-data-filter")).ToLower().Equals("true") &&
                            //        _configContainer.AllKeys.Contains("VoiceAttachDataFilterKey") &&
                            //    _configContainer.GetValue("VoiceAttachDataFilterKey") != null)
                            //{
                            //    var filterstring = _configContainer.GetValue("VoiceAttachDataFilterKey") as List<string>;
                            //    if (!filterstring.Contains(item)) continue;
                            //}
                            string keyValue = _dataContext.userAttachData.Where(x => x.Key.ToLower().Replace(" ", string.Empty) == item.ToLower().Replace(" ", string.Empty)).FirstOrDefault().Key;
                            if (!(keyValue != null && keyValue != string.Empty))
                            {
                                MenuItem _mItem = new MenuItem();
                                _mItem.Header = item;
                                _mItem.Click += new RoutedEventHandler(CallDataAddMenuitem_Click);
                                _dataContext.CallDataAdd.Style = (Style)FindResource("Contextmenu");
                                _dataContext.CallDataAdd.Items.Add(_mItem);
                            }
                        }
                    if (_configContainer.AllKeys.Contains("voice.enable.add-case-data") && ((string)_configContainer.GetValue("voice.enable.add-case-data")).ToLower().Equals("true"))
                        if (_dataContext.CallDataAdd.Items.Count >= 1)
                            _dataContext.IsVoiceEnabledAddCallData = System.Windows.Visibility.Visible;
                        else
                            _dataContext.IsVoiceEnabledAddCallData = System.Windows.Visibility.Collapsed;
                }
                catch (Exception ex)
                {
                    _logger.Error("Error while adding the context menu items for call data. " + ex.Message);
                }
            }
        }

        /// <summary>
        /// Sets the hot key.
        /// </summary>
        private void SetHotKey()
        {
            //Load hot keys

            //End
            Dictionary<string, string> _hotKeys = new Dictionary<string, string>();

            if (_configContainer.AllKeys.Contains("keyboard.hotkey.agent-not-ready") && _configContainer.GetValue("keyboard.hotkey.agent-not-ready") != null)
                _hotKeys.Add("NotReady", _configContainer.GetValue("keyboard.hotkey.agent-not-ready"));

            if (_configContainer.AllKeys.Contains("keyboard.hotkey.agent-ready") && _configContainer.GetValue("keyboard.hotkey.agent-ready") != null)
                _hotKeys.Add("Ready", _configContainer.GetValue("keyboard.hotkey.agent-ready"));

            if (_configContainer.AllKeys.Contains("keyboard.hotkey.hold-active-call") && _configContainer.GetValue("keyboard.hotkey.hold-active-call") != null)
                _hotKeys.Add("Hold", _configContainer.GetValue("keyboard.hotkey.hold-active-call"));

            if (_configContainer.AllKeys.Contains("keyboard.hotkey.release-active-call") && _configContainer.GetValue("keyboard.hotkey.release-active-call") != null)
                _hotKeys.Add("Release", _configContainer.GetValue("keyboard.hotkey.release-active-call"));

            if (_configContainer.AllKeys.Contains("keyboard.hotkey.answer-active-call") && _configContainer.GetValue("keyboard.hotkey.answer-active-call") != null)
                _hotKeys.Add("Answer", _configContainer.GetValue("keyboard.hotkey.answer-active-call"));

            if (_configContainer.AllKeys.Contains("keyboard.hotkey.agent-login") && _configContainer.GetValue("keyboard.hotkey.agent-login") != null)
                _hotKeys.Add("Login", _configContainer.GetValue("keyboard.hotkey.agent-login"));

            if (_configContainer.AllKeys.Contains("keyboard.hotkey.agent-logout") && _configContainer.GetValue("keyboard.hotkey.agent-logout") != null)
                _hotKeys.Add("Logout", _configContainer.GetValue("keyboard.hotkey.agent-logout"));

            if (_configContainer.AllKeys.Contains("keyboard.hotkey.retrieve-active-call") && _configContainer.GetValue("keyboard.hotkey.retrieve-active-call") != null)
                _hotKeys.Add("Retrieve", _configContainer.GetValue("keyboard.hotkey.retrieve-active-call"));

            foreach (var item in _hotKeys.Keys)
            {
                switch (item)
                {
                    case "Login":
                        this.InputBindings.Add(new KeyBinding((FindResource("Login") as RoutedUICommand), StringToKeyGesture(_hotKeys[item])));
                        break;

                    case "Logout":
                        this.InputBindings.Add(new KeyBinding((FindResource("Logout") as RoutedUICommand), StringToKeyGesture(_hotKeys[item])));
                        break;

                    case "Ready":
                        this.InputBindings.Add(new KeyBinding((FindResource("Ready") as RoutedUICommand), StringToKeyGesture(_hotKeys[item])));
                        break;

                    case "NotReady":
                        this.InputBindings.Add(new KeyBinding((FindResource("NotReady") as RoutedUICommand), StringToKeyGesture(_hotKeys[item])));
                        break;

                    case "Answer":
                        this.InputBindings.Add(new KeyBinding((FindResource("Answer") as RoutedUICommand), StringToKeyGesture(_hotKeys[item])));
                        break;

                    case "Release":
                        this.InputBindings.Add(new KeyBinding((FindResource("Release") as RoutedUICommand), StringToKeyGesture(_hotKeys[item])));
                        break;

                    case "Hold":
                        this.InputBindings.Add(new KeyBinding((FindResource("Hold") as RoutedUICommand), StringToKeyGesture(_hotKeys[item])));
                        break;

                    case "Retrieve":
                        this.InputBindings.Add(new KeyBinding((FindResource("Retrieve") as RoutedUICommand), StringToKeyGesture(_hotKeys[item])));
                        break;
                }
            }
            _hotKeys = null;
        }

        /// <summary>
        /// Sets default notready with configured reason and code.
        /// </summary>
        private void SetNotReady(string reasoncode = "No key found", bool isSolicited = false)
        {
            string reason = "";
            string code = "";
            if (!reasoncode.Contains("No key found"))
            {
                var split = reasoncode.Split('|');
                reason = split[0].Trim();
                if (split.Length > 1)
                    code = split[1].Trim();
            }
            var softNotReady = new SoftPhone();
            if (!isSolicited)
                softNotReady.NotReady(reason, code);
            else
            {
                var response = softNotReady.NotReady(reason, code, isSolicited);
                if (response.MessageCode != "2001")
                {
                    var imessage = response.IMessage;
                    EventAgentNotReady eventAgentNReady = (EventAgentNotReady)imessage;
                    _logger.Trace("Response from T-Server:" + eventAgentNReady.ToString());
                    var nreadyStatus = new Pointel.Softphone.Voice.AgentStatus();
                    try
                    {
                        Pointel.Softphone.Voice.AgentStatus.agentStatusObject = null;

                        if (eventAgentNReady.AgentWorkMode == AgentWorkMode.AfterCallWork)
                        {
                            nreadyStatus.AgentCurrentStatus = CurrentAgentStatus.AfterCallWork.ToString();
                            eventAgentNReady.Extensions = null;
                            //messageToClient.NotifyAgentStatus(nreadyStatus);
                            //goto NotReadyLabel;
                        }
                        else
                            nreadyStatus.AgentCurrentStatus = CurrentAgentStatus.NotReady.ToString();

                        if (eventAgentNReady.Reasons != null)
                        {
                            nreadyStatus.AgentCurrentStatus = CurrentAgentStatus.NotReady.ToString();
                            nreadyStatus.reasons = new Dictionary<string, string>();
                            foreach (string keys in eventAgentNReady.Reasons.AllKeys)
                            {
                                nreadyStatus.reasons.Add(keys, eventAgentNReady.Reasons[keys].ToString());
                            }

                            //if (nreadyStatus.reasons.ContainsValue("AfterCallWork"))
                            //{
                            //    nreadyStatus.AgentCurrentStatus = CurrentAgentStatus.AfterCallWork.ToString();
                            //}
                        }

                        if (eventAgentNReady.Extensions != null)
                        {
                            nreadyStatus.AgentCurrentStatus = CurrentAgentStatus.NotReady.ToString();
                            foreach (string keys in eventAgentNReady.Extensions.AllKeys)
                            {
                                if (nreadyStatus.Extensions != null)
                                {
                                    nreadyStatus.Extensions.Add(keys, eventAgentNReady.Extensions[keys].ToString());
                                }
                                else
                                {
                                    nreadyStatus.Extensions = new KeyValueCollection();
                                    nreadyStatus.Extensions.Add(keys, eventAgentNReady.Extensions[keys].ToString());
                                }
                                //if (eventAgentNReady.Extensions[keys].ToString().Contains("AfterCallWork"))
                                //{
                                //    nreadyStatus.AgentCurrentStatus = CurrentAgentStatus.AfterCallWork.ToString();
                                //}
                            }
                        }
                    }
                    catch
                    {

                    }
                    SoftPhoneBar_agentStatusListener(nreadyStatus);
                    ChangingphoneStatus(GetNotReadyStatus());
                }

            }
            softNotReady = null;
        }

        private void ShowDisposition(string connId)
        {
            try
            {
                if (_configContainer.AllKeys.Contains("interaction.disposition-collection.key-name") &&
                            _configContainer.AllKeys.Contains("interaction.disposition.key-name"))
                {
                    Dictionary<string, string> dispositionTree = new Dictionary<string, string>();
                    string DispositionCollectionKey = _configContainer.GetValue("interaction.disposition-collection.key-name");
                    string DispositionCodeKey = _configContainer.GetValue("interaction.disposition.key-name");
                    dispositionGrid.Children.Clear();

                    if (_dataContext.userAttachData != null && (_dataContext.userAttachData.ContainsKey(DispositionCollectionKey) || _dataContext.userAttachData.ContainsKey(DispositionCodeKey)))
                    {
                        _logger.Debug("Keyvaluecollection contains DispositionCollectionKey or DispositionCodeKey");
                        _dataContext.IsDispositionNoneChecked = true;
                        if (_dataContext.DispositionObjCollection.Value != null)
                        {
                            _logger.Debug("Disposition UI is not null");
                            dispositionGrid.Children.Clear();
                            var dispositionObject = (Pointel.Interactions.DispositionCodes.UserControls.Disposition)
                            _dataContext.DispositionObjCollection.Value;
                            if (_dataContext.userAttachData.ContainsKey(DispositionCollectionKey))
                            {
                                _logger.Debug("DispositionCollectionKey : " + _dataContext.userAttachData[DispositionCollectionKey].ToString());
                                if (!string.IsNullOrEmpty(_dataContext.userAttachData[DispositionCollectionKey].ToString()))
                                    dispositionTree = _dataContext.userAttachData[DispositionCollectionKey].ToString().Split(';').Select(s => s.Split(':')).ToDictionary(a => a[0].Trim().ToString(), a => a[1].Trim().ToString());
                            }
                            if (_dataContext.userAttachData.ContainsKey(DispositionCodeKey))
                            {
                                _logger.Debug("DispositionCodeKey : " + _dataContext.userAttachData[DispositionCodeKey].ToString());
                                if (_dataContext.userAttachData[DispositionCodeKey].ToString() != string.Empty)
                                {
                                    _dataContext.IsDispositionNoneChecked = false;
                                    if (_dataContext.userAttachData[DispositionCodeKey].ToString() == "None")
                                        _dataContext.IsDispositionNoneChecked = true;
                                    dispositionTree.Add(DispositionCodeKey, _dataContext.userAttachData[DispositionCodeKey].ToString());
                                }
                                else
                                    _dataContext.IsDispositionNoneChecked = true;
                            }
                            else
                                _dataContext.IsDispositionNoneChecked = true;

                            if (connId != string.Empty)
                            {
                                _logger.Debug("Reload Disposition code UserControl");
                                dispositionObject.ReLoadDispositionCodes(dispositionTree, connId);
                                dispositionTree = null;
                            }
                            dispositionGrid.Children.Add(dispositionObject);
                        }
                        else
                        {
                            _logger.Debug("Disposition UI is not loaded, LoadDispositionCodes");
                            _dataContext.IsDispositionNoneChecked = true;
                            LoadDispositionCodes(connId);
                        }
                    }
                    else
                    {
                        _logger.Debug("KVC is null or disposition code values is not available");
                        _dataContext.IsDispositionNoneChecked = true;
                        if (_dataContext.DispositionObjCollection.Value != null)
                        {
                            _logger.Debug("Disposition UserControl is not null, Load media Dispositions");
                            var dispositionObject = (Pointel.Interactions.DispositionCodes.UserControls.Disposition)_dataContext.DispositionObjCollection.Value;
                            if (dispositionObject != null)
                            {
                                dispositionGrid.Children.Clear();
                                dispositionObject.NotifyDispositionCodeEvent -= NotifyDispositionCodeEvent;
                                dispositionObject.NotifyDispositionCodeEvent += NotifyDispositionCodeEvent;
                                dispositionObject.Dispositions(Pointel.Interactions.IPlugins.MediaTypes.Voice, new DispositionData() { InteractionID = connId });
                                dispositionGrid.Children.Add(dispositionObject);
                            }
                        }
                        else
                        {
                            _logger.Debug("Disposition code UserControl is null, LoadDispositionCodes");
                            LoadDispositionCodes(connId);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred while loading Disposition Code : " + ex.Message.ToString());
            }
        }

        private void ShowOutboundScreenPop()
        {
            if (objOutboundScreenPop == null)
            {
                objOutboundScreenPop = new OutboundScreenPop();
            }
            else
            {
                objOutboundScreenPop = null;
                objOutboundScreenPop = new OutboundScreenPop();
            }
            objOutboundScreenPop.Show();
            _dataContext.IsEnableOutboundUpdate = false;
            //_dataContext.VoiceNotReadyReasonCode = "Outbound Call";
        }

        /// <summary>
        ///     Handles the PreviewMouseRightButtonDown event of the skills control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.</param>
        private void skills_PreviewMouseRightButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (!(sender is DataGridCell)) return;
            _dataContext.CanAddSkill = false;
            _dataContext.CanEditSkill = false;
            _dataContext.CanDeleteSkill = false;
            var tempcell = sender as DataGridCell;
            DataGridRow row = null;
            var parent = VisualTreeHelper.GetParent(tempcell);
            while (parent != null && parent.GetType() != typeof(DataGridRow))
            {
                parent = VisualTreeHelper.GetParent(parent);
                if (!(parent is DataGridRow)) continue;
                row = parent as DataGridRow;
                break;
            }
            if (row == null) return;
            var mySkills = (MySkills)row.Item;
            _dataContext.EditingSkill.Clear();
            _dataContext.EditingSkill.Add(mySkills.SkillName, mySkills.SkillLevel);
            if (mySkills == null) return;
            if (_dataContext.LoadAllSkills.Count <= 0) return;//No values in skills so return
            if (_dataContext.MySkills.Count < _dataContext.LoadAllSkills.Count)//Agent have some skills only
            {
                if (_dataContext.IsAddSkillsEnabled)//Add is enabled allow agent to add skills
                    _dataContext.CanAddSkill = true;

                if (_dataContext.MySkills.Count <= 0) return;//Agent have no skills, so return
                if (_dataContext.IsUpdateSkillsEnabled)//Agent have skills and update enabled so allow agent to update skills
                    _dataContext.CanEditSkill = _dataContext.IsUpdateSkillsEnabled;

                if (_dataContext.IsDeleteSkillsEnabled)//Agent have skills and delete enabled so allow agent to delete skills
                    _dataContext.CanDeleteSkill = _dataContext.IsDeleteSkillsEnabled;
                if (!_dataContext.IsAddSkillsEnabled && !_dataContext.IsDeleteSkillsEnabled && !_dataContext.IsUpdateSkillsEnabled) return;
                row.ContextMenu = _dataContext.SkillsContextMenu;
                row.ContextMenu.IsOpen = true;
                row.ContextMenu.Focus();
            }
            else//Agent have all skills
            {
                if (_dataContext.IsUpdateSkillsEnabled)//edit is enabled so allow agent to edit
                {
                    _dataContext.CanEditSkill = true;
                }
                if (_dataContext.IsDeleteSkillsEnabled)//delete is enabled so allow agent to delete
                    _dataContext.CanDeleteSkill = true;

                if (!_dataContext.IsAddSkillsEnabled && !_dataContext.IsDeleteSkillsEnabled && !_dataContext.IsUpdateSkillsEnabled) return;
                row.ContextMenu = _dataContext.SkillsContextMenu;
                row.ContextMenu.IsOpen = true;
                row.ContextMenu.Focus();
            }
        }

        private void softAnswerCallBasedConfig(bool isAutoAnswer)
        {
            if (isAutoAnswer)
            {

                int seconds = 0;
                int.TryParse(_configContainer.AllKeys.Contains("voice.auto-answer.timer") ?
                    ((string)_configContainer.GetValue("voice.auto-answer.timer")) : "0", out seconds);

                if (seconds > 0)
                {
                    _taskbarNotifier.objiNotifier = (Pointel.TaskbarNotifier.INotifier)_taskbarNotifier;
                    _taskbarNotifier.isAutoAnswerTimer = true;
                    //Converting seconds to milliseconds
                    _taskbarNotifier.StayOpenMilliseconds = seconds * 1000;
                    _taskbarNotifier.OpeningMilliseconds = 1000;
                    _taskbarNotifier.HidingMilliseconds = 500;

                    // Show or Hide reject button when voice.auto-answer is set to true and the value of email.auto-answer.timer > 0
                    if (_configContainer.AllKeys.Contains("voice.enable.auto-answer-reject") && ((string)_configContainer.GetValue("voice.enable.auto-answer-reject")).ToLower().Equals("true"))
                        _taskbarNotifier.ReloadUI(false);
                    else
                        _taskbarNotifier.ReloadUI(true);

                    this.FlashWindow(50);
                    BindGridForNotifer();

                    _taskbarNotifier.Notify(Height, _isbottom);
                    _taskbarNotifier.PlayTone();
                }
                else
                {
                    _taskbarNotifier.objiNotifier = null;
                    _taskbarNotifier.isAutoAnswerTimer = false;
                    _taskbarNotifier.StayOpenMilliseconds = 1000000000;
                    _taskbarNotifier.OpeningMilliseconds = 1000;
                    _taskbarNotifier.HidingMilliseconds = 500;
                    AutoAnswer();
                }
            }
            else
            {
                if (_dataContext.CallType.Contains("Inbound"))
                    _taskbarNotifier.ReloadUI(false);
                else
                    _taskbarNotifier.ReloadUI(true);

                this.FlashWindow(50);
                BindGridForNotifer();

                _taskbarNotifier.Notify(Height, _isbottom);
                _taskbarNotifier.PlayTone();

            }
        }

        /// <summary>
        ///     Softs the phone bar_agent status listener.
        /// </summary>
        /// <param name="agentStatusNotify">The agent status notify.</param>
        private void SoftPhoneBar_agentStatusListener(Pointel.Softphone.Voice.AgentStatus agentStatusNotify)
        {
            this.Dispatcher.Invoke((Action)(delegate
            {
                try
                {
                    lock (_agentStateTimer)
                    {
                        if (!_agentStateTimer.IsEnabled)
                        {
                            _agentStateTimer.Start();
                        }
                    }
                    SoftPhone softLogin = null;
                    NotifyVoiceMediaStatus(agentStatusNotify.AgentCurrentStatus);
                    switch (agentStatusNotify.AgentCurrentStatus)
                    {
                        case "LoggedIn":
                            //if (_plugins.PluginCollections.ContainsKey(Plugins.Salesforce))
                            //    ((ISalesforcePlugin)_plugins.PluginCollections[Plugins.Salesforce]).ApplicationState(MediaTypes.Voice, AgentMediaStatus.LoggedIn);
                            break;

                        case "Forwarded":
                            ObservableCollection<IMediaStatus> _tempMediaStatus = new ObservableCollection<IMediaStatus>();
                            if (_dataContext.MediaStatus.Count >= 0)
                            {
                                var i = _dataContext.MediaStatus.IndexOf(_dataContext.MediaStatus.Where(p => p.ChannelName == "Voice").FirstOrDefault());
                                //Code Commented - below condition has been commented due to improper status update in Grid
                                //24.09.2013
                                // if (_dataContext.MediaStatus[i].Forward == "No Active Forward")
                                //End
                                var a = tlblStatus.Text.Replace('[', ' ').TrimStart();
                                a = a.Replace(']', ' ').TrimEnd();
                                var b = a.Split(':');
                                var t = (Convert.ToInt32(b[0]) * 3600) + (Convert.ToInt32(b[1]) * 60) +
                                        (Convert.ToInt32(b[2]));
                                var time = TimeSpan.FromSeconds(t + 1);
                                var timer = "[" + string.Format("{0:D2}:{1:D2}:{2:D2}", time.Hours, time.Minutes, time.Seconds) + "]";
                                foreach (var mediaStatus in _dataContext.MediaStatus)
                                {
                                    var item = (MediaStatus)mediaStatus;
                                    _tempMediaStatus.Add(new MediaStatus(item.ChannelIconImageSource,
                                            item.ChannelName, item.ChannelStateImageSource,
                                            item.ChannelState, item.ChannelInitialTime, item.Forward, item.Information,
                                            item.StateTimer));
                                }
                                var pos = _tempMediaStatus.IndexOf(_tempMediaStatus.Where(p => p.ChannelName == "Voice").FirstOrDefault());
                                var item1 = new MediaStatus(
                                            _tempMediaStatus[pos].ChannelIconImageSource,
                                            _tempMediaStatus[pos].ChannelName,
                                            _tempMediaStatus[pos].ChannelStateImageSource,
                                            _tempMediaStatus[pos].ChannelState, timer,
                                            "Forwarded to " + _dataContext.ForwardDN, "",
                                            _tempMediaStatus[pos].StateTimer);
                                _dataContext.MediaStatus.RemoveAt(i);
                                _dataContext.MediaStatus.Insert(i, item1);
                                _dataContext.ForwardStatus = "Forwarded to " +
                                                                            _dataContext.ForwardDN;
                                item1 = null;
                            }
                            _tempMediaStatus = null;
                            break;

                        case "ForwardCancel":
                            var _tempMediaStatus1 = new ObservableCollection<IMediaStatus>();
                            if (_dataContext.MediaStatus.Count >= 0)
                            {
                                int i =
                                   _dataContext
                                        .MediaStatus.IndexOf(
                                           _dataContext
                                                .MediaStatus.Where(p => p.ChannelName == "Voice")
                                                .FirstOrDefault());
                                if (_dataContext.MediaStatus[i].Forward.Contains("Forwarded to "))
                                {
                                    string a = tlblStatus.Text.Replace('[', ' ').TrimStart();
                                    a = a.Replace(']', ' ').TrimEnd();
                                    string[] b = a.Split(':');
                                    int t = (Convert.ToInt32(b[0]) * 3600) + (Convert.ToInt32(b[1]) * 60) +
                                            (Convert.ToInt32(b[2]));
                                    TimeSpan time = TimeSpan.FromSeconds(t + 1);
                                    string timer = "[" +
                                                   string.Format("{0:D2}:{1:D2}:{2:D2}", time.Hours, time.Minutes,
                                                       time.Seconds) + "]";

                                    foreach (MediaStatus item in _dataContext.MediaStatus)
                                    {
                                        _tempMediaStatus1.Add(new MediaStatus(item.ChannelIconImageSource,
                                                item.ChannelName, item.ChannelStateImageSource,
                                                item.ChannelState, item.ChannelInitialTime, item.Forward, item.Information,
                                                item.StateTimer));
                                    }
                                    var pos = _tempMediaStatus1.IndexOf(_tempMediaStatus1.Where(p => p.ChannelName == "Voice").FirstOrDefault());
                                    _dataContext.MediaStatus.RemoveAt(i);
                                    _dataContext.MediaStatus.Insert(i, new MediaStatus(
                                                _tempMediaStatus1[pos].ChannelIconImageSource,
                                                _tempMediaStatus1[pos].ChannelName,
                                                _tempMediaStatus1[pos].ChannelStateImageSource,
                                                _tempMediaStatus1[pos].ChannelState, timer,
                                                "No Active Forward", "",
                                                _tempMediaStatus1[pos].StateTimer));
                                    _dataContext.ForwardStatus = "No Active Forward";
                                }
                                btnLogin.IsEnabled = true;
                                _dataContext.LogImageSource = _imageDatacontext.ImgLogoutEnabled;
                                // _dataContext.ForwardDN = string.Empty;
                            }

                            break;

                        case "Registered":
                            _dataContext.IsTserverConnected = true;
                            string agentworkmode = string.Empty;
                            if (agentStatusNotify.AgentID == null || agentStatusNotify.AgentID == _dataContext.AgentLoginId)
                            {
                                _isAgentClickNRCodeOnCall = false;
                                var extensions = agentStatusNotify.Extensions;
                                if (extensions.ContainsKey("fwd"))
                                {
                                    if (!extensions["fwd"].ToString().Contains("off"))
                                        _dataContext.ForwardDN = extensions["fwd"].ToString();
                                    else
                                    {
                                        _dataContext.ForwardDN = string.Empty;
                                        _dataContext.ForwardStatus = string.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(_dataContext.ForwardDN))
                                {
                                    _dataContext.ForwardStatus = "Forwarded to " +
                                                                                _dataContext.ForwardDN;
                                }
                                if (extensions.ContainsKey("dnd") && extensions["dnd"].ToString() == "1")
                                {
                                    _dataContext.isDND = true;
                                }
                                //below condition added for getting the previous state of the agent
                                //smoorthy 09-12-2013
                                if (!extensions.ContainsKey("AgentWorkMode"))
                                    agentworkmode = "0";
                                else
                                    agentworkmode = extensions["AgentWorkMode"].ToString();
                                if (!extensions.ContainsKey("AgentStatus")) break;
                                if (extensions.ContainsKey("status") && extensions["status"].ToString() == "1" && extensions.ContainsKey("conn-1"))
                                    RetrievePreviousState(extensions["AgentStatus"].ToString(), agentworkmode, agentStatusNotify.Reasons,
                                        extensions["status"].ToString(), extensions["conn-1"].ToString(), agentStatusNotify.AddressType, extensions["ps-1"].ToString());
                                else
                                    RetrievePreviousState(extensions["AgentStatus"].ToString(), agentworkmode, agentStatusNotify.Reasons, "0", "", agentStatusNotify.AddressType);
                                //end
                            }
                            else
                            {
                                #region Code shifted to voice core

                                //string tempText = "Agent ID - " + agentStatusNotify.AgentID;
                                //try
                                //{
                                //    Genesyslab.Platform.ApplicationBlocks.ConfigurationObjectModel.CfgObjects.CfgSwitch cfgswich = _configContainer.ConfServiceObject.RetrieveObject<Genesyslab.Platform.ApplicationBlocks.ConfigurationObjectModel.CfgObjects.CfgSwitch>
                                //        (new Genesyslab.Platform.ApplicationBlocks.ConfigurationObjectModel.Queries.CfgSwitchQuery() { Name = _dataContext.SwitchType.Name });
                                //    Genesyslab.Platform.ApplicationBlocks.ConfigurationObjectModel.CfgObjects.CfgAgentLogin agentLoginID =
                                //        _configContainer.ConfServiceObject.RetrieveObject<Genesyslab.Platform.ApplicationBlocks.ConfigurationObjectModel.CfgObjects.CfgAgentLogin>
                                //        (new Genesyslab.Platform.ApplicationBlocks.ConfigurationObjectModel.Queries.CfgAgentLoginQuery() { LoginCode = agentStatusNotify.AgentID, SwitchDbid = cfgswich.DBID });
                                //    Genesyslab.Platform.ApplicationBlocks.ConfigurationObjectModel.CfgObjects.CfgPerson person = _configContainer.ConfServiceObject.RetrieveObject<Genesyslab.Platform.ApplicationBlocks.ConfigurationObjectModel.CfgObjects.CfgPerson>(new Genesyslab.Platform.ApplicationBlocks.ConfigurationObjectModel.Queries.CfgPersonQuery() { LoginDbid = agentLoginID.DBID, SwitchDbid = cfgswich.DBID });
                                //    tempText = person.LastName + " " + person.FirstName;
                                //}
                                //catch { }
                                //_errorMessage.Clear();
                                //_errorMessage.Add("IWS_Message", "Place is already taken by " + tempText + ".");
                                //_errorMessage.Add("IWS_Subject", "Unable to login.");
                                //_errorMessage.Add("IWS_Sender", "System");
                                //_errorMessage.Add("IWS_Priority", "3");
                                //_errorMessage.Add("IWS_MessageType", "System");
                                //_errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                //_errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                //GettingUserData(VoiceEvents.None, _errorMessage);

                                //btnLogin.IsEnabled = true;
                                //_dataContext.LogImageSource = _imageDatacontext.ImgLoginEnabled;
                                ////_dataContext.LogImageSource =
                                ////    GetBitmapImage(new Uri(_imagePath + "\\Login-in-icon.png", UriKind.Relative));
                                //_dataContext.LogText = (String)FindResource("keyLogin");

                                //_dataContext.IsDialEnabled = false;
                                //_dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                                ////_dataContext.DialImageSource =
                                ////    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png", UriKind.Relative));
                                //_dataContext.DialText = (String)FindResource("KeyDial");
                                //_dataContext.IsAttachDataEnabled = false;
                                //_agentstate = "Logout";
                                //ChangeVoiceStatus("Logout");
                                //_dataContext.LogText = "Logout";
                                //btnLogin_Click(null, null);

                                #endregion Code shifted to voice core
                            }
                            agentworkmode = null;
                            break;

                        case "DTMFSent":
                            _dataContext.StatusMessageHeight = GridLength.Auto;
                            _dataContext.StatusMessage = "DTMF Sent Successfully...";
                            break;

                        case "SwitchDisconnected":
                            _dataContext.IsTserverConnected = true;
                            _errorMessage.Clear();
                            _errorMessage.Add("IWS_Message",
                                    "Voice (" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject", "Switch Not Connected.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                            ChangeVoiceStatus("Out Of Service1");
                            _agentstate = "Out Of Service1";
                            ChangingphoneStatus(GetLogoutStatus());
                            break;

                        case "ServerDisconnected":
                            _dataContext.IsTserverConnected = false;
                            if (Datacontext.isCalledRefinePlace)
                                return;
                            _errorMessage.Clear();
                            _errorMessage.Add("IWS_Message",
                                    "Voice (" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                            ChangeVoiceStatus("Out Of Service");
                            _agentstate = "Out Of Service";
                            ChangingphoneStatus(GetLogoutStatus());
                            break;

                        case "SwitchConnected":
                            //if (!_dataContext.SwitchName.ToLower().Contains("avaya")) break;
                            _errorMessage.Clear();
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject", "Switch Connected.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "3");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                            //if (_agentstate != "Out Of Service" && _agentstate != "Out Of Service1") break;
                            _logger.Debug("Login using Place : " + _dataContext.Place + " Username : " + _dataContext.UserName +
                                  " Queue : " + _dataContext.QueueSelectedValue + " Application : " + _dataContext.ApplicationName + " LoginID : " +
                                  _dataContext.AgentLoginId);
                            softLogin = new SoftPhone();
                            string workmode = "optional";
                            OutputValues loginResponse = softLogin.Login(_dataContext.Place, _dataContext.UserName, workmode, _dataContext.Queue, _dataContext.AgentLoginId, _dataContext.AgentPassword);
                            if (loginResponse.MessageCode == "200" || loginResponse.MessageCode == "201")
                            {
                                _isLogoutFromAID = false;
                                if (_configContainer.AllKeys.Contains("login.voice.enable.auto-ready") &&
                                        ((string)_configContainer.GetValue("login.voice.enable.auto-ready")).ToLower().Equals("true"))
                                {
                                    var softReady = new SoftPhone();
                                    softReady.Ready();
                                }
                            }
                            else if (loginResponse.MessageCode == "2004")
                            {
                                PlaceAlreadyTaken(loginResponse);
                            }
                            break;

                        case "ServerConnected":
                            _dataContext.IsTserverConnected = true;
                            //if (!_dataContext.SwitchName.ToLower().Contains("avaya")) break;
                            _errorMessage.Clear();
                            _errorMessage.Add("IWS_Message",
                                "Voice (" + _dataContext.SwitchType.Name + ")");
                            _errorMessage.Add("IWS_Subject", "The channel voice is back in service.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                            softLogin = new SoftPhone();
                            _logger.Debug("Login using Place : " + _dataContext.Place + " Username : " + _dataContext.UserName +
                                  " Queue : " + _dataContext.QueueSelectedValue + " Application : " + _dataContext.ApplicationName + " LoginID : " +
                                  _dataContext.AgentLoginId);
                            string workMode = "optional";
                            //string switchtype = "avaya";
                            //if (_dataContext.SwitchName.ToLower().Contains("nortel"))
                            //    switchtype = "nortel";

                            //var output = softLogin.Initialize(_dataContext.Place, _dataContext.UserName, _configContainer.ConfServiceObject,
                            //      _dataContext.ApplicationName, _dataContext.AgentLoginId, _dataContext.AgentPassword, switchtype);
                            //if (output.MessageCode == "200")
                            //{
                            var output1 = softLogin.Login(_dataContext.Place, _dataContext.UserName, workMode, _dataContext.Queue, _dataContext.AgentLoginId, _dataContext.AgentPassword);
                            if (output1.MessageCode == "200" || output1.MessageCode == "201")
                            {
                                _isLogoutFromAID = false;
                                _voiceCurrentStatus = true;
                                if (_configContainer.AllKeys.Contains("login.voice.enable.auto-ready") &&
                                        ((string)_configContainer.GetValue("login.voice.enable.auto-ready")).ToLower().Equals("true"))
                                {
                                    var softReady = new SoftPhone();
                                    softReady.Ready();
                                }
                            }
                            else if (output1.MessageCode == "2004")
                            {
                                PlaceAlreadyTaken(output1);
                            }
                            //}
                            break;

                        case "Ready":
                            _isFailedAgentLogin = false;
                            _isVoiceLoginFirstTime = true;
                            //if (_dataContext.isOnCall || Datacontext.isDialling || Datacontext.isRinging) break;
                            _dataContext.IsAgentClickedReady = true;
                            _dataContext.IsHoldClicked = false;
                            ChangeVoiceStatus("Ready");
                            _agentstate = "Ready";
                            txtDN.ItemsSource = (_recentContacts as IEnumerable<string>).Reverse();
                            //code added by smoorthy - 21-02-2015
                            _dataContext.VoiceNotReadyReasonCode = string.Empty;
                            _isNrReasonCode = false;
                            //end
                            break;

                        case "NotReady":
                            _isFailedAgentLogin = false;
                            _isVoiceLoginFirstTime = true;
                            //if (_dataContext.isOnCall || Datacontext.isDialling || Datacontext.isRinging) break;
                            _dataContext.IsHoldClicked = false;
                            _dataContext.IsAgentClickedReady = false;
                            txtDN.ItemsSource = (_recentContacts as IEnumerable<string>).Reverse();
                            //if (!_dataContext.isDND)
                            //{
                            if (!_isNrReasonCode)
                            {
                                ChangeVoiceStatus("Not Ready");
                                _agentstate = "Not Ready";
                            }
                            else
                            {
                                //code added by smoorthy -21-02-2015
                                if (string.IsNullOrEmpty(_dataContext.VoiceNotReadyReasonCode) || _dataContext.VoiceNotReadyReasonCode.Equals("After Call Work"))
                                {
                                    ChangeVoiceStatus("Not Ready");
                                    _agentstate = "Not Ready";
                                }
                                else
                                {
                                    ChangeVoiceStatus("Not Ready - " + _dataContext.VoiceNotReadyReasonCode.Trim());
                                    _agentstate = "Not Ready - " + _dataContext.VoiceNotReadyReasonCode.Trim();
                                }
                            }
                            break;

                        case "AfterCallWork":
                            if (_isACWByUser)
                            {
                                _isACWByUser = false;
                                if (_dataContext.isOnCall || Datacontext.isDialling || Datacontext.isRinging) break;
                                _dataContext.IsHoldClicked = false;
                                _dataContext.IsAgentClickedReady = false;
                                _dataContext.CallTypeStatus = string.Empty;
                                ChangeVoiceStatus("AfterCallWork1");
                                _agentstate = "AfterCallWork1";
                            }
                            else
                            {
                                _isACWByUser = false;
                                _isAgentClickNRCodeOnCall = false;
                                //if (!(_configContainer.AllKeys.Contains("voice.acw.enabled")
                                //        && ((string)_configContainer.GetValue("voice.acw.enabled")).ToLower().Equals("true")))
                                //{
                                _dataContext.CallTypeStatus = string.Empty;
                                _currentNReadyTime = 0;
                                tlblStatus.Text = "[00:00:00]";
                                //popupChannelStateTime.Text = "[00:00:00]";
                                //_agentState.popupChannelStateTime.Text = "[00:00:00]";
                                //if (!_isNrReasonCode)
                                //{
                                //if (!_dataContext.IsAgentClickedReady)
                                //{
                                //    ChangeVoiceStatus("Not Ready");
                                //    _agentstate = "Not Ready";
                                //}
                                //else
                                //{
                                _dataContext.IsAgentClickedReady = false;
                                _dataContext.IsHoldClicked = false;
                                _dataContext.VoiceNotReadyReasonCode = "After Call Work";
                                ChangeVoiceStatus(_dataContext.VoiceNotReadyReasonCode);
                                _agentstate = "After Call Work";
                                //}
                                //}
                                //}
                                //else
                                //{
                                //    _dataContext.IsAgentClickedReady = false;
                                //    _dataContext.IsHoldClicked = false;
                                //    _dataContext.VoiceNotReadyReasonCode = "After Call Work";
                                //    ChangeVoiceStatus(_dataContext.VoiceNotReadyReasonCode);
                                //    _agentstate = "After Call Work";
                                //}
                            }
                            txtDN.ItemsSource = (_recentContacts as IEnumerable<string>).Reverse();
                            break;

                        case "OnCall":
                            _isAgentClickNRCodeOnCall = false;
                            this.StopFlashingWindow(0);
                            var streamResourceInfo = Application.GetResourceStream(new Uri("pack://application:,,,/Agent.Interaction.Desktop;component/Images/NewAgentFull.ico"));
                            if (streamResourceInfo != null)
                            {
                                using (Stream stream = streamResourceInfo.Stream)
                                {
                                    if (notifyIcon != null)
                                        notifyIcon.Icon = new Icon(stream);
                                }
                            }
                            streamResourceInfo = null;
                            _dataContext.IsReconnectClicked = false;
                            _dataContext.IsHoldClicked = false;
                            _dataContext.isOnCall = true;
                            //Code added by Manikandan on 08-04-2014 to show CallInfo window if Enable.view key is true
                            if (_dataContext.IsCallWindowEnabled)
                            {
                                _dataContext.A_DataTabVisibility = Visibility.Collapsed;
                                var window = IsWindowOpen<Window>("UserCallInfo");
                                if (window != null)
                                {
                                    CallInfo callInfo = (CallInfo)window;
                                    if (callInfo != null)
                                    {
                                        callInfo.LoadMemberID();
                                        callInfo.LoadCallData();
                                        callInfo.Focus();
                                    }
                                }
                            }
                            if (_dataContext.userAttachData.ContainsKey("CallType") && _dataContext.IsEnableOutboundScreenPop)
                            {
                                if (_dataContext.userAttachData["CallType"] == "Outbound")
                                {
                                    _dataContext.IsEnableOutboundUpdate = true;
                                }
                            }
                            if (_configContainer.AllKeys.Contains("voice.enable.dtmf") &&
                             ((string)_configContainer.GetValue("voice.enable.dtmf")).ToLower().Equals("true"))
                            {
                                _dataContext.IsDialEnabled = true;
                                _dataContext.DialText = (String)FindResource("KeyDTMF");
                                _dataContext.DialImageSource = _imageDatacontext.ImgDialPadEnabled;
                            }
                            else
                            {
                                _logger.Info("voice.enable.dtmf key fails and showing dial button text");
                                _dataContext.IsDialEnabled = false;
                                _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                                _dataContext.DialText = (String)FindResource("KeyDial");
                            }
                            txtDN.Text = string.Empty;
                            ChangeVoiceStatus("OnCall");
                            _agentstate = "OnCall";
                            _taskbarNotifier.StopTone();
                            _taskbarNotifier.ForceHidden();
                            if (_recentContacts != null)
                            {
                                List<string> temp = _recentContacts.GetRange(0, _recentContacts.Count);
                                temp.RemoveAll(x => x.Length > _dataContext.ConsultDialDigits);
                                txtDN.ItemsSource = (temp as IEnumerable<string>).Reverse();
                            }
                            break;

                        case "OnHeld":
                            _isAgentClickNRCodeOnCall = false;
                            var streamResourceInfo1 = Application.GetResourceStream(new Uri("pack://application:,,,/Agent.Interaction.Desktop;component/Images/NewAgentFull.ico"));
                            if (streamResourceInfo1 != null)
                            {
                                using (Stream stream = streamResourceInfo1.Stream)
                                {
                                    if (notifyIcon != null)
                                        notifyIcon.Icon = new Icon(stream);
                                }
                            }
                            streamResourceInfo1 = null;
                            _dataContext.isOnCall = true;
                            _dataContext.IsHoldClicked = true;
                            _dataContext.IsDialEnabled = false;
                            _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                            _dataContext.DialText = (String)FindResource("KeyDial");
                            ChangeVoiceStatus("OnHold");
                            _agentstate = "OnHold";
                            if (_recentContacts != null)
                            {
                                var temp = _recentContacts.GetRange(0, _recentContacts.Count);
                                temp.RemoveAll(x => x.Length > _dataContext.ConsultDialDigits);
                                txtDN.ItemsSource = (temp as IEnumerable<string>).Reverse(); ;
                            }
                            break;

                        case "CallRinging":
                            foreach (Window item in OwnedWindows)
                                if (item.Name == "MessageWindow" || item.Name == "RefineWindow")
                                    item.Close();
                            if (WindowState != WindowState.Normal)
                            {
                                WindowState = WindowState.Normal;
                            }
                            if (!this.Topmost)
                            {
                                this.Topmost = true;
                                this.Topmost = false;
                            }
                            CloseOutboundScreenPop();
                            //if (_dataContext.userAttachData != null && _dataContext.userAttachData.Count > 0 && _dataContext.userAttachData.ContainsKey("MemberType"))
                            //{
                            //    if (_dataContext.userAttachData["MemberType"].ToString().ToUpper() == "EPIC")
                            //    {
                            //        _dataContext.EpicImageSource = _imageDatacontext.ImgEpic;
                            //        _dataContext.IsEpicEnabled = true;
                            //        btnEpic.Visibility = System.Windows.Visibility.Visible;
                            //    }
                            //}
                            //SetDispositionCode(agentStatusNotify.ConnId);
                            //ShowDisposition(agentStatusNotify.ConnId);

                            //Code Added - Condition added to do auto answer
                            //28.10.2013 - V.Palaniappan
                            if (_dataContext.IsCallWindowEnabled)
                            {
                                if (_dataContext.DispositionVisibility == Visibility.Visible)
                                {
                                    _dataContext.DispositionOnlyVisibility = Visibility.Visible;
                                }

                                if (DataTabControl.Items.Contains(calldata))
                                {
                                    gridVoiceContact.Children.Clear();
                                    DataTabControl.Items.Remove(calldata);
                                }

                                if (!DataTabControl.Items.Contains(DispositionTab))
                                    DataTabControl.Items.Add(DispositionTab);
                            }
                            else
                            {
                                if (!DataTabControl.Items.Contains(calldata))
                                    DataTabControl.Items.Add(calldata);

                                if (DataTabControl.Items.Contains(DispositionTab))
                                    DataTabControl.Items.Remove(DispositionTab);

                                //To add attach data in context menu of add button
                                _dataContext.CallDataAdd.Items.Clear();
                                try
                                {
                                    if (_configContainer.AllKeys.Contains("VoiceAttachDataKey") && _configContainer.GetValue("VoiceAttachDataKey") != null)
                                        foreach (string item in ((List<string>)_configContainer.GetValue("VoiceAttachDataKey")))
                                        {
                                            string keyValue = _dataContext.userAttachData.Where(x => x.Key.ToLower().Replace(" ", string.Empty) == item.ToLower().Replace(" ", string.Empty)).FirstOrDefault().Key;
                                            if (!(keyValue != null && keyValue != string.Empty))
                                            {
                                                MenuItem _mItem = new MenuItem();
                                                _mItem.Header = item;
                                                _mItem.Click += new RoutedEventHandler(CallDataAddMenuitem_Click);
                                                _dataContext.CallDataAdd.Style = (Style)FindResource("Contextmenu");
                                                _dataContext.CallDataAdd.Items.Add(_mItem);
                                            }
                                        }
                                    if (_configContainer.AllKeys.Contains("voice.enable.add-case-data") && ((string)_configContainer.GetValue("voice.enable.add-case-data")).ToLower().Equals("true"))
                                        if (_dataContext.CallDataAdd.Items.Count >= 1)
                                            _dataContext.IsVoiceEnabledAddCallData = System.Windows.Visibility.Visible;
                                        else
                                            _dataContext.IsVoiceEnabledAddCallData = System.Windows.Visibility.Collapsed;
                                }
                                catch (Exception generalException)
                                {
                                    _logger.Error("Error while adding the context menu items for call data" + generalException.ToString());
                                }
                            }
                            if (_configContainer.AllKeys.Contains("voice.enable.auto-answer") &&
                                    _configContainer.GetAsBoolean("voice.enable.auto-answer"))
                            {
                                //Thread autoAnswerThread = new Thread(new ThreadStart(AutoAnswer));
                                //autoAnswerThread.Start();

                                if (_agentstate.Contains("Not Ready") && !_configContainer.GetAsBoolean("voice.enable.auto-answer-on-not-ready", true))
                                    goto DefaultAnswer;
                                else
                                {
                                    softAnswerCallBasedConfig(true);
                                    goto AfterAnswer;
                                }
                            }

                        DefaultAnswer:
                            softAnswerCallBasedConfig(false);

                        AfterAnswer:

                            _dataContext.IsReconnectClicked = false;
                            //To make answer timer value as Zero and start from the beginning
                            _dataContext.IsHoldClicked = true;
                            //End

                            //Code Added - To disable Logout button while call is on ringing
                            //30.09.2013 V.Palaniappan
                            btnLogin.IsEnabled = false;
                            _dataContext.LogImageSource = _imageDatacontext.ImgLogoutDisabled;
                            _dataContext.LogText = (String)FindResource("keyLogout");
                            //End
                            _dataContext.IsDialEnabled = false;
                            _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                            _dataContext.DialText = (String)FindResource("KeyDial");
                            ChangeVoiceStatus("OnRinging");
                            _agentstate = "OnRinging";
                            if (_recentContacts != null)
                            {
                                var temp = _recentContacts.GetRange(0, _recentContacts.Count);
                                temp.RemoveAll(x => x.Length > _dataContext.ConsultDialDigits);
                                txtDN.ItemsSource = (temp as IEnumerable<string>).Reverse(); ;
                            }

                            if (WindowState != WindowState.Normal)
                            {
                                WindowState = WindowState.Normal;
                            }

                            //Code added by Manikandan on 08-04-2014 to show CallInfo window if Enable.view key is true
                            if (_dataContext.IsCallWindowEnabled)
                            {
                                _dataContext.A_DataTabVisibility = Visibility.Collapsed;
                                CallInfo callInfo = new CallInfo();
                                callInfo.Show();
                            }
                            //End
                            else
                            {
                                _logger.Trace("Call data contains : " + DataTabControl.Items.Contains(calldata).ToString() + "\\n" + "window state : " + WindowState.ToString());
                                if (!DataTabControl.Items.Contains(calldata))
                                    DataTabControl.Items.Add(calldata);

                                if (WindowState == WindowState.Normal)
                                {
                                    if (_dataContext.BottomRowHeight == new GridLength(0))
                                    {
                                        _dataContext.Bottomwindow = Datacontext.OpendBy.Workspace;
                                        _dataContext.WorksapceTabVisibility = Visibility.Visible;
                                        _dataContext.MessageTabVisibility = Visibility.Hidden;
                                        _dataContext.ContactTabVisibility = Visibility.Hidden;

                                        if (_configContainer.GetAsBoolean("voice.enable.auto.popup-case-data", false))
                                            btnOpenCallDataWin_Click(null, null);
                                        else
                                        {
                                            if (_configContainer.GetAsBoolean("voice.enable.case-data", true))
                                            {
                                                if (DataTabControl.Items.Contains(calldata))
                                                {
                                                    DataTabControl.SelectedItem = calldata;
                                                    tb_CallData.SelectedIndex = 0;
                                                }
                                                Interactiondata.Visibility = System.Windows.Visibility.Visible;
                                                if (_dataContext.BottomRowHeight == new GridLength(0))
                                                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), false);
                                            }
                                            else if (!_isopendbyUser && _dataContext.BottomRowHeight != new GridLength(0))
                                            {
                                                btn_Hide_Click(null, null);
                                            }
                                        }
                                        InitialloadData();
                                    }
                                    else
                                    {
                                        if (_dataContext.Bottomwindow == Datacontext.OpendBy.MyMessage || _dataContext.Bottomwindow == Datacontext.OpendBy.MyContact)
                                        {
                                            _dataContext.Bottomwindow = Datacontext.OpendBy.Workspace;
                                        }
                                        _dataContext.WorksapceTabVisibility = Visibility.Visible;
                                        _dataContext.MessageTabVisibility = Visibility.Hidden;
                                        _dataContext.ContactTabVisibility = Visibility.Hidden;

                                        if (_configContainer.GetAsBoolean("voice.enable.auto.popup-case-data", false))
                                            btnOpenCallDataWin_Click(null, null);
                                        else
                                        {
                                            if (_configContainer.GetAsBoolean("voice.enable.case-data", true))
                                            {
                                                if (DataTabControl.Items.Contains(calldata))
                                                {
                                                    DataTabControl.SelectedItem = calldata;
                                                    tb_CallData.SelectedIndex = 0;
                                                }
                                                Interactiondata.Visibility = System.Windows.Visibility.Visible;
                                                if (_dataContext.BottomRowHeight == new GridLength(0))
                                                    SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), false);
                                            }
                                            else if (!_isopendbyUser && _dataContext.BottomRowHeight != new GridLength(0))
                                            {
                                                btn_Hide_Click(null, null);
                                            }
                                        }
                                        InitialloadData();
                                    }
                                }
                            }
                            break;

                        case "CallDialing":
                            var streamResourceInfo2 = Application.GetResourceStream(new Uri("pack://application:,,,/Agent.Interaction.Desktop;component/Images/NewAgentFull.ico"));
                            if (streamResourceInfo2 != null)
                            {
                                using (Stream stream = streamResourceInfo2.Stream)
                                {
                                    if (notifyIcon != null)
                                        notifyIcon.Icon = new Icon(stream);
                                }
                            }
                            streamResourceInfo2 = null;

                            //Code Added by Manikandan to implement calldata window during call dialling
                            //if (agentStatusNotify.CallType != null && agentStatusNotify.CallType != "Consult")
                            //    ShowDisposition(agentStatusNotify.ConnId);
                            //SetDispositionCode(agentStatusNotify.ConnId);
                            //End

                            if (_dataContext.userAttachData.ContainsKey("OperationMode") && _dataContext.userAttachData["OperationMode"] == "Transfer")
                            {
                                _dataContext.IsInitiateTransClicked = true;
                            }

                            ChangeVoiceStatus("OnDialing");
                            _agentstate = "OnDialing";
                            //_dataContext.CallTypeStatus = _dataContext.CallType + "  Call to " + " - " + "  " + _dataContext.DialedNumber;
                            if (_dataContext.SwitchName.ToLower().Contains("nortel"))
                            {
                            }
                            else
                            {
                                if (_isTransferClick)
                                {
                                    _isTransferClick = false;
                                    var soft = new SoftPhone();
                                    soft.CompleteTransfer();
                                }
                            }
                            _dataContext.IsDialEnabled = false;
                            //if (_dataContext.DialImageSource == null ||
                            //    _dataContext.DialImageSource.ToString().Contains("Call.Dial.Disable.png"))
                            //    return;
                            _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                            //_dataContext.DialImageSource =
                            //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png", UriKind.Relative));
                            _dataContext.DialText = (String)FindResource("KeyDial");
                            if (_configContainer.GetAsBoolean("voice.enable.auto.popup-case-data", false))
                                btnOpenCallDataWin_Click(null, null);
                            else
                            {
                                if (_configContainer.GetAsBoolean("voice.enable.case-data", true))
                                {
                                    if (DataTabControl.Items.Contains(calldata))
                                    {
                                        DataTabControl.SelectedItem = calldata;
                                        tb_CallData.SelectedIndex = 0;
                                    }
                                    Interactiondata.Visibility = System.Windows.Visibility.Visible;
                                    if (_dataContext.BottomRowHeight == new GridLength(0))
                                        SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), false);
                                }
                                else if (!_isopendbyUser && _dataContext.BottomRowHeight != new GridLength(0))
                                {
                                    btn_Hide_Click(null, null);
                                }
                            }
                            break;

                        case "OnRetrieve":
                            _isAgentClickNRCodeOnCall = false;
                            var streamResourceInfo3 = Application.GetResourceStream(new Uri("pack://application:,,,/Agent.Interaction.Desktop;component/Images/NewAgentFull.ico"));
                            if (streamResourceInfo3 != null)
                            {
                                using (Stream stream = streamResourceInfo3.Stream)
                                {
                                    if (notifyIcon != null)
                                        notifyIcon.Icon = new Icon(stream);
                                }
                            }
                            streamResourceInfo3 = null;
                            _dataContext.IsReconnectClicked = false;
                            _dataContext.IsHoldClicked = false;
                            if (!(_dataContext.IsAgentClickedReady &&
                                _dataContext.VoiceNotReadyReasonCode == ""))
                            {
                                _dataContext.IsAgentClickedReady = false;
                            }
                            if (WindowState == WindowState.Normal)
                            {
                                if (_configContainer.GetAsBoolean("voice.enable.case-data", true))
                                {
                                    //Code Added by Manikandan on 08-04-2014 to show call info in enable.view is true
                                    if (_dataContext.IsCallWindowEnabled)
                                    {
                                        _dataContext.A_DataTabVisibility = Visibility.Collapsed;
                                        var window = IsWindowOpen<Window>("UserCallInfo");
                                        if (window != null)
                                        {
                                            if (window.WindowState == WindowState.Minimized)
                                            {
                                                window.WindowState = WindowState.Normal;
                                                window.Focus();
                                            }
                                            else
                                                window.Focus();
                                        }
                                    }
                                }
                            }
                            if (_configContainer.AllKeys.Contains("voice.enable.dtmf") &&
                             ((string)_configContainer.GetValue("voice.enable.dtmf")).ToLower().Equals("true"))
                            {
                                _dataContext.IsDialEnabled = true;
                                _dataContext.DialText = (String)FindResource("KeyDTMF");
                                _dataContext.DialImageSource = _imageDatacontext.ImgDialPadEnabled;
                            }
                            else
                            {
                                _dataContext.IsDialEnabled = false;
                                _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                                _dataContext.DialText = (String)FindResource("KeyDial");
                            }
                            ChangeVoiceStatus("OnCall");
                            _agentstate = "OnCall";
                            _dataContext.DiallingNumber = string.Empty;
                            _dataContext.isOnCall = true;
                            if (_recentContacts == null) return;
                            var temp1 = _recentContacts.GetRange(0, _recentContacts.Count);
                            temp1.RemoveAll(x => x.Length > _dataContext.ConsultDialDigits);
                            txtDN.ItemsSource = (temp1 as IEnumerable<string>).Reverse(); ;
                            break;

                        case "Logout":
                            _isAgentClickNRCodeOnCall = false;
                            _logger.Debug("SoftphoneBar_EventAgentLogout:" + agentStatusNotify.AgentCurrentStatus);
                            _dataContext.IsAgentClickedReady = false;
                            var agentstate = agentStatusNotify.AgentCurrentStatus;
                            if (_dataContext.isDND)
                                agentstate += " (Do Not Disturb)";
                            ChangeVoiceStatus(agentstate);
                            _agentstate = agentstate;
                            _isNrReasonCode = false;
                            _dataContext.CallTypeStatus = string.Empty;
                            if ((_configContainer.AllKeys.Contains("interaction.disposition.is-mandatory") &&
                                    ((string)_configContainer.GetValue("interaction.disposition.is-mandatory")).ToLower().Equals("true")) && !_isDispositionSent)
                            {
                                _dataContext.A_DataTabVisibility = Visibility.Collapsed;
                                _dataContext.TabSelectedIndex = 0;
                            }
                            //code added for force re login - Smoorthy
                            //02-04-2014
                            if ((!_isLogoutFromAID &&
                                _configContainer.AllKeys.Contains("login.voice.enable.force-relogin") &&
                                _configContainer.GetAsBoolean("login.voice.enable.force-relogin")) ||
                                (!_isLogoutFromAID && (_dataContext.isOnCall || Datacontext.isDialling || Datacontext.isRinging)))
                            {
                                _logger.Debug("Login using Place : " + _dataContext.Place + " Username : " + _dataContext.UserName +
                                      " Queue : " + _dataContext.QueueSelectedValue + " Application : " + _dataContext.ApplicationName + " LoginID : " +
                                      _dataContext.AgentLoginId);
                                var voiceLogin = new SoftPhone();
                                string workMode1 = "optional";
                                var output2 = voiceLogin.Login(_dataContext.Place, _dataContext.UserName, workMode1, _dataContext.Queue, _dataContext.AgentLoginId, _dataContext.AgentPassword);
                                if (output2.MessageCode == "200" || output2.MessageCode == "201")
                                {
                                    _isLogoutFromAID = false;
                                    if (_configContainer.AllKeys.Contains("login.voice.enable.auto-ready") &&
                                           ((string)_configContainer.GetValue("login.voice.enable.auto-ready")).ToLower().Equals("true"))
                                    {
                                        var softReady = new SoftPhone();
                                        softReady.Ready();
                                    }
                                }
                                else if (output2.MessageCode == "2004")
                                {
                                    PlaceAlreadyTaken(output2);
                                }
                            }
                            break;

                        case "DNDOn":
                            _logger.Warn("_isDNDFromAID : " + _isDNDFromAID.ToString());
                            _logger.Warn("voice.enable.force.dnd-off : " + _configContainer.GetAsBoolean("voice.enable.force.dnd-off").ToString());
                            _logger.Warn("_dataContext.isDND : " + _dataContext.isDND.ToString());
                            if (!_dataContext.isDND && !_isDNDFromAID &&
                                _configContainer.AllKeys.Contains("voice.enable.force.dnd-off") &&
                                _configContainer.GetAsBoolean("voice.enable.force.dnd-off"))
                            {
                                try
                                {
                                    var imessage = (new SoftPhone()).DNDOffR();
                                    if (imessage != null && imessage is Genesyslab.Platform.Voice.Protocols.TServer.Events.EventError)
                                    {
                                        var DN = Datacontext.DNsCollection.ContainsKey("ACD") ?
                                            Datacontext.DNsCollection["ACD"].ToString() :
                                            (Datacontext.DNsCollection.ContainsKey("Extension") ?
                                            Datacontext.DNsCollection["Extension"].ToString() : "");
                                        (new SoftPhone()).Register(DN);
                                        var imessage1 = (new SoftPhone()).DNDOffR();
                                        if (imessage1 != null && imessage1 is Genesyslab.Platform.Voice.Protocols.TServer.Events.EventDNDOff)
                                        {
                                            _isAgentClickNRCodeOnCall = false;
                                            _dataContext.isAgentExtendACWTime = false;
                                            //var softphoneReady = new SoftPhone();
                                            //softphoneReady.Ready();
                                            _dataContext.VoiceNotReadyReasonCode = "";
                                            // _dataContext.IsAgentClickedReady = true;
                                            _dataContext.isDND = false;
                                            _isDNDFromAID = false;
                                            _logger.Warn("_dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString());
                                            _logger.Warn("_agentstate = " + _agentstate.ToString());
                                            if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice] == "Logout (Do Not Disturb)" || _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].Contains("Logout") || _agentstate.Contains("Logout"))
                                            {
                                                ChangeVoiceStatus("Logout");
                                                _agentstate = "Logout";
                                            }
                                        }
                                        else
                                            _logger.Warn("Event Error occurred during DNDOFF: " + imessage1.ToString());
                                        (new SoftPhone()).UnRegister(DN);
                                    }
                                    else if (imessage != null && imessage is Genesyslab.Platform.Voice.Protocols.TServer.Events.EventDNDOff)
                                    {
                                        _isAgentClickNRCodeOnCall = false;
                                        _dataContext.isAgentExtendACWTime = false;
                                        //var softphoneReady = new SoftPhone();
                                        //softphoneReady.Ready();
                                        _dataContext.VoiceNotReadyReasonCode = "";
                                        // _dataContext.IsAgentClickedReady = true;
                                        _dataContext.isDND = false;
                                        _isDNDFromAID = false;
                                        _logger.Warn("_dataContext.htMediaCurrentState[Datacontext.Channels.Voice] = " + _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString());
                                        _logger.Warn("_agentstate = " + _agentstate.ToString());
                                        if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice] == "Logout (Do Not Disturb)" || _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].Contains("Logout") || _agentstate.Contains("Logout"))
                                        {
                                            ChangeVoiceStatus("Logout");
                                            _agentstate = "Logout";
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.Error("Error occurred while handling unsolicited DNDON as : " + ex.Message);
                                }
                            }
                            else
                            {
                                _isAgentClickNRCodeOnCall = false;
                                _dataContext.VoiceNotReadyReasonCode = "";
                                ChangeVoiceStatus("Do Not Disturb");
                                _agentstate = "Do Not Disturb";
                                _dataContext.isDND = true;
                            }
                            break;

                        case "DNDOff":
                            _isAgentClickNRCodeOnCall = false;
                            _dataContext.isAgentExtendACWTime = false;
                            //var softphoneReady = new SoftPhone();
                            //softphoneReady.Ready();
                            _dataContext.VoiceNotReadyReasonCode = "";
                            // _dataContext.IsAgentClickedReady = true;
                            _dataContext.isDND = false;
                            _isDNDFromAID = false;
                            if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice] == "Logout (Do Not Disturb)" || _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].Contains("Logout") || _agentstate.Contains("Logout"))
                            {
                                ChangeVoiceStatus("Logout");
                                _agentstate = "Logout";
                            }
                            break;

                        case "Abandoned":
                            Datacontext.isRinging = false;
                            _isAgentClickNRCodeOnCall = false;
                            this.StopFlashingWindow(0);
                            var streamResourceInfo4 = Application.GetResourceStream(new Uri("pack://application:,,,/Agent.Interaction.Desktop;component/Images/Pointelsoftphone32x32.ico"));
                            if (streamResourceInfo4 != null)
                            {
                                using (Stream stream = streamResourceInfo4.Stream)
                                {
                                    if (notifyIcon != null)
                                        notifyIcon.Icon = new Icon(stream);
                                }
                            }
                            streamResourceInfo4 = null;
                            //btn_RightSettingButton.IsEnabled = true;

                            // code added for the purpose of close the outbound screen - PHS
                            if (_dataContext.userAttachData.ContainsKey("CallType") && _dataContext.IsEnableOutboundScreenPop)
                            {
                                if (_dataContext.userAttachData["CallType"] == "Outbound")
                                {
                                    CloseOutboundScreenPop();
                                }
                            }
                            //end

                            _dataContext.userAttachData.Clear();
                            //Code Added - To resolve issue like hidden Interaction data
                            //1.10.2013 V.Palaniappan
                            _dataContext.A_DataTabVisibility = Visibility.Collapsed;
                            if (!_isopendbyUser)
                            {
                                _dataContext.BottomRowHeight = new GridLength(0);
                                MinHeight = grdTitle.ActualHeight + grdTool.ActualHeight + 20;
                                Height = MinHeight;
                                MaxHeight = Height;
                                if (DataTabControl.SelectedItem == popUpUrl)
                                    DataTabControl.SelectedIndex = 0;
                            }
                            else
                            {
                                if (DataTabControl.SelectedItem != popUpUrl)
                                    _dataContext.TabSelectedIndex = 0;
                            }
                            //End
                            _taskbarNotifier.StopTone();
                            _taskbarNotifier.ForceHidden();
                            _dataContext.CallTypeStatus = string.Empty;
                            //Code added on 23/02/2015 to fix UI issue occurred when status change on ringing and abandoned the call.
                            //Not ready and ready button will displayed based on prev status
                            //Below assigned images are commented on this case block
                            SoftPhoneStatusController status = new SoftPhoneStatusController();
                            status.LoginButtonStatus = false;
                            status.LogoutButtonStatus = true;
                            status.ReadyButtonStatus = false;
                            status.NotreadyButtonStatus = false;
                            status.HoldButtonStatus = false;
                            status.RetrieveButtonStatus = false;
                            status.AnswerButtonStatus = false;
                            status.ReleaseButtonStatus = false;
                            status.ConferenceInitiateStatus = false;
                            status.CompleteConferenceStatus = false;
                            status.TransferInitiateStatus = false;
                            status.TransferCompleteStatus = false;
                            status.DeleteConferenceStatus = false;
                            status.CancelConferenceStatus = false;
                            status.CancelTransferStatus = false;
                            status.DialButtonStatus = true;
                            status.AlternateButtonStatus = false;
                            status.MergeButtonStatus = false;
                            //End

                            if (_dataContext.IsAgentClickedReady)
                            {
                                if (_dataContext.StatusChangeOnVoiceInteraction == string.Empty)
                                {
                                    string state = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();
                                    if (state.Equals("Ready"))
                                    {
                                        status.ReadyButtonStatus = false;
                                        status.NotreadyButtonStatus = true;
                                        ChangeVoiceStatus("Ready");
                                        _agentstate = "Ready";
                                    }
                                    else if (state.Contains("Not Ready") || state.Contains("After Call Work"))
                                    {
                                        status.ReadyButtonStatus = true;
                                        status.NotreadyButtonStatus = false;
                                        if (_dataContext.VoiceNotReadyReasonCode != string.Empty)
                                        {
                                            //Condition check on ringing state change AfterCallWork
                                            if (!state.Contains("After Call Work"))
                                            {
                                                _dataContext.IsAgentClickedReady = false;
                                                _isNrReasonCode = true;
                                                ChangeVoiceStatus("Not Ready" + " - " +
                                                                  _dataContext.VoiceNotReadyReasonCode);
                                                _agentstate = "Not Ready" + " - " + _dataContext.VoiceNotReadyReasonCode;
                                            }
                                            else
                                            {
                                                _isNrReasonCode = false;
                                                ChangeVoiceStatus("AfterCallWork1");
                                                _agentstate = "AfterCallWork1";
                                            }
                                        }
                                        else if (state == "Not Ready" || state == "After Call Work" || state == "Do Not Disturb")
                                        {
                                            _isNrReasonCode = false;
                                            ChangeVoiceStatus(state);
                                            _agentstate = state;
                                        }
                                        else
                                        {
                                            _isNrReasonCode = false;
                                            ChangeVoiceStatus("Not Ready");
                                            _agentstate = "Not Ready";
                                        }
                                    }
                                    else if (state == "Logout")
                                    {
                                        _isNrReasonCode = false;
                                        ChangeVoiceStatus(state);
                                        _agentstate = state;
                                        ChangingphoneStatus(GetLogoutStatus());
                                    }
                                }
                                else
                                {
                                    string state = _dataContext.StatusChangeOnVoiceInteraction;
                                    _agentstate = string.Empty;
                                    if (state.Equals("Ready"))
                                    {
                                        status.ReadyButtonStatus = false;
                                        status.NotreadyButtonStatus = true;
                                        ChangeVoiceStatus(state);
                                        _agentstate = state;
                                    }
                                    else if (state.Contains("Not Ready") || state.Contains("After Call Work"))
                                    {
                                        status.ReadyButtonStatus = true;
                                        status.NotreadyButtonStatus = false;
                                        if (_dataContext.VoiceNotReadyReasonCode != string.Empty)
                                        {
                                            if (!state.Contains("After Call Work"))
                                            {
                                                _dataContext.IsAgentClickedReady = false;
                                                _isNrReasonCode = true;
                                                ChangeVoiceStatus("Not Ready" + " - " +
                                                                  _dataContext.VoiceNotReadyReasonCode);
                                                _agentstate = "Not Ready" + " - " + _dataContext.VoiceNotReadyReasonCode;
                                            }
                                            else
                                            {
                                                _isNrReasonCode = false;
                                                ChangeVoiceStatus("AfterCallWork1");
                                                _agentstate = "AfterCallWork1";
                                            }
                                        }
                                        else if (state == "Not Ready" || state == "After Call Work")
                                        {
                                            _isNrReasonCode = false;
                                            ChangeVoiceStatus("Not Ready");
                                            _agentstate = "Not Ready";
                                        }
                                        else
                                        {
                                            _isNrReasonCode = false;
                                            ChangeVoiceStatus("Not Ready");
                                            _agentstate = "Not Ready";
                                        }
                                    }
                                    else if (state == "Logout")
                                    {
                                        _isNrReasonCode = false;
                                        ChangeVoiceStatus(state);
                                        _agentstate = state;
                                        ChangingphoneStatus(GetLogoutStatus());
                                    }
                                }
                                if (!_agentstate.Equals("Ready"))
                                {
                                    _dataContext.IsAgentClickedReady = false;
                                }
                            }
                            else
                            {
                                if (_dataContext.StatusChangeOnVoiceInteraction == string.Empty)
                                {
                                    string state = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();

                                    if (state.Equals("Ready"))
                                    {
                                        status.ReadyButtonStatus = false;
                                        status.NotreadyButtonStatus = true;
                                        ChangeVoiceStatus("Ready");
                                        _agentstate = "Ready";
                                    }
                                    else if (state.Contains("Not Ready") || state.Contains("After Call Work"))
                                    {
                                        status.ReadyButtonStatus = true;
                                        status.NotreadyButtonStatus = false;
                                        if (_dataContext.VoiceNotReadyReasonCode != string.Empty)
                                        {
                                            if (!state.Contains("After Call Work"))
                                            {
                                                _dataContext.IsAgentClickedReady = false;
                                                _isNrReasonCode = true;
                                                ChangeVoiceStatus("Not Ready" + " - " +
                                                                  _dataContext.VoiceNotReadyReasonCode);
                                                _agentstate = "Not Ready" + " - " + _dataContext.VoiceNotReadyReasonCode;
                                            }
                                            else
                                            {
                                                _isNrReasonCode = false;
                                                ChangeVoiceStatus("AfterCallWork1");
                                                _agentstate = "AfterCallWork1";
                                            }
                                        }
                                        else if (state == "Not Ready" || state == "After Call Work" || state == "Do Not Disturb")
                                        {
                                            _isNrReasonCode = false;
                                            ChangeVoiceStatus(state);
                                            _agentstate = state;
                                        }
                                        else
                                        {
                                            _isNrReasonCode = false;
                                            ChangeVoiceStatus("Not Ready");
                                            _agentstate = "Not Ready";
                                        }
                                    }
                                    else if (state == "Logout")
                                    {
                                        _isNrReasonCode = false;
                                        ChangeVoiceStatus(state);
                                        _agentstate = state;
                                        ChangingphoneStatus(GetLogoutStatus());
                                    }
                                }
                                string state1 = _dataContext.StatusChangeOnVoiceInteraction;
                                if (state1.Equals("Ready"))
                                {
                                    status.ReadyButtonStatus = false;
                                    status.NotreadyButtonStatus = true;
                                    _agentstate = string.Empty;
                                    ChangeVoiceStatus(state1);
                                    _agentstate = state1;
                                }
                                else if (state1.Contains("Not Ready") || state1.Contains("After Call Work") || state1 == "Do Not Disturb")
                                {
                                    status.ReadyButtonStatus = true;
                                    status.NotreadyButtonStatus = false;
                                    if (_dataContext.VoiceNotReadyReasonCode != string.Empty)
                                    {
                                        if (!state1.Contains("After Call Work"))
                                        {
                                            _dataContext.IsAgentClickedReady = false;
                                            _isNrReasonCode = true;
                                            _agentstate = string.Empty;
                                            ChangeVoiceStatus("Not Ready" + " - " +
                                                              _dataContext.VoiceNotReadyReasonCode);
                                            _agentstate = "Not Ready" + " - " + _dataContext.VoiceNotReadyReasonCode;
                                        }
                                        else
                                        {
                                            _isNrReasonCode = false;
                                            _agentstate = string.Empty;
                                            ChangeVoiceStatus("AfterCallWork1");
                                            _agentstate = "AfterCallWork1";
                                        }
                                    }
                                    else if (state1 == "Not Ready" || state1 == "After Call Work")
                                    {
                                        _isNrReasonCode = false;
                                        _agentstate = string.Empty;
                                        ChangeVoiceStatus("Not Ready");
                                        _agentstate = "Not Ready";
                                    }
                                    else if (state1 == "Do Not Disturb")
                                    {
                                        _isNrReasonCode = false;
                                        _agentstate = string.Empty;
                                        ChangeVoiceStatus(state1);
                                        _agentstate = state1;
                                    }
                                    else
                                    {
                                        _isNrReasonCode = false;
                                        _agentstate = string.Empty;
                                        ChangeVoiceStatus("Not Ready");
                                        _agentstate = "Not Ready";
                                    }
                                }
                                else if (state1 == "Logout")
                                {
                                    _isNrReasonCode = false;
                                    _agentstate = string.Empty;
                                    ChangeVoiceStatus(state1);
                                    _agentstate = state1;
                                    ChangingphoneStatus(GetLogoutStatus());
                                }
                            } //End
                            _dataContext.StatusChangeOnVoiceInteraction = string.Empty;

                            //Code Added by Manikandan on 08-04-2014 to close the call info window id Enable.view is true
                            if (_dataContext.IsCallWindowEnabled)
                            {
                                var window = IsWindowOpen<Window>("UserCallInfo");
                                if (window != null)
                                    window.Close();
                            }
                            if (_configContainer.GetAsBoolean("voice.enable.popup-case-data", false) || _configContainer.GetAsBoolean("voice.enable.auto.popup-case-data", false))
                                CloseCallDataWindow();
                            ChangingphoneStatus(status);
                            status = null;
                            //End
                            break;
                    }

                    #region Release Status

                    if (agentStatusNotify.AgentCurrentStatus.Contains("OnRelease") || agentStatusNotify.AgentCurrentStatus.Contains("&") ||
                        agentStatusNotify.AgentCurrentStatus.Contains("@"))
                    {
                        _dataContext.IsShowMIDPushButton = System.Windows.Visibility.Collapsed;
                        _logger.Debug("SoftPhoneBar_agentStatusListener : Release entry");
                        _isAgentClickNRCodeOnCall = false;
                        _logger.Debug("SoftphoneBar_agentStatusListener:Current Call State:" +
                                    agentStatusNotify.AgentCurrentStatus);
                        this.StopFlashingWindow(0);
                        var streamResourceInfo5 = Application.GetResourceStream(new Uri("pack://application:,,,/Agent.Interaction.Desktop;component/Images/Pointelsoftphone32x32.ico"));
                        if (streamResourceInfo5 != null)
                        {
                            using (Stream stream = streamResourceInfo5.Stream)
                            {
                                if (notifyIcon != null)
                                    notifyIcon.Icon = new Icon(stream);
                            }
                        }
                        streamResourceInfo5 = null;

                        //below Code added for the purpose of dtmf
                        //Smoorthy
                        if (!_dataContext.isOnCall)
                        {
                            btnLogin.IsEnabled = true;
                            _dataContext.LogImageSource = _imageDatacontext.ImgLogoutEnabled;
                            _dataContext.DialText = (String)FindResource("KeyDial");
                            //DailContent.Text = "Make Call to entered number.";
                            _dataContext.DialedDigits = string.Empty;
                        }
                        else
                        {
                            btnLogin.IsEnabled = false;
                            _dataContext.LogImageSource = _imageDatacontext.ImgLogoutDisabled;
                            _dataContext.DialText = (String)FindResource("KeyDTMF");
                            _logger.Info("Setting dtmf button and logout disable");
                            //DailContent.Text = "Make Call to entered number.";
                            _dataContext.DialedDigits = string.Empty;
                        }

                        //end
                        //btn_RightSettingButton.IsEnabled = true;
                        //Code Added - V.Palaniappan
                        //11.11.2013
                        _dataContext.isOnCall = false;
                        //if (!_dataContext.isOnCall)
                        _dataContext.CallTypeStatus = string.Empty;
                        _logger.Debug("SoftphoneBar_agentStatusListener:Call Status:" +
                                    _dataContext.CallTypeStatus);
                        //End
                        txtDN.ItemsSource = (_recentContacts as IEnumerable<string>).Reverse();
                        _dataContext.IsDialEnabled = true;

                        // code added for the purpose of close the outbound screen - PHS
                        if (_dataContext.userAttachData.ContainsKey("CallType") && _dataContext.IsEnableOutboundScreenPop)
                        {
                            if (_dataContext.userAttachData["CallType"] == "Outbound")
                            {
                                CloseOutboundScreenPop();
                            }
                        }
                        //end

                        //Code Added V.Palaniappan
                        //01.10.2013
                        _dataContext.userAttachData.Clear();
                        //End
                        //Code Added by Manikandan on 08-04-20104 to close callinfo window during onreleased state if Enable.view is true

                        #region if check for "OnRelease"

                        if (agentStatusNotify.AgentCurrentStatus.Equals("OnRelease"))
                        {
                            _talkTime = 0;
                            _holdTime = 0;
                            //Code added by Manikandan on 08-05-2014 to implement Multiple Member ID
                            _dataContext.CurrentMemberId = 0;
                            _dataContext.MemberId.Clear();
                            _dataContext.userAttachData.Clear();
                            //End
                            _dataContext.isOnCall = false;
                            Datacontext.isDialling = false;
                            Datacontext.isRinging = false;
                            dispositionGrid.Children.Clear();
                            var messageWindow = IsWindowOpen<Window>("DispositionMadatory");
                            if (messageWindow != null)
                                messageWindow.Close();
                            if (_configContainer.GetAsBoolean("voice.enable.popup-case-data", false) || _configContainer.GetAsBoolean("voice.enable.auto.popup-case-data", false))
                                CloseCallDataWindow();
                            if (_dataContext.IsCallWindowEnabled)
                            {
                                _dataContext.DispositionOnlyVisibility = Visibility.Collapsed;
                                var window = IsWindowOpen<Window>("UserCallInfo");
                                if (window != null)
                                    window.Close();
                            }
                            //else if (!_isopendbyUser)
                            //{
                            //    _dataContext.A_DataTabVisibility = Visibility.Collapsed;
                            //}
                            //if (_popupTabEnabled)
                            //{
                            //    if (_dataContext.BottomRowHeight == new GridLength(0))
                            //    {
                            //        SetBottomwindow(Datacontext.OpendBy.Workspace.ToString(), true);
                            //    }
                            //    else if (_dataContext.Bottomwindow == Datacontext.OpendBy.MyMessage || _dataContext.Bottomwindow == Datacontext.OpendBy.MyContact)
                            //    {
                            //        _dataContext.Bottomwindow = Datacontext.OpendBy.Workspace;
                            //        _dataContext.WorksapceTabVisibility = Visibility.Visible;
                            //        _dataContext.MessageTabVisibility = Visibility.Hidden;
                            //        _dataContext.ContactTabVisibility = Visibility.Hidden;
                            //        InitialloadData();
                            //    }
                            //    if (DataTabControl.Items.Contains(popUpUrl) && DataTabControl.SelectedItem != popUpUrl)
                            //    {
                            //        DataTabControl.SelectedItem = popUpUrl;
                            //        _isopendbyUser = true;
                            //    }
                            //}
                            else if ((DataTabControl.SelectedItem as TabItem) == calldata ||
                                (DataTabControl.SelectedItem as TabItem) == DispositionTab)
                            {
                                if (_isopendbyUser)
                                {
                                    if (DataTabControl.SelectedItem != popUpUrl)
                                        DataTabControl.SelectedIndex = 0;
                                }
                                else if (_dataContext.BottomRowHeight != new GridLength(0))
                                {
                                    btn_Hide_Click(null, null);
                                }
                            }

                            if (DataTabControl.Items.Contains(DispositionTab))
                                DataTabControl.Items.Remove(DispositionTab);

                            if (_isAgentLoginClicked)
                            {
                                ChangeVoiceStatus("Logout");
                                _agentstate = "Logout";
                            }

                            //_dataContext.IsEpicEnabled = false;
                            //btnEpic.Visibility = Visibility.Collapsed;
                            //btnEpic.Width = 0;
                            //btnEpic.MinWidth = 0;
                            //btnEpic.MaxHeight = 0;
                            //btnEpic.MinHeight = 0;
                            //btnEpic.MaxWidth = 0;
                        }

                        #endregion if check for "OnRelease"

                        txtDN.Text = string.Empty;
                        _dataContext.isAgentExtendACWTime = false;

                        #region if check for StatusChangeOnVoiceInteraction == string.Empty

                        if (_dataContext.StatusChangeOnVoiceInteraction == string.Empty)
                        {
                            //if (_configContainer.AllKeys.Contains("voice.acw.enabled") &&
                            //        ((string)_configContainer.GetValue("voice.acw.enabled")).ToLower().Equals("true"))
                            //{
                            //}
                            //else
                            //{
                            if (_dataContext.IsAgentClickedReady)
                            {
                                ChangeVoiceStatus("Ready");
                                _agentstate = "Ready";
                                if (_dataContext.ReadyText != "Not Ready")
                                {
                                    _dataContext.ReadyImageSource = _imageDatacontext.ImgNotReadyEnabled;
                                    //_dataContext.ReadyImageSource =
                                    //    GetBitmapImage(new Uri(_imagePath + "\\Call.NotReady.png",
                                    //        UriKind.Relative));
                                    _dataContext.ReadyText = (String)FindResource("keyNotReady");
                                }
                                //Code Added - V.Palaniappan
                                //06.11.2013 - This condition has been added due to avoid displaying inbound/outbound call status after releasing the call from customer side
                                if (!_dataContext.isOnCall)
                                    _dataContext.CallTypeStatus = string.Empty;
                                //End
                            }
                            else
                            {
                                if (!_dataContext.VoiceNotReadyReasonCode.Equals("After Call Work") &&
                                    !_dataContext.VoiceNotReadyReasonCode.Equals(""))
                                {
                                    ChangeVoiceStatus("Not Ready" + " - " +
                                                        _dataContext.VoiceNotReadyReasonCode);
                                    _agentstate = "Not Ready" + " - " +
                                                    _dataContext.VoiceNotReadyReasonCode;
                                }
                                if (_dataContext.VoiceNotReadyReasonCode.Equals(""))
                                {
                                    ChangeVoiceStatus("Not Ready");
                                    _agentstate = "Not Ready";
                                }
                                if (_dataContext.ReadyText != "Ready")
                                {
                                    if (_dataContext.IsReadyEnabled)
                                    {
                                        _dataContext.ReadyImageSource = _imageDatacontext.ImgReadyEnabled;
                                        //_dataContext.ReadyImageSource =
                                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Ready.png",
                                        //        UriKind.Relative));
                                        _dataContext.ReadyText = (String)FindResource("keyReady");
                                    }
                                    else
                                    {
                                        _dataContext.ReadyImageSource = _imageDatacontext.ImgReadyDisabled;
                                        //_dataContext.ReadyImageSource =
                                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Ready.png",
                                        //        UriKind.Relative));
                                        _dataContext.ReadyText = (String)FindResource("keyReady");
                                    }
                                }
                            }
                            //}

                            if (!agentStatusNotify.AgentCurrentStatus.Equals("OnRelease&Consult") &&
                                !agentStatusNotify.AgentCurrentStatus.Contains("@") &&
                                !agentStatusNotify.AgentCurrentStatus.Contains("OnRelease") &&
                                !agentStatusNotify.AgentCurrentStatus.Contains("OnRelease&ConsultTransfer"))
                            //if (agentStatusNotify.AgentCurrentStatus.Contains("&"))
                            {
                                if (!_dataContext.IsReconnectClicked)
                                {
                                    _dataContext.IsHoldClicked = false;

                                    if (!_dataContext.IsAgentClickedReady)
                                    {
                                        ChangeVoiceStatus("Not Ready");
                                        _agentstate = "Not Ready";
                                        if (_dataContext.ReadyText != "Ready")
                                        {
                                            if (_dataContext.IsReadyEnabled)
                                            {
                                                _dataContext.ReadyImageSource = _imageDatacontext.ImgReadyEnabled;
                                                //_dataContext.ReadyImageSource =
                                                //    GetBitmapImage(new Uri(_imagePath + "\\Call.Ready.png",
                                                //        UriKind.Relative));
                                                _dataContext.ReadyText = (String)FindResource("keyReady");
                                            }
                                            else
                                            {
                                                _dataContext.ReadyImageSource = _imageDatacontext.ImgReadyDisabled;
                                                //_dataContext.ReadyImageSource =
                                                //    GetBitmapImage(new Uri(_imagePath + "\\Call.Ready.png",
                                                //        UriKind.Relative));
                                                _dataContext.ReadyText = (String)FindResource("keyReady");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ChangeVoiceStatus("Ready");
                                        _agentstate = "Ready";
                                        if (_dataContext.ReadyText != "Not Ready")
                                        {
                                            _dataContext.ReadyImageSource =
                                                GetBitmapImage(new Uri(_imagePath + "\\Call.NotReady.png",
                                                    UriKind.Relative));
                                            _dataContext.ReadyText = (String)FindResource("keyNotReady");
                                        }
                                    }
                                }
                            }
                            //Code Added - V.PAlaniappan
                            //18.10.2013
                            else if (agentStatusNotify.AgentCurrentStatus.Contains("@"))
                            {
                                this.StopFlashingWindow(0);
                                //btn_RightSettingButton.IsEnabled = true;
                                _dataContext.IsHoldClicked = false;
                                _dataContext.isOnCall = true;
                                //Code Added - V.Palaniappan
                                //18.10.2013
                                if (_dataContext.IsInitiateConfClicked)
                                {
                                    _dataContext.IsInitiateConfClicked = false;
                                }
                                if (_dataContext.IsInitiateTransClicked)
                                {
                                    _dataContext.IsInitiateTransClicked = false;
                                }
                                //End
                                _dataContext.IsDialEnabled = false;
                                //if (_dataContext.DialImageSource != null &&
                                //    !Datacontext.GetInstance().DialImageSource.ToString().Contains("Call.Dial.Disable.png"))
                                {
                                    _dataContext.DialImageSource = _imageDatacontext.ImgDialPadDisabled;
                                    //_dataContext.DialImageSource =
                                    //    GetBitmapImage(new Uri(_imagePath + "\\Call.Dial.Disable.png",
                                    //        UriKind.Relative));
                                    _dataContext.DialText = (String)FindResource("KeyDial");
                                }
                                txtDN.Text = string.Empty;
                                ChangeVoiceStatus("OnCall");
                                _agentstate = "OnCall";
                                _taskbarNotifier.StopTone();
                                _taskbarNotifier.ForceHidden();
                                if (_recentContacts != null)
                                {
                                    List<string> temp = _recentContacts.GetRange(0, _recentContacts.Count);
                                    temp.RemoveAll(x => x.Length > _dataContext.ConsultDialDigits);
                                    txtDN.ItemsSource = (temp as IEnumerable<string>).Reverse(); ;
                                }
                            }
                            //End
                            else
                            {
                                _logger.Info("ReconnectClicked : " + _dataContext.IsReconnectClicked.ToString());
                                _logger.Info("InitiateTransClicked : " + _dataContext.IsInitiateTransClicked.ToString());
                                _logger.Info("InitiateConfClicked : " + _dataContext.IsInitiateConfClicked.ToString());
                                //Condition Added - To resolve displaying Agent Status as Ready if second agent is oncall while doing single step transfer
                                //19.11.2013 - V.Palaniappan
                                if (agentStatusNotify.AgentCurrentStatus.Contains("OnRelease&Consult"))
                                {
                                    _logger.Info("Making IsInitiateTransClicked true for consult release before complete transfer");
                                    _dataContext.IsInitiateTransClicked = true;
                                }
                                //End
                                if (!_dataContext.IsReconnectClicked &&
                                    !_dataContext.IsInitiateTransClicked &&
                                    !_dataContext.IsInitiateConfClicked)
                                {
                                    _talkTime = 0;

                                    //Condition Added to avoid issues like once the call has retrieved from softphone
                                    //it will go to release state instead of Oncall state but timer showing like Oncall
                                    if (!_dataContext.IsHoldClicked)
                                    {
                                        _dataContext.IsHoldClicked = true;
                                        if (_dataContext.IsAgentClickedReady)
                                        {
                                            _logger.Info("IsAgentClickedReady : " + _dataContext.IsAgentClickedReady.ToString());
                                            //Code commented by vinoth for acw and oncall status on title bar after call release
                                            //if (_dataContext.IsEnableACW)
                                            //{
                                            //_logger.Debug("ACW is enabled");
                                            //if (!agentStatusNotify.AgentCurrentStatus.Equals(
                                            //        "OnRelease&CompleteConference"))
                                            //{
                                            //    _logger.Debug("Agent Current Status : " + agentStatusNotify.AgentCurrentStatus);
                                            //    StartAgentWrapUpTimer();
                                            //}
                                            //}
                                            string state = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();

                                            if (state.Equals("Ready"))
                                            {
                                                ChangeVoiceStatus("Ready");
                                                _agentstate = "Ready";
                                                if (_dataContext.ReadyText != "Not Ready")
                                                {
                                                    _dataContext.ReadyImageSource = _imageDatacontext.ImgNotReadyEnabled;
                                                    //_dataContext.ReadyImageSource =
                                                    //    GetBitmapImage(new Uri(_imagePath + "\\Call.NotReady.png",
                                                    //        UriKind.Relative));
                                                    _dataContext.ReadyText = (String)FindResource("keyNotReady");
                                                }
                                            }
                                            else if (state.Contains("Not Ready") || state.Contains("After Call Work"))
                                            {
                                                if (_dataContext.VoiceNotReadyReasonCode != string.Empty)
                                                {
                                                    _dataContext.IsAgentClickedReady = false;
                                                    _isNrReasonCode = true;
                                                    ChangeVoiceStatus("Not Ready" + " - " +
                                                                      _dataContext.VoiceNotReadyReasonCode);
                                                    _agentstate = "Not Ready" + " - " + _dataContext.VoiceNotReadyReasonCode;
                                                }
                                                else if (state == "Not Ready" || state == "After Call Work")
                                                {
                                                    _isNrReasonCode = false;
                                                    ChangeVoiceStatus(state);
                                                    _agentstate = state;
                                                }
                                                if (_dataContext.ReadyText != "Ready")
                                                {
                                                    if (_dataContext.IsReadyEnabled)
                                                    {
                                                        _dataContext.ReadyImageSource = _imageDatacontext.ImgReadyEnabled;
                                                        //_dataContext.ReadyImageSource =
                                                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Ready.png",
                                                        //        UriKind.Relative));
                                                        _dataContext.ReadyText = (String)FindResource("keyReady");
                                                    }
                                                    else
                                                    {
                                                        _dataContext.ReadyImageSource = _imageDatacontext.ImgReadyDisabled;
                                                        //_dataContext.ReadyImageSource =
                                                        //    GetBitmapImage(new Uri(_imagePath + "\\Call.Ready.png",
                                                        //        UriKind.Relative));
                                                        _dataContext.ReadyText = (String)FindResource("keyReady");
                                                    }
                                                }
                                            }
                                            else if (state == "Logout")
                                            {
                                                _isNrReasonCode = false;
                                                ChangeVoiceStatus(state);
                                                _agentstate = state;
                                                ChangingphoneStatus(GetLogoutStatus());
                                            }
                                        }
                                        else
                                        {
                                            //if (_configContainer.AllKeys.Contains("voice.acw.enabled") &&
                                            //        ((string)_configContainer.GetValue("voice.acw.enabled")).ToLower().Equals("true"))
                                            //{
                                            //Code Added - V.Palaniappan
                                            //05.11.2013
                                            SoftPhoneStatusController status = new SoftPhoneStatusController();
                                            status.LoginButtonStatus = false;
                                            status.LogoutButtonStatus = true;
                                            status.NotreadyButtonStatus = false;
                                            status.ReadyButtonStatus = false;
                                            status.HoldButtonStatus = false;
                                            status.RetrieveButtonStatus = false;
                                            status.AnswerButtonStatus = false;
                                            status.ReleaseButtonStatus = false;
                                            status.ConferenceInitiateStatus = false;
                                            status.CompleteConferenceStatus = false;
                                            status.TransferInitiateStatus = false;
                                            status.TransferCompleteStatus = false;
                                            status.DeleteConferenceStatus = false;
                                            status.CancelConferenceStatus = false;
                                            status.CancelTransferStatus = false;
                                            status.DialButtonStatus = true;
                                            status.AlternateButtonStatus = false;
                                            status.MergeButtonStatus = false;
                                            if (_dataContext.VoiceNotReadyReasonCode.Equals("") && !_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("After Call Work"))
                                            {
                                                string state = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();

                                                if (state.Equals("Ready"))
                                                {
                                                    _dataContext.IsAgentClickedReady = true;
                                                    status.NotreadyButtonStatus = true;
                                                    status.ReadyButtonStatus = false;
                                                    ChangeVoiceStatus("Ready");
                                                    _agentstate = "Ready";
                                                    //if (_dataContext.ReadyImageSource != null &&
                                                    //!_dataContext.ReadyImageSource.ToString().Contains("Call.NotReady.png"))
                                                    //{
                                                    //    _dataContext.ReadyImageSource =
                                                    //        GetBitmapIamge(new Uri(_imagePath + "\\Call.NotReady.png",
                                                    //            UriKind.Relative));
                                                    //    _dataContext.ReadyText = (String)FindResource("keyNotReady");
                                                    //}
                                                }
                                                else if (state.Contains("Not Ready") || state.Contains("After Call Work"))
                                                {
                                                    if (_dataContext.VoiceNotReadyReasonCode != string.Empty)
                                                    {
                                                        _dataContext.IsAgentClickedReady = false;
                                                        _isNrReasonCode = true;
                                                        status.NotreadyButtonStatus = false;
                                                        status.ReadyButtonStatus = true;
                                                        ChangeVoiceStatus("Not Ready" + " - " +
                                                                          _dataContext.VoiceNotReadyReasonCode);
                                                        _agentstate = "Not Ready" + " - " + _dataContext.VoiceNotReadyReasonCode;
                                                    }
                                                    else
                                                    {
                                                        status.NotreadyButtonStatus = false;
                                                        status.ReadyButtonStatus = true;
                                                        _isNrReasonCode = false;
                                                        ChangeVoiceStatus(state);
                                                        _agentstate = state;
                                                    }
                                                }
                                                else if (state == "Do Not Disturb")
                                                {
                                                    _isNrReasonCode = false;
                                                    ChangeVoiceStatus(state);
                                                    _agentstate = state;
                                                }
                                                else if (state == "Logout")
                                                {
                                                    _isNrReasonCode = false;
                                                    ChangeVoiceStatus(state);
                                                    _agentstate = state;
                                                    ChangingphoneStatus(GetLogoutStatus());
                                                }
                                            }
                                            else
                                            {
                                                if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Logout" && _dataContext.isOnCall)
                                                {
                                                    ChangingphoneStatus(GetLogoutStatus());
                                                    ChangeVoiceStatus("Logout");
                                                    _agentstate = "Logout";
                                                }
                                                else if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString().Contains("After Call Work"))
                                                {
                                                    status.NotreadyButtonStatus = false;
                                                    status.ReadyButtonStatus = true;
                                                    ChangeVoiceStatus("AfterCallWork1");
                                                    _agentstate = "AfterCallWork1";
                                                }
                                                else
                                                {
                                                    status.NotreadyButtonStatus = false;
                                                    status.ReadyButtonStatus = true;
                                                    ChangeVoiceStatus("Not Ready" + " - " +
                                                                       _dataContext
                                                                            .VoiceNotReadyReasonCode);
                                                    _agentstate = "Not Ready" + " - " +
                                                                    _dataContext.VoiceNotReadyReasonCode;
                                                }
                                            } //End
                                            ChangingphoneStatus(status);
                                            status = null;
                                            //}
                                            _dataContext.CallTypeStatus = string.Empty;
                                        }
                                    }
                                    else
                                    {
                                        _dataContext.IsHoldClicked = false;
                                        if (!_dataContext.IsAgentClickedReady)
                                        {
                                            //if (_configContainer.AllKeys.Contains("voice.acw.enabled")
                                            //       && ((string)_configContainer.GetValue("voice.acw.enabled")).ToLower().Equals("true"))
                                            //{
                                            if (string.IsNullOrEmpty(_dataContext.VoiceNotReadyReasonCode))
                                            {
                                                string state = _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString();

                                                ChangeVoiceStatus(state);
                                                _agentstate = state;
                                            }
                                            else
                                            {
                                                ChangeVoiceStatus("Not Ready" + " - " +
                                                                       _dataContext
                                                                            .VoiceNotReadyReasonCode);
                                                _agentstate = "Not Ready" + " - " +
                                                                _dataContext.VoiceNotReadyReasonCode;
                                            }
                                            //}
                                        }
                                        else
                                        {
                                            ChangeVoiceStatus("Ready");
                                            _agentstate = "Ready";
                                            if (_dataContext.ReadyText != "Not Ready")
                                            {
                                                _dataContext.ReadyImageSource = _imageDatacontext.ImgNotReadyEnabled;
                                                _dataContext.ReadyText = (String)FindResource("keyNotReady");
                                            }
                                        }
                                    }
                                    //End
                                }
                                else
                                {
                                    if (_dataContext.IsInitiateConfClicked ||
                                        _dataContext.IsInitiateTransClicked)
                                    {
                                        _dataContext.IsHoldClicked = true;
                                        //Code Added- V.Palaniappan
                                        //06.11.2013 - To avoid changing the state by clicking on notready menu while the call is on held
                                        _dataContext.isOnCall = true;
                                        //End

                                        //Code Added - V.Palaniappan
                                        //11.11.2013
                                        //_dataContext.CallType = "Consult Call";
                                        //_dataContext.CallTypeStatus = _dataContext.CallType + "  " + " - " + "  " + _dataContext.DialedNumber;
                                        //End

                                        _dataContext.IsInitiateConfClicked = false;
                                        _dataContext.IsInitiateTransClicked = false;
                                        ChangeVoiceStatus("OnHold");
                                        _agentstate = "OnHold";
                                    }
                                    else
                                    {
                                        if (!_dataContext.IsReconnectClicked)
                                        {
                                            _dataContext.IsHoldClicked = true;
                                        }
                                    }
                                }
                                _logger.Info("Current Agent State is : " + _agentstate);
                            }

                            if (_agentstate != "OnHold" && !_dataContext.IsReconnectClicked)
                            {
                                //_dataContext.A_DataTabVisibility = Visibility.Collapsed;
                                //_dataContext.A_DataTabVisibility = Visibility.Visible;
                            }
                            else
                            {
                                if (DataTabControl.Items.Contains(calldata))
                                {
                                    DataTabControl.SelectedItem = calldata;
                                }
                            }

                            //if (!_isopendbyUser)
                            //{
                            //    _dataContext.BottomRowHeight = new GridLength(0);
                            //    MinHeight = grdTitle.ActualHeight + grdTool.ActualHeight + 20;
                            //    Height = MinHeight;
                            //    MaxHeight = Height;
                            //    if (DataTabControl.SelectedItem == popUpUrl)
                            //        DataTabControl.SelectedIndex = 0;
                            //}
                            //else
                            //{
                            //    _dataContext.WorksapceTabVisibility = Visibility.Visible;
                            //    _dataContext.MessageTabVisibility = Visibility.Hidden;
                            //    _dataContext.ContactTabVisibility = Visibility.Hidden;
                            //    InitialloadData();
                            //    if (DataTabControl.Items.Contains(popUpUrl) && DataTabControl.SelectedItem != popUpUrl)
                            //    {
                            //        _dataContext.TabSelectedIndex = 0;
                            //    }
                            //else
                            //{
                            //    //if (baseheight.Value != 0)
                            //    //    _dataContext.BottomRowHeight = baseheight;
                            //    //if (_isfirstBottomHeightSet)
                            //    //{
                            //    //    Height = TitleGrid.ActualHeight + ToolGrid.ActualHeight + 506;
                            //    //    _isfirstBottomHeightSet = false;
                            //    //}
                            //    //MinHeight = 480;
                            //    //MaxHeight = 578;
                            //}
                            //}

                            _taskbarNotifier.StopTone();
                            _taskbarNotifier.ForceHidden();
                        }
                        else
                        {
                            //code added smoorthy 24-02-2015 for UI Status of StatusChangeOnVoiceInteraction
                            SoftPhoneStatusController status = new SoftPhoneStatusController();
                            status.LoginButtonStatus = false;
                            status.LogoutButtonStatus = true;
                            status.ReadyButtonStatus = false;
                            status.NotreadyButtonStatus = false;
                            status.HoldButtonStatus = false;
                            status.RetrieveButtonStatus = false;
                            status.AnswerButtonStatus = false;
                            status.ReleaseButtonStatus = false;
                            status.ConferenceInitiateStatus = false;
                            status.CompleteConferenceStatus = false;
                            status.TransferInitiateStatus = false;
                            status.TransferCompleteStatus = false;
                            status.DeleteConferenceStatus = false;
                            status.CancelConferenceStatus = false;
                            status.CancelTransferStatus = false;
                            status.DialButtonStatus = true;
                            status.AlternateButtonStatus = false;
                            status.MergeButtonStatus = false;
                            if (!_dataContext.IsReconnectClicked &&
                                !_dataContext.IsInitiateConfClicked &&
                                !_dataContext.IsInitiateTransClicked &&
                                !agentStatusNotify.AgentCurrentStatus.Contains("CompleteConference") &&
                                !agentStatusNotify.AgentCurrentStatus.Contains("CompleteTransfer"))
                            {
                                _dataContext.TabSelectedIndex = 0;
                                _dataContext.A_DataTabVisibility = Visibility.Collapsed;

                                if (_dataContext.StatusChangeOnVoiceInteraction == "Ready")
                                {
                                    status.ReadyButtonStatus = false;
                                    status.NotreadyButtonStatus = true;
                                    _dataContext.isDND = false;
                                    _agentstate = string.Empty;
                                    ChangeVoiceStatus(_dataContext.StatusChangeOnVoiceInteraction);
                                    _agentstate = _dataContext.StatusChangeOnVoiceInteraction;
                                }
                                else if (_dataContext.StatusChangeOnVoiceInteraction == "Not Ready")
                                {
                                    status.ReadyButtonStatus = true;
                                    status.NotreadyButtonStatus = false;
                                    _dataContext.IsAgentClickedReady = false;
                                    _isNrReasonCode = false;
                                    _agentstate = string.Empty;
                                    ChangeVoiceStatus(_dataContext.StatusChangeOnVoiceInteraction);
                                    _agentstate = _dataContext.StatusChangeOnVoiceInteraction;
                                }
                                else if (_dataContext.StatusChangeOnVoiceInteraction.Contains("Not Ready - "))
                                {
                                    status.ReadyButtonStatus = true;
                                    status.NotreadyButtonStatus = false;
                                    _dataContext.IsAgentClickedReady = false;
                                    _isNrReasonCode = true;
                                    _agentstate = string.Empty;
                                    ChangeVoiceStatus(_dataContext.StatusChangeOnVoiceInteraction);
                                    _agentstate = _dataContext.StatusChangeOnVoiceInteraction;
                                }
                                //Code Added - After Releasing the call sending the holding buttonstate to below mentioned function
                                //12.12.2013 - V.Palaniappan
                                else if (_dataContext.StatusChangeOnVoiceInteraction == "After Call Work")
                                {
                                    status.ReadyButtonStatus = true;
                                    status.NotreadyButtonStatus = false;
                                    _dataContext.IsAgentClickedReady = false;
                                    _agentstate = string.Empty;
                                    ChangeVoiceStatus("AfterCallWork1");
                                    _agentstate = "AfterCallWork1";
                                    //_getNotReadyButtonStatus = GetAfterCallWorkPhonestatus();
                                }
                                else if (_dataContext.StatusChangeOnVoiceInteraction == "Do Not Disturb")
                                {
                                    status.ReadyButtonStatus = false;
                                    status.NotreadyButtonStatus = false;
                                    _dataContext.IsAgentClickedReady = false;
                                    _isNrReasonCode = false;
                                    _agentstate = string.Empty;
                                    ChangeVoiceStatus(_dataContext.StatusChangeOnVoiceInteraction);
                                    _agentstate = _dataContext.StatusChangeOnVoiceInteraction;
                                }
                                //End
                                ChangingphoneStatus(status);
                                status = null;
                                _dataContext.StatusChangeOnVoiceInteraction = string.Empty;
                            }

                            #region Consult

                            //code Added - V.Palaniappan
                            //28.10.2013 - while clicking on reconnect we need to maintain previous state
                            else if (agentStatusNotify.AgentCurrentStatus.Equals("OnRelease") ||
                                        agentStatusNotify.AgentCurrentStatus.Contains("Consult"))
                            {
                                _dataContext.TabSelectedIndex = 0;
                                _dataContext.A_DataTabVisibility = Visibility.Collapsed;
                                if (!_dataContext.IsHoldClicked &&
                                    !_dataContext.IsReconnectClicked)
                                {
                                    if (_dataContext.IsInitiateConfClicked ||
                                           _dataContext.IsInitiateTransClicked)
                                    {
                                        _dataContext.IsHoldClicked = true;
                                        //Code Added- V.Palaniappan
                                        //06.11.2013 - To avoid changing the state by clicking on notready menu while the call is on held
                                        _dataContext.isOnCall = true;
                                        //End

                                        //Code Added - V.Palaniappan
                                        //11.11.2013
                                        _dataContext.CallType = "Consult Call";
                                        _dataContext.CallTypeStatus =
                                            _dataContext.CallType + "  " + " - " + "  " +
                                            _dataContext.DialedNumber;
                                        //End
                                        _dataContext.IsInitiateConfClicked = false;
                                        _dataContext.IsInitiateTransClicked = false;
                                        ChangeVoiceStatus("OnHold");
                                        _agentstate = "OnHold";
                                    }
                                    else
                                    {
                                        if (!_dataContext.IsReconnectClicked)
                                        {
                                            _dataContext.IsHoldClicked = true;
                                        }
                                        else if (_dataContext.StatusChangeOnVoiceInteraction == "Ready")
                                        {
                                            //Code Commented - V.Palaniappan
                                            //12.12.2013 - Avoid sending ready request after releasing the call
                                            //SoftPhone softReady = new SoftPhone();
                                            //softReady.Ready();
                                            //End
                                            _dataContext.isDND = false;
                                        }
                                        else if (_dataContext.StatusChangeOnVoiceInteraction == "Not Ready")
                                        {
                                            _dataContext.IsAgentClickedReady = false;
                                            //Code Commented - V.Palaniappan
                                            //12.12.2013 - Avoid sending notready request after releasing the call

                                            //_dataContext.VoiceNotReadyReasonCode = _dataContext.StatusChangeOnVoiceInteraction;
                                            //SoftPhone softNotReady = new SoftPhone();
                                            //softNotReady.NotReady(_dataContext.VoiceNotReadyReasonCode, "001");

                                            //End
                                            _isNrReasonCode = false;
                                        }
                                        else if (_dataContext.StatusChangeOnVoiceInteraction.Contains("Not Ready - "))
                                        {
                                            //Code Commented - V.Palaniappan
                                            //12.12.2013 - Avoid sending notready request after releasing the call

                                            //string keyCode = Datacontext.loadNotReadyReasonCodes[_dataContext.VoiceNotReadyReasonCode].ToString();
                                            //SoftPhone softNotReady = new SoftPhone();
                                            //softNotReady.NotReady(_dataContext.VoiceNotReadyReasonCode, keyCode);

                                            //End
                                            _isNrReasonCode = true;
                                        }
                                        //Code Added - After Releasing the call sending the holding buttonstate to below mentioned function
                                        //12.12.2013 - V.Palaniappan
                                        _agentstate = string.Empty;
                                        ChangeVoiceStatus(_dataContext.StatusChangeOnVoiceInteraction);
                                        //End
                                        _agentstate = _dataContext.StatusChangeOnVoiceInteraction;
                                        _dataContext.StatusChangeOnVoiceInteraction = string.Empty;
                                        ChangingphoneStatus(_getNotReadyButtonStatus);
                                    }
                                }
                                else
                                {
                                    if (_dataContext.IsInitiateConfClicked ||
                                        _dataContext.IsInitiateTransClicked)
                                    {
                                        _dataContext.IsHoldClicked = true;
                                        //Code Added- V.Palaniappan
                                        //06.11.2013 - To avoid changing the state by clicking on notready menu while the call is on held
                                        _dataContext.isOnCall = true;
                                        //End

                                        //Code Added - V.Palaniappan
                                        //11.11.2013
                                        _dataContext.CallType = "Consult Call";
                                        _dataContext.CallTypeStatus =
                                            _dataContext.CallType + "  " + " - " + "  " +
                                            _dataContext.DialedNumber;
                                        //End
                                        _dataContext.IsInitiateConfClicked = false;
                                        _dataContext.IsInitiateTransClicked = false;
                                        ChangeVoiceStatus("OnHold");
                                        _agentstate = "OnHold";
                                    }
                                    else
                                    {
                                        if (!_dataContext.IsReconnectClicked)
                                        {
                                            _dataContext.IsHoldClicked = true;
                                        }
                                    }
                                }
                            }

                            #endregion Consult

                            //End
                        }

                        #endregion if check for StatusChangeOnVoiceInteraction == string.Empty

                        //Code added for properly show and hide the window in call release
                        if (WindowState != WindowState.Normal)
                        {
                            WindowState = WindowState.Normal;
                        }
                        //end

                        #region if check for !_dataContext.isOnCall

                        if (!_dataContext.isOnCall)
                        {
                            btnLogin.IsEnabled = true;
                            _dataContext.LogImageSource = _imageDatacontext.ImgLogoutEnabled;
                            _dataContext.DialImageSource = _imageDatacontext.ImgDialPadEnabled;
                            _dataContext.DialText = (String)FindResource("KeyDial");
                            _dataContext.IsAttachDataEnabled = false;
                            _dataContext.AttachDataImageSource = _imageDatacontext.ImgCallDataDisabled;
                            _dataContext.AttachDataText = (String)FindResource("KeyCallData");
                        }

                        #endregion if check for !_dataContext.isOnCall

                    #endregion Release Status
                    }
                }
                catch (Exception commonException)
                {
                    _logger.Error("SoftPhoneBar_agentStatusListener:" + commonException.Message.ToString());
                }
                finally { GC.Collect(); }
            }));
        }

        void SoftPhoneBar_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                var sd = (sender as WebBrowser);
                var name = sd.Name;
                if (dicWebbrowser.Keys.Contains(name) && _formPostDetails.Keys.Contains(name))
                {
                    dicWebbrowser[name].NavigateToString(_formPostDetails[name]);
                    _logger.Info("PostFormData html document : " + _formPostDetails[name]);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred while navigating string as : " + ex.Message);
            }
        }

        private void SoftPhoneBar_Navigated(object sender, System.Windows.Navigation.NavigationEventArgs e)
        {
            SetSilent((sender as WebBrowser), true);
        }

        private void SoftPhoneBar_NewWindow3(ref object ppDisp, ref bool Cancel, uint dwFlags, string bstrUrlContext, string bstrUrl)
        {
            Cancel = true;
        }

        /// <summary>
        /// Handles the SizeChanged event of the SoftphoneBar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="SizeChangedEventArgs"/> instance containing the event data.</param>
        private void SoftphoneBar_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            try
            {
                if (e.HeightChanged && _isopendbyUser)
                {
                    SoftphoneBar.SizeChanged -= SoftphoneBar_SizeChanged;
                    if (e.NewSize.Height > (grdTitle.ActualHeight + grdTool.ActualHeight + 16 + 5 + 2))
                        baseheight = _dataContext.BottomRowHeight = new GridLength(e.NewSize.Height - (grdTitle.ActualHeight + grdTool.ActualHeight + 16 + 5 + 2));
                    if (_dataContext.Bottomwindow == Datacontext.OpendBy.MyContact)
                    {
                        ContactTabGrid.Height = baseheight.Value - 5;
                        var contactUC = ContactTabGrid.Children[0] as UserControl;
                        contactUC.VerticalAlignment = System.Windows.VerticalAlignment.Top;
                        contactUC.Height = ContactTabGrid.Height - 25;
                    }
                    SoftphoneBar.SizeChanged += SoftphoneBar_SizeChanged;
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        /// <summary>
        ///     Handles the Click event of the stateMenu control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void stateMenu_Click(object sender, RoutedEventArgs e)
        {
            var menuitem = sender as MenuItem;
            VoiceStateChange(AgentStateType.Channel, (menuitem.Header.ToString() == "Log Off" ? "Logout" : menuitem.Header.ToString()));
        }

        /// <summary>
        ///     Handles the Closed event of the StatesContextMenu control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void StatesContextMenu_Closed(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_dataContext.StatesContextMenu.IsOpen)
                {
                    _dataContext.StatesContextMenu.IsOpen = false;
                    _dataContext.StatesContextMenu.StaysOpen = false;
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        /// <summary>
        /// Strings the automatic key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns></returns>
        private Key StringToKey(string key)
        {
            Key tempKey;
            if (Enum.TryParse(key.Trim(), true, out tempKey))
            {
                return tempKey;
            }
            return Key.None;
        }

        /// <summary>
        /// Strings the automatic key gesture.
        /// </summary>
        /// <param name="keyGesture">The key gesture.</param>
        /// <returns></returns>
        private KeyGesture StringToKeyGesture(string keyGesture)
        {
            KeyGesture tempKeyGesture;
            ModifierKeys[] tempmodifierkey = new ModifierKeys[4] { ModifierKeys.None, ModifierKeys.None, ModifierKeys.None, ModifierKeys.None };
            int index = 0;
            Key tempkey = Key.None;
            if (keyGesture.Contains("+"))
            {
                string[] tempkeyGesture = keyGesture.Split('+');
                foreach (var item in tempkeyGesture)
                {
                    var tempMod = StringToModifierKey(item);
                    if (tempMod != ModifierKeys.None && index <= 3)
                    {
                        tempmodifierkey[index] = tempMod;
                        index++;
                    }
                    else
                    {
                        tempkey = StringToKey(item);
                    }
                }
                try
                {
                    tempKeyGesture = new KeyGesture(tempkey, tempmodifierkey[0] | tempmodifierkey[1] | tempmodifierkey[2] | tempmodifierkey[3]);
                    return tempKeyGesture;
                }
                catch (Exception generalexception)
                {
                    _logger.Error("Error occurred while converting string to keygesture : " + generalexception.Message.ToString());
                    return new KeyGesture(Key.None, ModifierKeys.None);
                }
            }
            return new KeyGesture(Key.None, ModifierKeys.None);
        }

        /// <summary>
        /// Strings the automatic modifier key.
        /// For more than one modifiers add '$' in between two modifiers.
        /// </summary>
        /// <param name="modifierKey">The modifier key.</param>
        /// <returns></returns>
        private ModifierKeys StringToModifierKey(string modifierKey)
        {
            ModifierKeysConverter tempMConverter = new ModifierKeysConverter();
            try
            {
                return (ModifierKeys)tempMConverter.ConvertFromString(modifierKey.Trim());
            }
            catch (Exception ex) { _logger.Warn("Warn occurred as " + ex.Message); return ModifierKeys.None; }
        }

        private void SubscribeHookEvent(object sender, System.Windows.Navigation.NavigationEventArgs e)
        {
            try
            {
                Guid SID_SWebBrowserApp = new Guid("0002DF05-0000-0000-C000-000000000046");
                WebBrowser webBrowser = sender as WebBrowser;
                webBrowser.LoadCompleted -= SubscribeHookEvent;
                if (webBrowser != null && webBrowser.Document != null)
                {
                    IServiceProviders serviceProvider = (IServiceProviders)webBrowser.Document;
                    Guid serviceGuid = SID_SWebBrowserApp;
                    Guid iid = typeof(SHDocVw.IWebBrowser2).GUID;
                    SHDocVw.IWebBrowser2 myWebBrowser2 = (SHDocVw.IWebBrowser2)serviceProvider.QueryService(ref serviceGuid, ref iid);
                    SHDocVw.DWebBrowserEvents_Event wbEvents = (SHDocVw.DWebBrowserEvents_Event)myWebBrowser2;
                    SHDocVw.DWebBrowserEvents2_Event wbEvents2 = (SHDocVw.DWebBrowserEvents2_Event)myWebBrowser2;
                    wbEvents.NewWindow += new SHDocVw.DWebBrowserEvents_NewWindowEventHandler(WebBrowser_NewWindow);
                    wbEvents2.NewWindow2 += new SHDocVw.DWebBrowserEvents2_NewWindow2EventHandler(WebBrowser_NewWindow2);
                }
                else
                    _logger.Warn("Web browser window is null.");
            }
            catch (Exception generalException)
            {
                _logger.Error("Error occurred as " + generalException.Message);
            }
        }

        /// <summary>
        ///     Handles the SessionSwitch event of the SystemEvents control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="SessionSwitchEventArgs" /> instance containing the event data.</param>
        private void SystemEvents_SessionSwitch(object sender, SessionSwitchEventArgs e)
        {
            try
            {
                if (e.Reason == SessionSwitchReason.SessionLock)
                {
                    WindowState = WindowState.Minimized;

                    if (_configContainer.GetAsBoolean("enable.move.agent.notready-on-system-idle", true))
                    {
                        _logger.Info("Agent Moved to Not Ready State because of " + e.Reason.ToString() + ".");
                        if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice)
                            && _dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() == "Ready"
                            && !_dataContext.isOnCall && !Datacontext.isDialling && !Datacontext.isRinging)
                        {
                            VoiceStateChange(AgentStateType.Channel, "Not Ready");
                        }
                        if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email) && _dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString() == "Ready")
                        {
                            InteractionHandler._isEmailNotReadyReason = false;
                            var output = interactionService.AgentNotReady(_dataContext.ProxyID, Datacontext.Channels.Email.ToString().ToLower());
                            if (output.MessageCode == "200")
                            {
                                InteractionHandler.AgentEmailState = "Not Ready";
                                _dataContext.EmailStateImageSource = _imageDatacontext.ImgNotReadyStatus;
                                if (_dataContext.IsOnEmailIXN)
                                    _ixnHandler.ChangeEmailStatus("On Interaction");
                                else
                                    _ixnHandler.ChangeEmailStatus("Not Ready");
                            }
                        }
                        if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat) && _dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString() == "Ready")
                        {
                            InteractionHandler._isChatNotReadyReason = false;
                            var output = interactionService.AgentNotReady(_dataContext.ProxyID, Datacontext.Channels.Chat.ToString().ToLower());
                            if (output.MessageCode == "200")
                            {
                                InteractionHandler.AgentChatState = "Not Ready";
                                _dataContext.ChatStateImageSource = _imageDatacontext.ImgNotReadyStatus;
                                if (_dataContext.IsOnChatIXN)
                                    _ixnHandler.ChangeChatStatus("On Interaction");
                                else
                                    _ixnHandler.ChangeChatStatus("Not Ready");
                            }
                        }
                    }
                }
                if (e.Reason == SessionSwitchReason.SessionUnlock)
                {
                    WindowState = WindowState.Normal;
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred in Window Lock/UnLock as : " + ex.Message);
            }
        }

        private void tbEvasNVAS_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                TabControl tab = sender as TabControl;
                FocusManager.SetFocusedElement(this, tab.SelectedItem as TabItem);
            }
            catch (Exception _generalException)
            {
                _logger.Error("Error occurred as " + _generalException.Message);
            }
        }

        /// <summary>
        ///     Handles the cancel event of the TextBlock_PreviewMouseLeftButtonDown control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseButtonEventArgs" /> instance containing the event data.</param>
        private void TextBlock_PreviewMouseLeftButtonDown_cancel(object sender, MouseButtonEventArgs e)
        {
            btnClear_Click(null, null);
        }

        /// <summary>
        ///     Handles the update event of the TextBlock_PreviewMouseLeftButtonDown control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseButtonEventArgs" /> instance containing the event data.</param>
        private void TextBlock_PreviewMouseLeftButtonDown_update(object sender, MouseButtonEventArgs e)
        {
            btnUpdate_Click(null, null);
        }

        /// <summary>
        ///     Handles the MouseRightButtonDown event of the txtblock control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseButtonEventArgs" /> instance containing the event data.</param>
        private void txtblock_MouseRightButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (sender is DataGridCell)
            {
                var tempcell = sender as DataGridCell;
                DataGridRow row = null;
                MediaStatus selectedMedia = null;
                DependencyObject parent = VisualTreeHelper.GetParent(tempcell);
                while (parent != null && parent.GetType() != typeof(DataGridRow))
                {
                    parent = VisualTreeHelper.GetParent(parent);
                    if (parent is DataGridRow)
                    {
                        row = parent as DataGridRow;
                        selectedMedia = row.Item as MediaStatus;
                        break;
                    }
                }
                if (selectedMedia.ChannelName == Datacontext.Channels.Voice.ToString())
                {
                    if (tempcell.Column.Header.ToString() == "Forward")
                    {
                        if (!_dataContext.isOnCall && !Datacontext.isDialling && !Datacontext.isRinging &&
                            string.Compare(_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(), "Out Of Service1") != 0 &&
                            string.Compare(_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString(), "Out Of Service") != 0)
                        {
                            int i =
                                Datacontext.GetInstance()
                                    .MediaStatus.IndexOf(_dataContext.MediaStatus.Where(p => p.ChannelName == "Voice").FirstOrDefault());
                            if (_dataContext.MediaStatus[i].Forward.Contains("No Active Forward"))
                            {
                                var tempMenu = (MenuItem)_dataContext.Forward.Items[1];
                                tempMenu.IsEnabled = false;
                            }
                            else
                            {
                                var tempMenu = (MenuItem)_dataContext.Forward.Items[1];
                                tempMenu.IsEnabled = true;
                            }
                            if (selectedMedia.Forward.Contains("Forwarded to "))
                            {
                                string forwardmsg = selectedMedia.Forward.ToString();
                                _dataContext.ForwardDN = forwardmsg.Replace("Forwarded to ", "").Trim().ToString();
                            }
                            _dataContext.Forward.IsOpen = true;
                        }
                    }
                    else
                    {
                        if ((Datacontext.isRinging || Datacontext.isDialling || _dataContext.isOnCall) && _configContainer.AllKeys.Contains("voice.enable.agent-select-status-interaction") && !((string)_configContainer.GetValue("voice.enable.agent-select-status-interaction")).ToLower().Equals("true"))
                            return;
                        if (selectedMedia.ChannelState == "Logout" || selectedMedia.ChannelState.Contains("Logout"))
                        {
                            _dataContext.EnableMenuitems = false;
                            _dataContext.EnableLogonMenuitem = true;
                        }
                        else if (selectedMedia.ChannelState == "Out Of Service" || selectedMedia.ChannelState.Contains("Out Of Service"))
                        {
                            _dataContext.EnableMenuitems = false;
                            _dataContext.EnableDNDMenuitems = false;
                            var _outOfServiceItems = _dataContext.htMediaCurrentState.Values.OfType<string>().Where(s => s.Contains("Out Of Service"));
                            if (_outOfServiceItems != null && _dataContext.htMediaCurrentState.Count == _outOfServiceItems.Count())
                                _dataContext.EnableLogonMenuitem = false;
                            else
                                _dataContext.EnableLogonMenuitem = true;
                        }
                        else
                        {
                            _dataContext.EnableMenuitems = true;
                            _dataContext.EnableLogonMenuitem = false;
                        }
                        if (_dataContext.isDND)
                            _dataContext.EnableDNDMenuitems = false;
                        else
                            _dataContext.EnableDNDMenuitems = true;
                        if (_dataContext.StatesContextMenu.Items.Count > 0)
                        {
                            _dataContext.StatesContextMenu.Style = (Style)FindResource("Contextmenu");
                            _dataContext.StatesContextMenu.Style = (Style)FindResource("Contextmenu");
                            _dataContext.StatesContextMenu.PlacementTarget = tempcell;
                            _dataContext.StatesContextMenu.IsOpen = true;
                            _dataContext.StatesContextMenu.Focus();
                        }

                        #region Old Code

                        //string logDetail = _dataContext.LogText;
                        //if (logDetail == "Logout")
                        //{
                        //    for (int i = 0; i < _dataContext.StatesContextMenu.Items.Count; i++)
                        //    {
                        //        MenuItem item = (MenuItem)_dataContext.StatesContextMenu.Items[i];
                        //        if (item.Header.ToString() == "Log On")
                        //        {
                        //            item.IsEnabled = false;
                        //        }
                        //        else if (item.Header.ToString() == "Do Not Disturb")
                        //        {
                        //            if (_dataContext.isDND == true)
                        //                item.IsEnabled = false;
                        //            else
                        //                item.IsEnabled = true;
                        //        }
                        //        else
                        //        {
                        //            item.IsEnabled = true;
                        //        }
                        //    }
                        //}
                        //else if (logDetail == "Login")
                        //{
                        //    for (int i = 0; i < _dataContext.StatesContextMenu.Items.Count; i++)
                        //    {
                        //        MenuItem item = (MenuItem)_dataContext.StatesContextMenu.Items[i];
                        //        if (item.Header.ToString() != "Log On")
                        //        {
                        //            item.IsEnabled = false;
                        //        }
                        //        else if (item.Header.ToString() == "Do Not Disturb")
                        //        {
                        //            if (_dataContext.isDND == true)
                        //                item.IsEnabled = false;
                        //            else
                        //                item.IsEnabled = true;
                        //        }
                        //        else
                        //        {
                        //            item.IsEnabled = true;
                        //        }
                        //    }
                        //}

                        //_dataContext.StatesContextMenu.Style = (Style)FindResource("Contextmenu");
                        //_dataContext.StatesContextMenu.Style = (Style)FindResource("Contextmenu");
                        ////_dataContext.StatesContextMenu.Closed += new RoutedEventHandler(ContextMenu_Closed);
                        //_dataContext.StatesContextMenu.PlacementTarget = tempcell;
                        //_dataContext.StatesContextMenu.IsOpen = true;
                        //_dataContext.StatesContextMenu.Focus();

                        #endregion Old Code
                    }
                }
                else if (selectedMedia.ChannelName == Datacontext.Channels.Email.ToString())
                {
                    if (_dataContext.IsOnEmailIXN && _configContainer.AllKeys.Contains("email.enable.agent-select-status-interaction") && !((string)_configContainer.GetValue("email.enable.agent-select-status-interaction")).ToLower().Equals("true"))
                        return;
                    if (tempcell.Column.Header.ToString() == "Forward")
                        return;
                    if (selectedMedia.ChannelState == "Logout" || selectedMedia.ChannelState.Contains("Logout"))
                    {
                        _dataContext.EnableMenuitems = false;
                        _dataContext.EnableLogonMenuitem = true;
                    }
                    else if (selectedMedia.ChannelState == "Out Of Service" || selectedMedia.ChannelState.Contains("Out Of Service"))
                    {
                        _dataContext.EnableMenuitems = false;
                        _dataContext.EnableDNDMenuitems = false;

                        var _outOfServiceItems = _dataContext.htMediaCurrentState.Values.OfType<string>().Where(s => s.Contains("Out Of Service"));
                        if (_outOfServiceItems != null && _dataContext.htMediaCurrentState.Count == _outOfServiceItems.Count())
                            _dataContext.EnableLogonMenuitem = false;
                        else
                            _dataContext.EnableLogonMenuitem = true;
                    }
                    else
                    {
                        _dataContext.EnableMenuitems = true;
                        _dataContext.EnableLogonMenuitem = false;
                    }
                    if (_dataContext.isIXNDND)
                        _dataContext.EnableDNDMenuitems = false;
                    else
                        _dataContext.EnableDNDMenuitems = true;
                    if (_dataContext.EmailContextMenu.Items.Count > 0)
                    {
                        _dataContext.EmailContextMenu.Style = (Style)FindResource("Contextmenu");
                        _dataContext.EmailContextMenu.Style = (Style)FindResource("Contextmenu");
                        _dataContext.EmailContextMenu.PlacementTarget = tempcell;
                        _dataContext.EmailContextMenu.IsOpen = true;
                        _dataContext.EmailContextMenu.Focus();
                    }
                }
                else if (selectedMedia.ChannelName == Datacontext.Channels.Chat.ToString())
                {
                    if (_dataContext.IsOnChatIXN && _configContainer.AllKeys.Contains("chat.enable.agent-select-status-interaction") && !((string)_configContainer.GetValue("chat.enable.agent-select-status-interaction")).ToLower().Equals("true"))
                        return;
                    if (tempcell.Column.Header.ToString() == "Forward")
                        return;
                    if (selectedMedia.ChannelState == "Logout" || selectedMedia.ChannelState.Contains("Logout"))
                    {
                        _dataContext.EnableMenuitems = false;
                        _dataContext.EnableLogonMenuitem = true;
                    }
                    else if (selectedMedia.ChannelState == "Out Of Service" || selectedMedia.ChannelState.Contains("Out Of Service"))
                    {
                        _dataContext.EnableMenuitems = false;
                        _dataContext.EnableDNDMenuitems = false;

                        var _outOfServiceItems = _dataContext.htMediaCurrentState.Values.OfType<string>().Where(s => s.Contains("Out Of Service"));
                        if (_outOfServiceItems != null && _dataContext.htMediaCurrentState.Count == _outOfServiceItems.Count())
                            _dataContext.EnableLogonMenuitem = false;
                        else
                            _dataContext.EnableLogonMenuitem = true;
                    }
                    else
                    {
                        _dataContext.EnableMenuitems = true;
                        _dataContext.EnableLogonMenuitem = false;
                    }
                    if (_dataContext.isIXNDND)
                        _dataContext.EnableDNDMenuitems = false;
                    else
                        _dataContext.EnableDNDMenuitems = true;
                    if (_dataContext.ChatContextMenu.Items.Count > 0)
                    {
                        _dataContext.ChatContextMenu.Style = (Style)FindResource("Contextmenu");
                        _dataContext.ChatContextMenu.Style = (Style)FindResource("Contextmenu");
                        _dataContext.ChatContextMenu.PlacementTarget = tempcell;
                        _dataContext.ChatContextMenu.IsOpen = true;
                        _dataContext.ChatContextMenu.Focus();
                    }
                }
                else if (selectedMedia.ChannelName == Datacontext.Channels.OutboundPreview.ToString())
                {
                    if (tempcell.Column.Header.ToString() == "Forward")
                        return;
                    if (selectedMedia.ChannelState == "Logout" || selectedMedia.ChannelState.Contains("Logout"))
                    {
                        _dataContext.EnableMenuitems = false;
                        _dataContext.EnableLogonMenuitem = true;
                    }
                    else
                    {
                        _dataContext.EnableMenuitems = true;
                        _dataContext.EnableLogonMenuitem = false;
                    }
                    if (_dataContext.isIXNDND)
                        _dataContext.EnableDNDMenuitems = false;
                    else
                        _dataContext.EnableDNDMenuitems = true;
                    if (_dataContext.OutboundContextMenu.Items.Count > 0)
                    {
                        _dataContext.OutboundContextMenu.Style = (Style)FindResource("Contextmenu");
                        _dataContext.OutboundContextMenu.Style = (Style)FindResource("Contextmenu");
                        _dataContext.OutboundContextMenu.PlacementTarget = tempcell;
                        _dataContext.OutboundContextMenu.IsOpen = true;
                        _dataContext.OutboundContextMenu.Focus();
                    }
                }
            }
        }

        /// <summary>
        /// Handles the MouseDown event of the txtDN control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseButtonEventArgs"/> instance containing the event data.</param>
        private void txtDN_MouseDown(object sender, MouseButtonEventArgs e)
        {
            //CheckValidDigits();
        }

        /// <summary>
        /// Handles the MouseRightButtonUp event of the txtDN control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseButtonEventArgs"/> instance containing the event data.</param>
        private void txtDN_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            e.Handled = true;
        }

        /// <summary>
        /// Handles the PreviewCanExecute event of the txtDN control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        private void txtDN_PreviewCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Command == ApplicationCommands.Copy ||
                e.Command == ApplicationCommands.Cut ||
                e.Command == ApplicationCommands.Paste)
            {
                e.Handled = true;
            }
        }

        /// <summary>
        /// Handles the SelectionChanged event of the txtDN control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="SelectionChangedEventArgs"/> instance containing the event data.</param>
        private void txtDN_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var tempcmb = sender as ComboBox;
            if (tempcmb == null || tempcmb.SelectedItem == null) return;
            _dataContext.DialedNumbers = tempcmb.SelectedItem.ToString();
            _dataContext.DiallingNumber = tempcmb.SelectedItem.ToString();
        }

        /// <summary>
        /// Handles the TextChanged event of the txtDN control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs"/> instance containing the event data.</param>
        private void txtDN_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_dataContext.DiallingNumber.Length > txtDN.Text.Length)
                _dataContext.DiallingNumber = txtDN.Text;
            var temp = e.OriginalSource as TextBox;
            txtDN.Text = temp.Text;
        }

        private void UnsubscribeSalesForce()
        {
            try
            {
                if (Datacontext.GetInstance().IsSalesforcePluginAdded && Datacontext.GetInstance().IsSalesforcePluginEnabled)
                {
                    ((ISFDCConnector)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Salesforce]).UnSubscribe();
                }
            }
            catch (Exception _generalException)
            {
                _logger.Error("Error occurred as " + _generalException.Message);
            }
        }

        private void UnsubscribeThirdParty()
        {
            try
            {
                if (_iDesktopMessenger != null)
                    _iDesktopMessenger.UnSubcribe();

                //var file = Path.Combine(Path.Combine(System.Windows.Forms.Application.StartupPath, "Plugins"), "Pointel.Integration.Core.dll");
                //if (File.Exists(file))
                //{
                //    Assembly asm = Assembly.LoadFile(file);
                //    var iDesktopMessenger = (IDesktopMessenger)(from asmType in asm.GetTypes() where asmType.GetInterface("IDesktopMessenger") != null select (IDesktopMessenger)Activator.CreateInstance(asmType)).FirstOrDefault();
                //    iDesktopMessenger.UnSubcribe();
                //}
                //else
                //{
                //    _logger.Warn("InitializeThirdPartyIntegration : Integration.Core Plug-in dll not exist");
                //}
            }
            catch (Exception ex)
            {
                _logger.Error("InitializeThirdPartyIntegration : Integration.Core Plug-in dll not exist" + ex.ToString());
            }
        }

        /// <summary>
        /// Updates the agent state image.
        /// </summary>
        private void UpdateAgentStateImage()
        {
            try
            {
                if (_dataContext.MediaStatus.Any(p => p.ChannelState == "Ready"))
                    _dataContext.AgentStateImageSource = _imageDatacontext.ImgReadyStatus;
                else if (_dataContext.MediaStatus.Any(p => p.ChannelState == "Not Ready" || p.ChannelState.Contains("Not Ready")))
                    _dataContext.AgentStateImageSource = _imageDatacontext.ImgNotReadyStatus;
                else if (_dataContext.MediaStatus.Any(p => p.ChannelState == "Logout"))
                    _dataContext.AgentStateImageSource = _imageDatacontext.ImgLogoutStatus;
                else if (_dataContext.MediaStatus.Any(p => p.ChannelState == "Out Of Service"))
                    _dataContext.AgentStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                else
                    _dataContext.AgentStateImageSource = null;
            }
            catch (Exception commonException)
            {
                _logger.Error("UpdateAgentStateImage() " + commonException);
            }
        }

        private void VoiceLogOn()
        {
            var softPohne = new SoftPhone();
            if (!_isFailedAgentLogin && !_isVoiceLoginFirstTime)
            {
                OutputValues loginResponse = null;
                _logger.Debug("Failed agent login and first time agent login is false");
                string workMode = "optional";
                //string switchtype = "avaya";
                //if (_dataContext.SwitchName.ToLower().Contains("nortel"))
                //    switchtype = "nortel";
                var media = (Datacontext.AvailableServerDic.Where(x => x.Value == Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGTServer.ToString())).ToDictionary(x => x.Key, y => y.Value);
                if (media == null)
                    return;
                if (media.Count > 0)
                {
                    if (Datacontext.TServersSwitchDic.ContainsKey(Datacontext.UsedTServerSwitchDBId)
                        && media.Any(x => (x.Key.ToString().Split(','))[0].Trim() == Datacontext.TServersSwitchDic[Datacontext.UsedTServerSwitchDBId]))
                    {
                        var tserverName = media.Where(x => (x.Key.ToString().Split(','))[0].Trim() == Datacontext.TServersSwitchDic[Datacontext.UsedTServerSwitchDBId]).FirstOrDefault().Key;
                        loginResponse = softPohne.Initialize(_dataContext.Place, _dataContext.UserName, _configContainer.ConfServiceObject, tserverName, _dataContext.AgentLoginId, _dataContext.AgentPassword, _dataContext.SwitchType);
                        if (loginResponse.MessageCode == "200")
                            loginResponse = softPohne.Login(_dataContext.Place, _dataContext.UserName, workMode, _dataContext.Queue, _dataContext.AgentLoginId, _dataContext.AgentPassword);
                        if (loginResponse.MessageCode == "200" || loginResponse.MessageCode == "201")
                        {
                            _isLogoutFromAID = false;
                            _voiceCurrentStatus = true;
                            if (_configContainer.AllKeys.Contains("login.voice.enable.auto-ready") &&
                                ((string)_configContainer.GetValue("login.voice.enable.auto-ready")).ToLower().Equals("true"))
                            {
                                softPohne.Ready();
                            }
                            //_logger.Debug("Agent Login Successful");
                            _isVoiceLoginFirstTime = true;
                            //below code added for register broadCast DN
                            //Smoorthy 08-01-2013
                            if ((_configContainer.AllKeys.Contains("broadcast.dn") && !string.IsNullOrEmpty(_configContainer.GetValue("broadcast.dn")))
                                   && (_configContainer.AllKeys.Contains("voice.enable.broadcast") &&
                                   ((string)_configContainer.GetValue("voice.enable.broadcast")).ToLower().Equals("true")))
                            {
                                _logger.Debug("Registering broadcast DN :" + _configContainer.GetValue("broadcast.dn"));
                                softPohne.Register(_configContainer.GetValue("broadcast.dn"));
                            }
                            //end
                        }
                        else if (loginResponse.MessageCode == "2001")
                        {
                            _isVoiceLoginFirstTime = false;
                            lock (_agentStateTimer)
                            {
                                if (!_agentStateTimer.IsEnabled)
                                {
                                    _agentStateTimer.Start();
                                }
                            }
                            _errorMessage.Clear();
                            if (_errorMessage.Count == 0)
                            {
                                _errorMessage.Add("IWS_Message",
                                            "Voice (" + _dataContext.ThisDN + "@" +
                                            _dataContext.SwitchName + " Switch)");
                                _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                                _errorMessage.Add("IWS_Sender", "System");
                                _errorMessage.Add("IWS_Priority", "4");
                                _errorMessage.Add("IWS_MessageType", "System");
                                _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                GettingUserData(VoiceEvents.None, _errorMessage);
                            }
                            _isServerdown = true;
                            ChangeVoiceStatus("Out Of Service");
                            _agentstate = "Out Of Service";
                            ChangingphoneStatus(GetLogoutStatus());
                            _logger.Debug("SoftphoneBar:VoiceLogOn:" + loginResponse.Message);
                        }
                        else if (loginResponse.MessageCode == "2002")
                        {
                            _isVoiceLoginFirstTime = false;
                            lock (_agentStateTimer)
                            {
                                if (!_agentStateTimer.IsEnabled)
                                {
                                    _agentStateTimer.Start();
                                }
                            }
                            _errorMessage.Clear();
                            if (_errorMessage.Count == 0)
                            {
                                _errorMessage.Add("IWS_Message", loginResponse.Message.ToString());
                                _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                                _errorMessage.Add("IWS_Sender", "System");
                                _errorMessage.Add("IWS_Priority", "4");
                                _errorMessage.Add("IWS_MessageType", "System");
                                _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                GettingUserData(VoiceEvents.None, _errorMessage);
                            }
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                            ChangeVoiceStatus("Out Of Service");
                            _agentstate = "Out Of Service";
                            _logger.Debug("SoftphoneBar:VoiceLogOn:" + loginResponse.Message);
                            ChangingphoneStatus(GetLogoutStatus());
                        }
                        else if (loginResponse.MessageCode == "2004")
                        {
                            PlaceAlreadyTaken(loginResponse);
                        }
                    }
                }
                else
                {
                    _isVoiceLoginFirstTime = false;
                    lock (_agentStateTimer)
                    {
                        if (!_agentStateTimer.IsEnabled)
                        {
                            _agentStateTimer.Start();
                        }
                    }
                    _errorMessage.Clear();
                    if (_errorMessage.Count == 0)
                    {
                        _errorMessage.Add("IWS_Message", "T-server not configured");
                        _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                        _errorMessage.Add("IWS_Sender", "System");
                        _errorMessage.Add("IWS_Priority", "4");
                        _errorMessage.Add("IWS_MessageType", "System");
                        _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                        _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                        GettingUserData(VoiceEvents.None, _errorMessage);
                    }
                    _dataContext.VoiceStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                    ChangeVoiceStatus("Out Of Service");
                    _agentstate = "Out Of Service";
                    _logger.Debug("SoftphoneBar:VoiceLogOn:" + " T-server not configured");
                    ChangingphoneStatus(GetLogoutStatus());
                }
            }
            else if (!_isFailedAgentLogin && _isVoiceLoginFirstTime)
            {
                OutputValues loginResponse = null;
                _logger.Debug("Failed Agent Login is false and Agent First Time login is true");
                string workmode = "optional";
                loginResponse = softPohne.Login(_dataContext.Place, _dataContext.UserName, workmode, _dataContext.Queue, _dataContext.AgentLoginId, _dataContext.AgentPassword);
                _logger.Debug("Login using Place : " + _dataContext.Place + " Username : " + _dataContext.UserName +
                      " Queue : " + _dataContext.QueueSelectedValue + " Application : " + _dataContext.ApplicationName + " LoginID : " +
                      _dataContext.AgentLoginId);
                if (loginResponse.MessageCode == "200" || loginResponse.MessageCode == "201")
                {
                    _isLogoutFromAID = false;
                    if (_configContainer.AllKeys.Contains("login.voice.enable.auto-ready") &&
                           ((string)_configContainer.GetValue("login.voice.enable.auto-ready")).ToLower().Equals("true"))
                    {
                        softPohne.Ready();
                    }
                    _logger.Debug("Agent login successful");
                }
                else if (loginResponse.MessageCode == "2004")
                {
                    PlaceAlreadyTaken(loginResponse);
                }
                else
                    _logger.Warn("Agent login failed");
            }
            else
            {
                if (!_dataContext.IsLogonInfoOpened)
                {
                    if ((_configContainer.AllKeys.Contains("login.voice.enable.prompt-dn-password") &&
                        ((string)_configContainer.GetValue("login.voice.enable.prompt-dn-password")).ToLower().Equals("true")) || _isFailedAgentLogin)
                    {
                        logonInfo = new LogonInfo();
                        logonInfo.Show();
                        _dataContext.IsLogonInfoOpened = true;
                    }
                    else
                    {
                        OutputValues loginResponse = null;
                        string workmode = "optional";
                        string switchType = "avaya";
                        if (_dataContext.SwitchName.ToLower().Contains("nortel"))
                            switchType = "nortel";
                        var media = (Datacontext.AvailableServerDic.Where(x => x.Value == Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGTServer.ToString())).ToDictionary(x => x.Key, y => y.Value);
                        if (media == null)
                            return;
                        if (media.Count > 0)
                        {
                            if (Datacontext.TServersSwitchDic.ContainsKey(Datacontext.UsedTServerSwitchDBId)
                                && media.Any(x => (x.Key.ToString().Split(','))[0].Trim() == Datacontext.TServersSwitchDic[Datacontext.UsedTServerSwitchDBId]))
                            {
                                var tserverName = media.Where(x => (x.Key.ToString().Split(','))[0].Trim() == Datacontext.TServersSwitchDic[Datacontext.UsedTServerSwitchDBId]).FirstOrDefault().Key;
                                var output = softPohne.Initialize(_dataContext.Place, _dataContext.UserName, _configContainer.ConfServiceObject, tserverName, _dataContext.AgentLoginId, _dataContext.AgentPassword, _dataContext.SwitchType);
                                if (output.MessageCode == "200")
                                    loginResponse = softPohne.Login(_dataContext.Place, _dataContext.UserName, workmode, _dataContext.Queue, _dataContext.AgentLoginId, _dataContext.AgentPassword);

                                _logger.Debug("Login using Place : " + _dataContext.Place + " Username : " + _dataContext.UserName +
                              " Queue : " + _dataContext.QueueSelectedValue + " Application : " + _dataContext.ApplicationName + " LoginID : " +
                              _dataContext.AgentLoginId);
                                if (loginResponse.MessageCode == "200" || loginResponse.MessageCode == "201")
                                {
                                    _isLogoutFromAID = false;
                                    _voiceCurrentStatus = true;
                                    if (_configContainer.AllKeys.Contains("login.voice.enable.auto-ready") &&
                                ((string)_configContainer.GetValue("login.voice.enable.auto-ready")).ToLower().Equals("true"))
                                    {
                                        softPohne.Ready();
                                    }
                                    _isVoiceLoginFirstTime = true;
                                    //below code added for register broadCast DN
                                    //Smoorthy 08-01-2013
                                    if ((_configContainer.AllKeys.Contains("broadcast.dn") && !string.IsNullOrEmpty(_configContainer.GetValue("broadcast.dn")))
                                          && (_configContainer.AllKeys.Contains("voice.enable.broadcast") &&
                                          ((string)_configContainer.GetValue("voice.enable.broadcast")).ToLower().Equals("true")))
                                    {
                                        _logger.Debug("Registering broadcast DN :" + _configContainer.GetValue("broadcast.dn"));
                                        softPohne.Register(_configContainer.GetValue("broadcast.dn"));
                                    }
                                    //end
                                }
                                else if (loginResponse.MessageCode == "2001")
                                {
                                    _isVoiceLoginFirstTime = false;
                                    lock (_agentStateTimer)
                                    {
                                        if (!_agentStateTimer.IsEnabled)
                                        {
                                            _agentStateTimer.Start();
                                        }
                                    }
                                    _errorMessage.Clear();
                                    if (_errorMessage.Count == 0)
                                    {
                                        _errorMessage.Add("IWS_Message",
                                            "Voice (" + _dataContext.ThisDN + "@" +
                                            _dataContext.SwitchName + " Switch)");
                                        _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                                        _errorMessage.Add("IWS_Sender", "System");
                                        _errorMessage.Add("IWS_Priority", "4");
                                        _errorMessage.Add("IWS_MessageType", "System");
                                        _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                        _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                        GettingUserData(VoiceEvents.None, _errorMessage);
                                    }
                                    _isServerdown = true;
                                    ChangeVoiceStatus("Out Of Service");
                                    _agentstate = "Out Of Service";
                                    NotifyVoiceMediaStatus("Out Of Service");
                                    ChangingphoneStatus(GetLogoutStatus());
                                    _logger.Debug("SoftphoneBar:VoiceLogOn:" + loginResponse.Message);
                                }
                                else if (loginResponse.MessageCode == "2002")
                                {
                                    _isVoiceLoginFirstTime = false;
                                    lock (_agentStateTimer)
                                    {
                                        if (!_agentStateTimer.IsEnabled)
                                        {
                                            _agentStateTimer.Start();
                                        }
                                    }
                                    _errorMessage.Clear();
                                    if (_errorMessage.Count == 0)
                                    {
                                        _errorMessage.Add("IWS_Message", loginResponse.Message.ToString());
                                        _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                                        _errorMessage.Add("IWS_Sender", "System");
                                        _errorMessage.Add("IWS_Priority", "4");
                                        _errorMessage.Add("IWS_MessageType", "System");
                                        _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                        _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                        GettingUserData(VoiceEvents.None, _errorMessage);
                                    }
                                    _dataContext.VoiceStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                                    ChangeVoiceStatus("Out Of Service");
                                    _agentstate = "Out Of Service";
                                    NotifyVoiceMediaStatus("Out Of Service");
                                    _logger.Debug("SoftphoneBar:VoiceLogOn:" + loginResponse.Message);
                                    ChangingphoneStatus(GetLogoutStatus());
                                }
                                else if (loginResponse.MessageCode == "2004")
                                {
                                    PlaceAlreadyTaken(loginResponse);
                                    NotifyVoiceMediaStatus("Logout");
                                }
                            }
                        }
                        else
                        {
                            _isVoiceLoginFirstTime = false;
                            lock (_agentStateTimer)
                            {
                                if (!_agentStateTimer.IsEnabled)
                                {
                                    _agentStateTimer.Start();
                                }
                            }
                            _errorMessage.Clear();
                            if (_errorMessage.Count == 0)
                            {
                                _errorMessage.Add("IWS_Message", "T-server not configured");
                                _errorMessage.Add("IWS_Subject", "The channel voice is out of service.");
                                _errorMessage.Add("IWS_Sender", "System");
                                _errorMessage.Add("IWS_Priority", "4");
                                _errorMessage.Add("IWS_MessageType", "System");
                                _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                GettingUserData(VoiceEvents.None, _errorMessage);
                            }
                            _dataContext.VoiceStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                            ChangeVoiceStatus("Out Of Service");
                            _agentstate = "Out Of Service";
                            NotifyVoiceMediaStatus("Out Of Service");
                            _logger.Debug("SoftphoneBar:VoiceLogOn:" + " T-server not configured");
                            ChangingphoneStatus(GetLogoutStatus());
                        }
                    }
                }
            }
        }

        /// <summary>
        ///     Statuses the menu.
        /// </summary>
        private MenuItem[] VoiceStatusMenu()
        {
            if (_configContainer.AllKeys.Contains("agent-status.enabled-actions-by-channel") &&
                    _configContainer.GetValue("agent-status.enabled-actions-by-channel") != null)
            {
                string[] VoiceStatus = ((string)_configContainer.GetValue("agent-status.enabled-actions-by-channel")).Split(',');
                VoiceStatus = VoiceStatus.Distinct().ToArray();
                if (VoiceStatus == null && VoiceStatus.Length <= 0) return null;
                var temp = new MenuItem[VoiceStatus.Length];
                int i = 0;
                foreach (string state in VoiceStatus)
                {
                    var item = new MenuItem();
                    switch (state)
                    {
                        case "Ready":
                            item.Icon = new Image
                            {
                                Height = 10,
                                Width = 10,
                                Source =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png", UriKind.Relative)),
                            };
                            item.Header = "Ready";
                            break;

                        case "NotReady":
                            item.Icon = new Image
                            {
                                Height = 10,
                                Width = 10,
                                Source =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                        UriKind.Relative))
                            };
                            item.Header = "Not Ready";
                            break;

                        case "AfterCallWork":
                            item.Icon = new Image
                            {
                                Height = 10,
                                Width = 10,
                                Source =
                                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/ACW.png", UriKind.Relative))
                            };
                            item.Header = "After Call Work";
                            break;

                        case "Logon":
                            item.Header = "Log On";
                            break;

                        case "LogOff":
                            item.Header = "Log Off";
                            break;

                        case "NotReadyReason":
                            if (_configContainer.AllKeys.Contains("VoiceNotReadyReasonCodes"))
                            {
                                var nrDic = ((Dictionary<string, string>)_configContainer.GetValue("VoiceNotReadyReasonCodes"));
                                Array.Resize(ref temp, (temp.Length + nrDic.Count));
                                foreach (string key in nrDic.Keys)
                                {
                                    var menuVoiceNotReadyCode = new MenuItem();
                                    menuVoiceNotReadyCode.Margin = new Thickness(2);
                                    menuVoiceNotReadyCode.Icon = new Image
                                    {
                                        Height = 10,
                                        Width = 10,
                                        Source =
                                            GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                                UriKind.Relative))
                                    };
                                    menuVoiceNotReadyCode.Header = "Not Ready - " + key;
                                    BindingOperations.SetBinding(menuVoiceNotReadyCode, IsEnabledProperty,
                                        new Binding { Path = new PropertyPath("EnableMenuitems"), Source = Datacontext.GetInstance() });
                                    menuVoiceNotReadyCode.Click += stateMenu_Click;
                                    temp[i] = menuVoiceNotReadyCode;
                                    if (key != nrDic.LastOrDefault().Key)
                                        i++;
                                }
                            }
                            break;

                        case "Dnd":
                            if (_dataContext.SwitchName.ToLower().Contains("nortel"))
                            {
                                item.Icon = new Image
                                {
                                    Height = 10,
                                    Width = 10,
                                    Source =
                                        GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/DontDis.png",
                                            UriKind.Relative))
                                };
                                item.Header = "Do Not Disturb";
                            }
                            break;
                    }
                    item.Margin = new Thickness(2);
                    if (state == "Logon")
                        BindingOperations.SetBinding(item, IsEnabledProperty,
                                new Binding { Path = new PropertyPath("EnableLogonMenuitem"), Source = Datacontext.GetInstance() });
                    else
                        BindingOperations.SetBinding(item, IsEnabledProperty,
                                new Binding { Path = new PropertyPath("EnableMenuitems"), Source = Datacontext.GetInstance() });
                    item.Click += stateMenu_Click;
                    if (item.Header != null)
                        temp[i] = item;
                    i++;
                }
                temp = temp.Where(x => x != null).ToArray();
                return temp;
            }
            return null;
        }

        /// <summary>
        /// Handles the LoadCompleted event of the webBrowser control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Navigation.NavigationEventArgs"/> instance containing the event data.</param>
        private void webBrowser_LoadCompleted(object sender, System.Windows.Navigation.NavigationEventArgs e)
        {
            webBrowser.Visibility = Visibility.Visible;
            imgLoading.Visibility = Visibility.Hidden;
            Grid.SetZIndex(webBrowser, 10000);
            Grid.SetZIndex(imgLoading, 0);
        }

        /// <summary>
        /// Handles the Navigating event of the webBrowser control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Navigation.NavigatingCancelEventArgs"/> instance containing the event data.</param>
        private void webBrowser_Navigating(object sender, System.Windows.Navigation.NavigatingCancelEventArgs e)
        {
            webBrowser.Visibility = Visibility.Hidden;
            imgLoading.Visibility = Visibility.Visible;
            Grid.SetZIndex(imgLoading, 10000);
            Grid.SetZIndex(webBrowser, 0);
        }

        private void WebBrowser_NewWindow(string URL, int Flags, string TargetFrameName, ref object PostData, string Headers, ref bool Processed)
        {
            if (string.IsNullOrEmpty(URL))
                _logger.Trace(URL);
        }

        private void WebBrowser_NewWindow2(ref object ppDisp, ref bool Cancel)
        {
            try
            {
                string applicationName = string.Empty;
                if (gridPopupURL.Children.Contains(tbSubTab))
                {
                    TabItem selectedItem = tbSubTab.SelectedItem as TabItem;
                    if (selectedItem != null)
                        applicationName = selectedItem.Header.ToString();
                }
                else if (webBrowser != null)
                    applicationName = webBrowser.Name;

                if (lstHookedWindow.Contains(applicationName))
                {
                    WebBrowserWindow webBrowserWindow = null;
                    if (lstOverrideDuplication.Contains(applicationName))
                        webBrowserWindow = Application.Current.Windows.Cast<Window>().Where(x => x.Name == applicationName && x is WebBrowserWindow).SingleOrDefault() as WebBrowserWindow;

                    if (webBrowserWindow == null)
                    {
                        webBrowserWindow = new WebBrowserWindow();
                        webBrowserWindow.Name = applicationName;
                    }

                    webBrowserWindow.Show();
                    webBrowserWindow.Activate();
                    webBrowserWindow.webBrowser.Navigate(new Uri("about:blank"));
                    Guid SID_SWebBrowserApp = new Guid("0002DF05-0000-0000-C000-000000000046");
                    IServiceProviders serviceProvider = (IServiceProviders)webBrowserWindow.webBrowser.Document;

                    Guid serviceGuid = SID_SWebBrowserApp;

                    Guid iid = typeof(SHDocVw.IWebBrowser2).GUID;

                    SHDocVw.IWebBrowser2 myWebBrowser2 = (SHDocVw.IWebBrowser2)serviceProvider.QueryService(ref serviceGuid, ref iid);

                    ppDisp = myWebBrowser2.Application;
                }
            }
            catch (Exception generalException)
            {
                _logger.Error("Error occurred as " + generalException.Message);
            }
        }

        /// <summary>
        /// Handles the Closing event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            try
            {
                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                    ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).UpdateSelectedWorkbin();

                //Code Added - To resolve issue like while agent is on call at that time phonebar get closed if agent click on exit button
                //27.09.2013 - V.Palaniappan
                //var keyValue = _dataContext.htMediaCurrentState.Where(x => x.Value.Contains("Pending"));
                //if (keyValue.Count() == 0 && !_dataContext.isOnCall)
                if (!Datacontext.isRinging && !_dataContext.IsOnChatIXN && !_dataContext.IsOnEmailIXN && !_dataContext.isOnCall)
                {
                    bool isApplicationClosing = false;
                    string text = string.Empty;
                    var count = _dataContext.htMediaCurrentState.Values.OfType<string>().Count(s => ((s != "Logout" && s != "Out Of Service" && !s.Contains("(Do Not Disturb)")) || s == "Do Not Disturb"));
                    if (string.IsNullOrEmpty(count.ToString())) return;
                    if (Convert.ToInt16(count) > 1)
                        text = "Are you sure that you want to logout all channels and exit from the application?";
                    else if (Convert.ToInt16(count) == 1)
                        text = "Are you sure that you want to logout and exit from the application?";
                    else if (Convert.ToInt16(count) == 0)
                    {
                        try
                        {
                            if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData).ToString() + @"\Pointel\temp"))
                                Directory.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData).ToString() + @"\Pointel\temp", true);
                        }
                        catch { }
                        CloseStatGadget();
                        UnsubscribeThirdParty();
                        UnsubscribeSalesForce();
                        Environment.Exit(0);
                    }
                    if (!string.IsNullOrEmpty(text))
                    {
                        if (_configContainer.AllKeys.Contains("voice.enable.popup-disposition") &&
                                (_configContainer.GetAsBoolean("voice.enable.popup-disposition")) && (_dispositionForm != null && _dispositionForm.IsVisible))
                        {
                            e.Cancel = true;
                            var showMessageBox1 = new MessageBox("Information", "Unable to close the application while the disposition form is open.", "", "_Ok", false);
                            showMessageBox1.Name = "MessageWindow";
                            showMessageBox1.Owner = this;
                            showMessageBox1.ShowDialog();
                            return;
                        }
                        var showMessageBox = new MessageBox("Information", text, "_Yes", "_No", false);
                        showMessageBox.Name = "MessageWindow";
                        showMessageBox.Owner = this;
                        showMessageBox.ShowDialog();
                        if (showMessageBox.DialogResult == true)
                        {
                            isApplicationClosing = true;
                            showMessageBox.Dispose();
                            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
                                if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() != "Logout")
                                {
                                    VoiceStateChange(AgentStateType.Channel, "Logout");
                                    if (_configContainer.AllKeys.Contains("voice.enable.force.dnd-off") &&
                               _configContainer.GetAsBoolean("voice.enable.force.dnd-off"))
                                    {
                                        var imessage = (new SoftPhone()).DNDOffR();
                                        if (imessage != null)
                                        {
                                            if (imessage is Genesyslab.Platform.Voice.Protocols.TServer.Events.EventError)
                                                _logger.Warn(imessage.ToString());
                                            if (imessage is Genesyslab.Platform.Voice.Protocols.TServer.Events.EventDNDOff)
                                                _logger.Info(imessage.ToString());
                                        }
                                    }
                                }
                            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email))
                                if (_dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString() != "Logout")
                                    InteractionsMediaStateChange(Datacontext.Channels.Email, "Logout");
                            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                                if (_dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString() != "Logout")
                                    InteractionsMediaStateChange(Datacontext.Channels.Chat, "Logout");
                            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email) || _dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                                interactionService.AgentLogout(_dataContext.ProxyID);
                            interactionService.UnRegisterClient(_dataContext.ProxyID);
                        }
                        else
                        {
                            isApplicationClosing = false;
                            e.Cancel = true;
                        }
                    }

                    if (isApplicationClosing)
                    {
                        if ((_configContainer.AllKeys.Contains("broadcast.dn") && !string.IsNullOrEmpty(_configContainer.GetValue("broadcast.dn")))
                              && (_configContainer.AllKeys.Contains("voice.enable.broadcast") &&
                              ((string)_configContainer.GetValue("voice.enable.broadcast")).ToLower().Equals("true")))
                        {
                            var softPhine = new SoftPhone();
                            softPhine.UnRegister(_configContainer.GetValue("broadcast.dn"));
                        }
                        winHideTimer.Tick -= winHideTimer_Tick;
                        SystemEvents.SessionSwitch -= SystemEvents_SessionSwitch;
                        StateChanged -= Window_StateChanged;
                        if (notifyIcon != null)
                        {
                            notifyIcon.Icon = null;
                            notifyIcon.Dispose();
                            notifyIcon = null;
                        }
                        ClearClipboard();

                        //if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Statistic))
                        //{
                        //    ((IPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Statistic]).CloseGadget();
                        //}

                        //Code added to remove the temp folder created by the application(email)
                        try
                        {
                            if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData).ToString() + @"\Pointel\temp"))
                                Directory.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData).ToString() + @"\Pointel\temp", true);
                        }
                        catch { }
                        ChangeStatGadgetState();
                        CloseStatGadget();
                        UnsubscribeThirdParty();
                        UnsubscribeSalesForce();
                        Environment.Exit(0);
                    }
                }
                else
                {
                    e.Cancel = true;
                    var showMessageBox = new MessageBox("Information", "Unable to close the application while you are in interaction.", "", "_Ok", false);
                    showMessageBox.Name = "MessageWindow";
                    showMessageBox.Owner = this;
                    showMessageBox.ShowDialog();
                }

                #region old code

                //if (_agentstate.ToLower() == "logout" || _agentstate.ToLower() == "out of service" || _agentstate.ToLower() == "out of service1")
                //{
                //    if (_agentstate.ToLower() == "logout")
                //    {
                //        //below code added for unregister broadCast DN
                //        //Smoorthy 10-01-2013
                //        if (!string.IsNullOrEmpty(_dataContext.broadCastDN) && _dataContext.IsBroadcastEnable)
                //        {
                //            var softPhine = new SoftPhone();
                //            softPhine.UnRegister(_dataContext.broadCastDN);
                //        }
                //        //end
                //    }
                //    //HookManager.MouseMove -= HookManager_MouseMove;
                //    winHideTimer.Tick -= winHideTimer_Tick;
                //    SystemEvents.SessionSwitch -= SystemEvents_SessionSwitch;
                //    StateChanged -= Window_StateChanged;
                //    //_StatDisplayMessage -= new SoftPhoneBar.StatisticDisplayMessage(SoftPhoneBar__StatDisplayMessage);
                //    //_ixnHandler.channelStates -= new ChannelStates(SoftPhoneBar__ixnHandler.channelStates);

                //    //below code commented for remove the notify icon when the app end.
                //    //12-06-2013
                //    //smoorthy
                //    notifyIcon.Icon = null;
                //    notifyIcon.Dispose();
                //    notifyIcon = null;
                //    ChangeStatGadgetState();
                //    if (_plugins.PluginCollection.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Statistic))
                //    {
                //        ((IPlugin)_plugins.PluginCollection[Pointel.Interactions.IPlugins.Plugins.Statistic]).CloseGadget();
                //    }
                //    ClearClipboard();
                //    _dispositionUserControls.Clear();
                //    Environment.Exit(0);
                //}
                //else
                //{
                //    string text = "Are you sure that you want to logout and exit from the application?";
                //    var count = _dataContext.htMediaCurrentState.Values.OfType<string>().Count(s => (s != "Logout" && s != "Out Of Service"));
                //    if (!string.IsNullOrEmpty(count.ToString()))
                //        if (Convert.ToInt16(count) > 1)
                //            text = "Are you sure that you want to logout all channels and exit from the application?";
                //    var showMessageBox = new MessageBox("Information",
                //        text, "_Yes", "_No", false);
                //    showMessageBox.Owner = this;
                //    showMessageBox.ShowDialog();
                //    if (showMessageBox.DialogResult == true)
                //    {
                //        _dict = _dataContext.htMediaCurrentState.Cast<DictionaryEntry>().ToDictionary(kvp => (Datacontext.Channels)kvp.Key, kvp => (string)kvp.Value);
                //        var keyValues = _dict.Where(x => x.Value.Contains("Pending"));
                //        if (keyValues.Count() == 0)
                //        {
                //            showMessageBox.Dispose();
                //            var notready = new SoftPhone();
                //            notready.NotReady(_dataContext.VoiceNotReadyReasonCode, "001");
                //            notready.Logout();
                //            _isLogoutFromAID = true;
                //            //below code added for unregister broadCast DN
                //            //Smoorthy 10-01-2013
                //            var softUNRegister = new SoftPhone();
                //            if (!string.IsNullOrEmpty(_dataContext.broadCastDN) && _dataContext.IsBroadcastEnable)
                //            {
                //                softUNRegister.UnRegister(_dataContext.broadCastDN);
                //            }
                //            //end

                //            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
                //                if (_dataContext.htMediaCurrentState[Datacontext.Channels.Voice].ToString() != "Logout")
                //                    VoiceStateChange(AgentStateType.Channel, "Log Off");
                //            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email))
                //                if (_dataContext.htMediaCurrentState[Datacontext.Channels.Email].ToString() != "Logout")
                //                    EmailStateChange(AgentStateType.Channel, "Log Off");
                //            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                //                if (_dataContext.htMediaCurrentState[Datacontext.Channels.Chat].ToString() != "Logout")
                //                    ChatStateChange(AgentStateType.Channel, "Log Off");
                //            if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Email) || _dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Chat))
                //                interactionService.UnRegisterClient(_dataContext.ProxyID);

                //            winHideTimer.Tick -= winHideTimer_Tick;
                //            SystemEvents.SessionSwitch -= SystemEvents_SessionSwitch;
                //            StateChanged -= Window_StateChanged;
                //            notifyIcon.Icon = null;
                //            notifyIcon.Dispose();
                //            notifyIcon = null;
                //            ClearClipboard();

                //            ChangeStatGadgetState();
                //            if (_plugins.PluginCollection.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Statistic))
                //            {
                //                ((IPlugin)_plugins.PluginCollection[Pointel.Interactions.IPlugins.Plugins.Statistic]).CloseGadget();
                //            }
                //            _dispositionUserControls.Clear();
                //            Environment.Exit(0);
                //        }
                //        else { e.Cancel = true; }
                //    }
                //    else
                //    {
                //        e.Cancel = true;
                //    }
                //}

                #endregion old code

                // Added code to Close browser if the object in open state
                //if (IE != null)
                //    IE.Quit();
            }
            catch (Exception commonException)
            {
                _logger.Error("Error occurred as : " + commonException);
            }
        }

        /// <summary>
        /// Handles the Loaded event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                this.Hide();
                _logger.Debug("Softphonebar Page Window_Loaded Event entry");
                _shadowEffect.ShadowDepth = 0;
                _shadowEffect.Opacity = 0.5;
                _shadowEffect.Softness = 0.5;
                _shadowEffect.Color = (System.Windows.Media.Color)ColorConverter.ConvertFromString("#003660");

                btn_Hide_Click(null, null);

                lblLoggedIN_time.Text = "Logged in since " + DateTime.Now.ToShortTimeString();
                lblLoginID.Text = "Login ID " + _dataContext.AgentLoginId;
                SystemMenu = GetSystemMenu(new WindowInteropHelper(this).Handle, false);
                DeleteMenu(SystemMenu, SC_Move, MF_BYCOMMAND);
                DeleteMenu(SystemMenu, SC_Size, MF_BYCOMMAND);
                DeleteMenu(SystemMenu, SC_Maximize, MF_BYCOMMAND);
                DeleteMenu(SystemMenu, SC_Close, MF_BYCOMMAND);
                DeleteMenu(SystemMenu, SC_Restore, MF_BYCOMMAND);
                DeleteMenu(SystemMenu, SC_Minimize, MF_BYCOMMAND);
                InsertMenu(SystemMenu, 0, MF_BYPOSITION, CU_Minimize, "Minimize");
                InsertMenu(SystemMenu, 2, MF_BYPOSITION, CU_Close, "Close");
                var source = PresentationSource.FromVisual(this) as HwndSource;
                source.AddHook(WndProc);
                Top = 0;
                EventManager.RegisterClassHandler(typeof(UIElement), AccessKeyManager.AccessKeyPressedEvent,
                    new AccessKeyPressedEventHandler(OnAccessKeyPressed));
                KeyDown += wnd_KeyDown;

                //if (DataTabControl.Items.Contains(calldata))
                //    DataTabControl.Items.Remove(calldata);

                if (DataTabControl.Items.Contains(DispositionTab))
                    DataTabControl.Items.Remove(DispositionTab);

                #region Notify icon in system tray

                _sysTray = new ContextMenu();
                _sysTray.Style = (Style)FindResource("Contextmenu");
                var menuItemn0 = new MenuItem();
                menuItemn0.Style = (Style)FindResource("Menuitem");
                menuItemn0.Click += menuItem_Click;
                menuItemn0.Header = "Exit";
                menuItemn0.Name = "Exit";

                var menuItemn2 = new MenuItem();
                menuItemn2.Style = (Style)FindResource("Menuitem");
                var _tempImg = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/StatusSet16x16.png",
                            UriKind.Relative));
                menuItemn2.Icon = new Image
                {
                    Height = 15,
                    Width = 15,
                    Source =
                        GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/StatusSet16x16.png",
                            UriKind.Relative))
                };
                menuItemn2.Header = "Agent Status";
                menuItemn2.MouseEnter += menuItemn2_MouseEnter;
                foreach (MenuItem item in GlobalStatusMenu())
                    menuItemn2.Items.Add(item);

                menuItemn2.Click += menuItem_Click;
                menuItemn2.Name = "AgentStatus";

                var menuItemn3 = new MenuItem();
                menuItemn3.Style = (Style)FindResource("Menuitem");
                menuItemn3.Icon = new Image
                {
                    Height = 15,
                    Width = 15,
                    Source =
                        GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/About16x16.png",
                            UriKind.Relative))
                };
                menuItemn3.Header = "About us...";
                menuItemn3.Click += menuItem_Click;
                menuItemn3.Name = "Aboutus";

                var menuItemn4 = new MenuItem();
                menuItemn4.Style = (Style)FindResource("Menuitem");
                menuItemn4.Icon = new Image
                {
                    Height = 15,
                    Width = 15,
                    Source =
                        GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Help16x16.png",
                            UriKind.Relative))
                };
                menuItemn4.Header = "Help";
                menuItemn4.Click += menuItem_Click;
                menuItemn4.Name = "Help";
                //if (_dataContext.IsStatTickerLoaded && _configContainer.AllKeys.Contains("statistics.enable.plugin") &&
                //     ((string)_configContainer.GetValue("statistics.enable.plugin")).ToLower().Equals("true"))
                //{
                var menuItemn5 = new MenuItem();
                menuItemn5.Style = (Style)FindResource("Menuitem");
                menuItemn5.Icon = new Image
                {
                    Height = 15,
                    Width = 15,
                    Source =
                        GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/StatTickerFive.png",
                            UriKind.Relative))
                };
                BindingOperations.SetBinding(menuItemn5, MenuItem.HeaderProperty, new Binding()
                {
                    Path = new PropertyPath("NotifyGadgetDisplayName"),
                    Source = Datacontext.GetInstance()
                });

                BindingOperations.SetBinding(menuItemn5, MenuItem.VisibilityProperty, new Binding()
                {
                    Path = new PropertyPath("GadgetVisibility"),
                    Source = Datacontext.GetInstance()
                });

                if (_dataContext.GadgetState == "Opened")
                {
                    _dataContext.NotifyGadgetDisplayName = "Close Stat Gadget";
                    StatisticHelperClient.SendRequest(StatRequest.Open);
                }
                else
                {
                    _dataContext.NotifyGadgetDisplayName = "Show Stat Gadget";
                }
                menuItemn5.Click += menuItem_Click;
                menuItemn5.Name = "StatGadget";
                _sysTray.Items.Add(menuItemn5);
                //}
                _sysTray.Items.Add(menuItemn4);
                _sysTray.Items.Add(menuItemn3);
                _sysTray.Items.Add(menuItemn2);
                _sysTray.Items.Add(menuItemn0);
                _sysTray.PlacementTarget = this;

                try
                {
                    var iconStream1 =
                        Application.GetResourceStream(
                            new Uri(
                                "pack://application:,,,/Agent.Interaction.Desktop;component/Images/Pointelsoftphone32x32.ico"));
                    if (iconStream1 != null)
                    {
                        using (Stream stream = iconStream1.Stream)
                        {
                            if (notifyIcon != null)
                            {
                                notifyIcon.ToolTipText = (string)FindResource("keyTitle") + " - " +
                                                         _dataContext.AgentFullName;

                                notifyIcon.Icon = new Icon(stream);
                                notifyIcon.ContextMenu = _sysTray;
                                notifyIcon.TrayPopup = _agentState;
                                notifyIcon.TrayLeftMouseUp += notifyIcon_TrayLeftMouseUp;
                            }
                        }
                    }
                    iconStream1 = null;
                }
                catch (Exception ex)
                {
                    _logger.Warn("Error occurred while adding the notify icon on taskbar as : " + ex.Message);
                }

                #endregion Notify icon in system tray

                #region Consult Call Selection

                _dataContext.ConsultCallSelection.Items.Clear();
                foreach (MenuItem item in ConsultCallSelectionMenu())
                    _dataContext.ConsultCallSelection.Items.Add(item);

                #endregion Consult Call Selection

                //Code Added - To make hide/Show Alternate/Merge Call Button
                //9/01/2014 - V.Palaniappan
                if (_configContainer.AllKeys.Contains("voice.enable.alternate-merge.call") &&
                    ((string)_configContainer.GetValue("voice.enable.alternate-merge.call")).ToLower().Equals("true"))
                {
                    btnAlternateCall.Visibility = Visibility.Visible;
                    btnMergeCall.Visibility = Visibility.Visible;
                }
                else
                {
                    btnAlternateCall.Visibility = Visibility.Collapsed;
                    btnAlternateCall.Width = 0;
                    btnAlternateCall.MinWidth = 0;
                    btnAlternateCall.MaxHeight = 0;
                    btnAlternateCall.MinHeight = 0;
                    btnAlternateCall.MaxWidth = 0;
                    btnMergeCall.Visibility = Visibility.Collapsed;
                    btnMergeCall.Width = 0;
                    btnMergeCall.MinWidth = 0;
                    btnMergeCall.MaxHeight = 0;
                    btnMergeCall.MinHeight = 0;
                    btnMergeCall.MaxWidth = 0;
                }
                //End
                _taskbarNotifier.StayOpenMilliseconds = 1000000000;
                _taskbarNotifier.OpeningMilliseconds = 500;
                _taskbarNotifier.HidingMilliseconds = 1000;
                _taskbarNotifier.DataContext = DataContext;
                _taskbarNotifier.Show();
                _taskbarNotifier.DisplayState = Pointel.TaskbarNotifier.TaskbarNotifier.DisplayStates.Hiding;
                _taskbarNotifier.Hide();
                _broadCastNotifier.StayOpenMilliseconds = _broadCastStayOpenTime;
                _broadCastNotifier.OpeningMilliseconds = 1000;
                _broadCastNotifier.HidingMilliseconds = 500;
                _broadCastNotifier.DataContext = DataContext;
                _broadCastNotifier.Show();
                _broadCastNotifier.DisplayState = Pointel.TaskbarNotifier.TaskbarNotifier.DisplayStates.Hiding;
                _broadCastNotifier.Hide();
                LoadImages();

                //_dataContext.IsEpicEnabled = false;
                //btnEpic.Visibility = Visibility.Collapsed;
                //btnEpic.Width = 0;
                //btnEpic.MinWidth = 0;
                //btnEpic.MaxHeight = 0;
                //btnEpic.MinHeight = 0;
                //btnEpic.MaxWidth = 0;

                _dataContext.TitleBgColor = null; ;
                _dataContext.A_DataTabVisibility = Visibility.Collapsed;

                _dataContext.LogImageSource = _imageDatacontext.ImgLoginEnabled;
                _dataContext.LogText = (String)FindResource("keyLogin");

                _dataContext.ReadyImageSource = _imageDatacontext.ImgReadyDisabled;
                _dataContext.ReadyText = (String)FindResource("keyReady");

                _dataContext.TalkImageSource = _imagePath + "\\Call.Disable.png";
                _dataContext.TalkText = (String)FindResource("KeyTalk");

                _dataContext.HoldImageSource = _imageDatacontext.ImgHoldDisabled;
                _dataContext.HoldText = (String)FindResource("KeyHold");

                _dataContext.TransImageSource = _imageDatacontext.ImgTransDisabled;
                _dataContext.TransText = (String)FindResource("KeyTransfer");

                _dataContext.ConfImageSource = _imageDatacontext.ImgConfDisabled;
                _dataContext.ConfText = (String)FindResource("keyConfrence");

                _dataContext.ReConImageSource = _imageDatacontext.ImgReconnectDisabled;
                _dataContext.ReConText = (String)FindResource("KeyReConnect");

                _dataContext.IsDialEnabled = true;
                _dataContext.DialImageSource = _imageDatacontext.ImgDialPadEnabled;
                _dataContext.DialText = (String)FindResource("KeyDial");

                _dataContext.AttachDataImageSource = _imageDatacontext.ImgCallDataDisabled;
                _dataContext.AttachDataText = (String)FindResource("KeyCallData");

                _dataContext.AlternateCallImageSource = _imageDatacontext.ImgAltCallDisabled;
                _dataContext.AlternateCallText = (String)FindResource("KeyAlternateCall");

                _dataContext.MergeCallImageSource = _imageDatacontext.ImgMergeCallDisabled;
                _dataContext.MergeCallText = (string)FindResource("KeyMergeCall");

                if (!_dataContext.IsEmailPluginAdded || !_configContainer.AllKeys.Contains("email.enable.plugin") ||
                    !(((string)_configContainer.GetValue("email.enable.plugin")).ToLower().Equals("true")) && _dataContext.lstHoldingChannelSelection.ContainsKey("email"))
                {
                    if (DataTabControl.Items.Contains(TabWorkbin))
                        DataTabControl.Items.Remove(TabWorkbin);
                }
                else if (!_dataContext.IsWorkbinPluginAdded)
                {
                    if (DataTabControl.Items.Contains(TabWorkbin))
                        DataTabControl.Items.Remove(TabWorkbin);
                }

                winHideTimer = new DispatcherTimer();
                winHideTimer.Tick += winHideTimer_Tick;
                winHideTimer.Interval = TimeSpan.FromSeconds(1);
                ////new code added by vinoth
                //changed to this instead of calling constructor
                var softPhoneListener = new SoftPhone();
                ISoftphoneListener listnerObject = this;
                IConfigListener configListenerObject = this;
                var uiList = SoftPhoneSubscriber.UI;
                softPhoneListener.Subscribe(listnerObject, uiList);
                _listener += ChangingphoneStatus;
                _commonMessagelistener += GettingUserData;
                _agentStatusListener += SoftPhoneBar_agentStatusListener;
                _needToConnectServer += SoftPhoneBar__needToConnectServer;

                #region Third Party Integration Subscribe

                if (_configContainer.AllKeys.Contains("crm.third-party-tool") &&
                   ((string)_configContainer.GetValue("crm.third-party-tool")).Equals("true"))
                {
                    IDesktopCommunicator listnerObjectDesktop = this;
                    try
                    {
                        var file = Path.Combine(Path.Combine(System.Windows.Forms.Application.StartupPath, "Plugins"), "Pointel.Integration.Core.dll");
                        if (File.Exists(file))
                        {
                            Assembly asm = Assembly.LoadFile(file);
                            _iDesktopMessenger = (IDesktopMessenger)(from asmType in asm.GetTypes() where asmType.GetInterface("IDesktopMessenger") != null select (IDesktopMessenger)Activator.CreateInstance(asmType)).FirstOrDefault();
                            _iDesktopMessenger.Subscribe(listnerObjectDesktop);
                        }
                        else
                        {
                            _logger.Warn("InitializeThirdPartyIntegration : Integration.Core Plug-in dll not exist");
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.Error("InitializeThirdPartyIntegration : Integration.Core Plug-in dll not exist" + ex.ToString());
                    }
                }

                #endregion Third Party Integration Subscribe

                ////End
                _agentStateTimer.Interval = TimeSpan.FromMilliseconds(1000);

                _agentStateTimer.Tick += agentStateTimer_Tick;
                _agentWrapupTimer.Tick += agentWrapupTimer_Tick;
                if (_dataContext.QueueSelectedValue != null)
                {
                    if (_dataContext.QueueSelectedValue.Equals("None"))
                    {
                        _dataContext.QueueSelectedValue = "optional";
                    }
                }
                else
                {
                    _dataContext.QueueSelectedValue = "optional";
                }

                //LoadDispositionCodes("");

                imgPinClose.Source =
                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Pin.Open.png", UriKind.Relative));
                imgPin_EnterClose.Source =
                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Pin.Open.Selected.png",
                        UriKind.Relative));
                imgPinClose.Width = 18;
                imgPinClose.Height = 18;
                imgPin_EnterClose.Width = 18;
                imgPin_EnterClose.Height = 18;
                imgPinOpen.Source =
                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Pin.Close.png",
                        UriKind.Relative));
                imgPin_EnterOpen.Source =
                    GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Pin.Close.Selected.png",
                        UriKind.Relative));
                imgPinOpen.Width = 18;
                imgPinOpen.Height = 18;
                imgPin_EnterOpen.Width = 18;
                imgPin_EnterOpen.Height = 18;
                btnPin.Content = imgPinOpen;

                //Code Added by Manikandan on 16-Jan-2014 for Skills Tab

                if (_configContainer.AllKeys.Contains("enable.my-skills") &&
                    ((string)_configContainer.GetValue("enable.my-skills")).ToLower().Equals("true"))
                {
                    if (_configContainer.AllKeys.Contains("enable.my-skills-add"))
                    {
                        _dataContext.CanAddSkill = ((string)_configContainer.GetValue("enable.my-skills-add")).Equals("true");
                        _dataContext.IsAddSkillsEnabled = _dataContext.CanAddSkill;
                    }
                    if (_configContainer.AllKeys.Contains("enable.my-skills-edit"))
                    {
                        _dataContext.CanEditSkill = ((string)_configContainer.GetValue("enable.my-skills-edit")).Equals("true");
                        _dataContext.IsUpdateSkillsEnabled = _dataContext.CanEditSkill;
                    }
                    if (_configContainer.AllKeys.Contains("enable.my-skills-delete"))
                    {
                        _dataContext.CanDeleteSkill = ((string)_configContainer.GetValue("enable.my-skills-delete")).Equals("true");
                        _dataContext.IsDeleteSkillsEnabled = _dataContext.CanDeleteSkill;
                    }

                    _dataContext.SkillsTabVisibility = Visibility.Visible;
                    _dataContext.SkillsContextMenu.Items.Clear();
                    _dataContext.SkillsContextMenu.PlacementTarget = DGSkills;
                    var mnuItem = new MenuItem();
                    mnuItem.Margin = new Thickness(2);
                    mnuItem.Icon = new Image
                    {
                        Height = 15,
                        Width = 15,
                        Source =
                            GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Add.png",
                                UriKind.Relative))
                    };
                    mnuItem.Header = "Add";
                    mnuItem.Click += mnuAdd_Click;
                    BindingOperations.SetBinding(mnuItem, IsEnabledProperty,
                        new Binding { Path = new PropertyPath("CanAddSkill"), Source = Datacontext.GetInstance() });
                    _dataContext.SkillsContextMenu.Items.Add(mnuItem);
                    var mnuEdit = new MenuItem();
                    mnuEdit.Margin = new Thickness(2);
                    mnuEdit.Header = "Edit";
                    mnuEdit.Click += mnuEdit_Click;
                    mnuEdit.Background = Brushes.Transparent;
                    mnuEdit.Icon = new Image
                    {
                        Height = 15,
                        Width = 15,
                        Source =
                            GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Edit.png",
                                UriKind.Relative))
                    };
                    BindingOperations.SetBinding(mnuEdit, IsEnabledProperty,
                        new Binding { Path = new PropertyPath("CanEditSkill"), Source = Datacontext.GetInstance() });
                    _dataContext.SkillsContextMenu.Items.Add(mnuEdit);
                    var mnuDelete = new MenuItem();
                    mnuDelete.Margin = new Thickness(2);
                    mnuDelete.Header = "Delete";
                    mnuDelete.Click += mnuDelete_Click;
                    mnuDelete.Background = Brushes.Transparent;
                    mnuDelete.Icon = new Image
                    {
                        Height = 15,
                        Width = 15,
                        Source =
                            GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Delete.png",
                                UriKind.Relative))
                    };
                    BindingOperations.SetBinding(mnuDelete, IsEnabledProperty,
                        new Binding { Path = new PropertyPath("CanDeleteSkill"), Source = Datacontext.GetInstance() });
                    _dataContext.SkillsContextMenu.Items.Add(mnuDelete);
                }
                else
                {
                    DataTabControl.Items.Remove(TabMySkills);
                }

                if ((_configContainer.AllKeys.Contains("voice.enable.single-step-transfer") &&
                    ((string)_configContainer.GetValue("voice.enable.single-step-transfer")).Equals("true")) &&
                    !(_configContainer.AllKeys.Contains("voice.enable.two-step-transfer") &&
                    ((string)_configContainer.GetValue("voice.enable.two-step-transfer")).Equals("true")))
                    _dataContext.UserSetTransType = Datacontext.ConsultType.OneStep;

                if ((_configContainer.AllKeys.Contains("voice.enable.two-step-transfer") &&
                    ((string)_configContainer.GetValue("voice.enable.two-step-transfer")).Equals("true")) &&
                    !(_configContainer.AllKeys.Contains("voice.enable.single-step-transfer") &&
                    ((string)_configContainer.GetValue("voice.enable.single-step-transfer")).Equals("true")))
                    _dataContext.UserSetTransType = Datacontext.ConsultType.DualStep;

                if ((_configContainer.AllKeys.Contains("voice.enable.single-step-conference") &&
                    ((string)_configContainer.GetValue("voice.enable.single-step-conference")).Equals("true")) &&
                    !(_configContainer.AllKeys.Contains("voice.enable.two-step-conference") &&
                    ((string)_configContainer.GetValue("voice.enable.two-step-conference")).Equals("true")))
                    _dataContext.UserSetConfType = Datacontext.ConsultType.OneStep;

                if ((_configContainer.AllKeys.Contains("voice.enable.two-step-conference") &&
                    ((string)_configContainer.GetValue("voice.enable.two-step-conference")).Equals("true")) &&
                    !(_configContainer.AllKeys.Contains("voice.enable.single-step-conference") &&
                    ((string)_configContainer.GetValue("voice.enable.single-step-conference")).Equals("true")))
                    _dataContext.UserSetConfType = Datacontext.ConsultType.DualStep;

                _dataContext.UserPlace = "Using " + _dataContext.Place;
                _taskbarNotifier.DisplayState = Pointel.TaskbarNotifier.TaskbarNotifier.DisplayStates.Hiding;
                var forward = "No Active Forward";
                if (!string.IsNullOrEmpty(_dataContext.ForwardStatus))
                {
                    forward = _dataContext.ForwardStatus;
                    if (!_dataContext.SwitchName.ToLower().Contains("nortel"))
                    {
                        _agentStateTimer.Start();
                        ChangeVoiceStatus("Logout");
                        _agentstate = "Logout";
                    }
                }

                _dataContext.BottomRowHeight = new GridLength(0);
                MinWidth = grdTools_Buttons.ActualWidth + (btn_Menu.Width + 20 + 8) + 16;
                MinHeight = grdTitle.ActualHeight + grdTool.ActualHeight + 20;
                Height = MinHeight;
                MaxHeight = Height;
                MaxWidth = SystemParameters.PrimaryScreenWidth;//MaxWidth = ActualWidth;
                if (DataTabControl.SelectedItem == popUpUrl)
                    DataTabControl.SelectedIndex = 0;

                //Code Added - To set widow height and width based on the configuration
                //30-Sep-2016
                if (_configContainer.AllKeys.Contains("application.main-window-size") && !string.IsNullOrEmpty(_configContainer.GetAsString("application.main-window-size")))
                {
                    var sizeOftheWin = (_configContainer.GetAsString("application.main-window-size").Split('x'));
                    if (sizeOftheWin != null && sizeOftheWin.Length == 2)
                    {
                        int temp1 = 0;
                        int temp2 = 0;
                        int.TryParse(sizeOftheWin[0], out temp1);
                        int.TryParse(sizeOftheWin[1], out temp2);
                        if (temp1 > 0)
                            _dataContext.ConfiguredWindowHeight = temp1;
                        if (temp2 > 0)
                            _dataContext.ConfiguredWindowWidth = temp2;
                    }
                    if (_dataContext.ConfiguredWindowWidth > 0)
                    {
                        try
                        {
                            Width = ((double)_dataContext.ConfiguredWindowWidth / 100 * SystemParameters.PrimaryScreenWidth);
                            _isfirstBottomWidthSet = true;
                        }
                        catch { }
                    }
                }
                //end

                //Do not delete this code is to close the ghost window used for CME subscribe
                var window = IsWindowOpen<Window>("loginWindow");
                if (window != null)
                    window.Close();

                //code added to implement requeue timeout
                _dataContext.RequeueTimer.Tick += new EventHandler(RequeueTimer_Tick);
                _dataContext.RequeueTimer.Interval = TimeSpan.FromMilliseconds(1000);
                //end

                #region Load Statistics

                LoadStat();
                //if (_dataContext.IsStatTickerLoaded && (_configContainer.AllKeys.Contains("statistics.enable.plugin") &&
                //        ((string)_configContainer.GetValue("statistics.enable.plugin")).Equals("true")))
                //{
                //    try
                //    {
                //        //code added by Manikandan to add my statistics menu item & tab item only when my statistics is enabled
                //        if (!_configContainer.AllKeys.Contains("statistics.enable-mystat-aid") ||
                //             !((string)_configContainer.GetValue("statistics.enable-mystat-aid")).ToLower().Equals("true"))
                //            DataTabControl.Items.Remove(MyStatistics);

                //        if (!_configContainer.AllKeys.Contains("statistics.enable-ccstat-aid") ||
                //                !((string)_configContainer.GetValue("statistics.enable-ccstat-aid")).Equals("true"))
                //            DataTabControl.Items.Remove(ContactStatistics);

                //        //if (_dataContext.IsStatTickerLoaded && _dataContext.IsTeamCommunicatorPluginAdded &&
                //        //        (_configContainer.AllKeys.Contains("teamcommunicator.enable.plugin") &&
                //        //            ((string)_configContainer.GetValue("teamcommunicator.enable.plugin")).ToLower().Equals("true")))
                //        //{
                //        //    StatisticsListener listener = new StatisticsListener();
                //        //    listener.RequestTeamCommunicatorStatistics();
                //        //}
                //    }
                //    catch (Exception ex)
                //    {
                //        _logger.Error("Error occurred as " + ex.Message);
                //    }
                //}
                //else
                //{
                //    if (!_configContainer.AllKeys.Contains("statistics.enable-mystat-aid") ||
                //            !((string)_configContainer.GetValue("statistics.enable-mystat-aid")).ToLower().Equals("true"))
                //        DataTabControl.Items.Remove(MyStatistics);

                //    if (!_configContainer.AllKeys.Contains("statistics.enable-ccstat-aid") ||
                //            !((string)_configContainer.GetValue("statistics.enable-ccstat-aid")).Equals("true"))
                //        DataTabControl.Items.Remove(ContactStatistics);

                //    //DataTabControl.Items.Remove(MyStatistics);
                //    //DataTabControl.Items.Remove(ContactStatistics);
                //}

                #endregion Load Statistics

                //Start: Load the salesforce if the salesforce is enabled. -- 22-06-2015 by sakthi.

                #region SalseForce Initilization

                // Need to initialize the sales force

                #region Old Code

                //Datacontext.GetInstance().IsSalesforcePluginEnabled = _configContainer.GetAsBoolean("salesforce.enable.plugin");
                //if (Datacontext.GetInstance().IsSalesforcePluginAdded && Datacontext.GetInstance().IsSalesforcePluginEnabled)
                //{
                //    LoadSalesforcePlugin();
                //    if (_plugins.PluginCollections.ContainsKey(Plugins.Salesforce))
                //    {
                //        IPluginCallBack _salesforceSoftphoneListener = this;
                //        Thread salesForceTH = new Thread((delegate()
                //        {
                //            ((ISalesforcePlugin)_plugins.PluginCollections[Plugins.Salesforce]).Initialize(_salesforceSoftphoneListener, _plugins.PluginCollections);
                //        }));
                //        salesForceTH.Start();
                //    }
                //}

                #endregion Old Code

                #endregion SalseForce Initilization

                //Thread thread = new Thread(LoadStat);
                //thread.Start();
                if (!_configContainer.GetAsBoolean("voice.enable.popup-disposition", false) && _configContainer.GetAsBoolean("interaction.enable.disposition-code", true))

                //!(_configContainer.AllKeys.Contains("voice.enable.popup-disposition")
                //  && Convert.ToBoolean(_configContainer.GetValue("voice.enable.popup-disposition"))))
                {
                    SetDispositionCode("");
                    SetDispositionCodeEnable();
                }
                else
                    _dataContext.DispositionVisibility = Visibility.Collapsed;

                #region Voice Initilization

                if (_dataContext.htMediaCurrentState.ContainsKey(Datacontext.Channels.Voice))
                    _dataContext.htMediaCurrentState.Remove(Datacontext.Channels.Voice);
                _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Voice, "Unknown");
                InitializeVoiceMedia();

                #endregion Voice Initilization

                #region Load Interaction

                bool mediaSubscribed = false;
                Pointel.Interactions.Core.Common.OutputValues registerOutput = null;
                Pointel.Interactions.Core.Common.OutputValues ixnLoginResponse = null;
                Pointel.Interactions.Core.Common.OutputValues subscribeOutput = null;
                BitmapImage image = null;
                if ((_configContainer.AllKeys.Contains("email.enable.plugin") &&
                        ((string)_configContainer.GetValue("email.enable.plugin")).Equals("true")) && _dataContext.IsEmailPluginAdded && _dataContext.lstHoldingChannelSelection.ContainsKey("email"))
                {
                    _ixnHandler.Subscribe(interactionService, Pointel.Interactions.Core.InteractionTypes.Email);
                    mediaSubscribed = true;
                    _emailListener = this;
                    LoadEmailPlugin();
                    LoadWorkbinPlugin();
                    //Old place of LoadContactPlugin();
                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Email) && Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["email"]))
                    {
                        _mediaListWithState.Add(Datacontext.Channels.Email.ToString().ToLower(), (((string)_configContainer.GetValue("login.email.enable.auto-ready")).ToLower().Equals("true") ? 1 : 0));
                        if (((string)_configContainer.GetValue("login.email.enable.auto-ready")).ToLower().Equals("true"))
                        {
                            InteractionHandler.AgentEmailState = "Ready";
                            image = _imageDatacontext.ImgReadyStatus;
                            //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png",
                            //                UriKind.Relative));
                        }
                        else
                        {
                            InteractionHandler.AgentEmailState = "Not Ready";
                            image = _imageDatacontext.ImgNotReadyStatus;
                            //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                            //                UriKind.Relative));
                        }
                    }
                    else
                    {
                        InteractionHandler.AgentEmailState = "Logout";
                        image = _imageDatacontext.ImgLogoutStatus;
                        //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png",
                        //                UriKind.Relative));
                    }
                    _dataContext.EmailStateImageSource = image;
                    _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Email, InteractionHandler.AgentEmailState);
                }
                else
                {// Added by sakthi to remove the workbin tab, if the ixn not configured
                    DataTabControl.Items.Remove(TabWorkbin);
                }

                CheckAndLoadContactPlugin();

                if ((_configContainer.AllKeys.Contains("chat.enable.plugin") &&
                            ((string)_configContainer.GetValue("chat.enable.plugin")).Equals("true")) && _dataContext.IsChatPluginAdded && _dataContext.lstHoldingChannelSelection.ContainsKey("chat"))
                {
                    _ixnHandler.Subscribe(interactionService, Pointel.Interactions.Core.InteractionTypes.Chat);
                    mediaSubscribed = true;
                    _chatListener = this;
                    LoadChatPlugin();
                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Chat) && Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["chat"]))
                    {
                        _mediaListWithState.Add(Datacontext.Channels.Chat.ToString().ToLower(), (((string)_configContainer.GetValue("login.chat.enable.auto-ready")).ToLower().Equals("true") ? 1 : 0));
                        if (((string)_configContainer.GetValue("login.chat.enable.auto-ready")).ToLower().Equals("true"))
                        {
                            InteractionHandler.AgentChatState = "Ready";
                            image = _imageDatacontext.ImgReadyStatus;
                            //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png",
                            //                UriKind.Relative));
                        }
                        else
                        {
                            InteractionHandler.AgentChatState = "Not Ready";
                            image = _imageDatacontext.ImgNotReadyStatus;
                            //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                            //                UriKind.Relative));
                        }
                    }
                    else
                    {
                        InteractionHandler.AgentChatState = "Logout";
                        image = _imageDatacontext.ImgLogoutStatus;
                        //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png",
                        //                UriKind.Relative));
                    }
                    _dataContext.ChatStateImageSource = image;
                    _dataContext.htMediaCurrentState.Add(Datacontext.Channels.Chat, InteractionHandler.AgentChatState);
                }

                if ((_configContainer.AllKeys.Contains("outbound.enable.plugin") &&
                            ((string)_configContainer.GetValue("outbound.enable.plugin")).Equals("true")) && _dataContext.IsOutboundPluginAdded)
                {
                    mediaSubscribed = true;
                    _outboundListener = this;
                    LoadOutboundPlugin();
                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.OutboundPreview) && Convert.ToBoolean(_dataContext.lstHoldingChannelSelection["outboundpreview"]))
                    {
                        _mediaListWithState.Add(Datacontext.Channels.OutboundPreview.ToString().ToLower(), (((string)_configContainer.GetValue("login.outbound.enable.auto-ready")).ToLower().Equals("true") ? 1 : 0));
                        if (_configContainer.AllKeys.Contains("login.outbound.enable.auto-ready") &&
                                         ((string)_configContainer.GetValue("login.outbound.enable.auto-ready")).ToLower().Equals("true"))
                        {
                            InteractionHandler.AgentOutboundState = "Ready";
                            image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Ready.png",
                                            UriKind.Relative));
                        }
                        else
                        {
                            InteractionHandler.AgentOutboundState = "Not Ready";
                            image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Not_Ready.png",
                                            UriKind.Relative));
                        }
                    }
                    else
                    {
                        InteractionHandler.AgentOutboundState = "Logout";
                        image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png",
                                        UriKind.Relative));
                    }
                    _dataContext.OutboundStateImageSource = image;
                    _dataContext.htMediaCurrentState.Add(Datacontext.Channels.OutboundPreview, InteractionHandler.AgentOutboundState);
                    var pluginOutbound = (IOutboundPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.OutboundPreview];
                    if (_dataContext.InteractionProtocol != null)
                        pluginOutbound.NotifyInteractionProtocol(_dataContext.InteractionProtocol);
                    UserControl myCampaignsUserControl = pluginOutbound.GetMyCampaign(false);
                    if (myCampaignsUserControl != null)
                    {
                        CampaignTabGrid.Children.Clear();
                        CampaignTabGrid.Children.Add(myCampaignsUserControl);
                    }
                }
                else
                {
                    Dispatcher.BeginInvoke((Action)(delegate
                    {
                        if (DataTabControl.Items.Contains(TabMyCampaigns))
                            DataTabControl.Items.Remove(TabMyCampaigns);
                    }), DispatcherPriority.Render);
                }

                LoadSalesforcePlugin();

                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact))
                {
                    _ixnHandler.UCSSubscribe(conatctService);

                    //Added by sakthi to call back. when email/workbin is not loaded
                    if (_emailListener == null)
                        _emailListener = this;
                    var media = Datacontext.AvailableServerDic.FirstOrDefault(x => x.Value == Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGContactServer.ToString()).Key;

                    if (media != null && CheckCFGApplication.CheckCFGAppisExist(null, media.Split(',')))
                    {
                        ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).InitializeContact(_dataContext.UserName,
                            _dataContext.AgentEmployeeID, _dataContext.Place, _configContainer.TenantDbId, media, _configContainer.ConfServiceObject, _emailListener, _dataContext.ProxyID);
                        ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).SubscribeUpdateNotification(ContactUpdation);
                    }
                    else
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message", "Universal Contact Server not configured....");
                            _errorMessage.Add("IWS_Subject", "UCS not Connected.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                    }
                }
                bool isAgentLoginIxn = false;
                if (mediaSubscribed)
                {
                    _ixnHandler.AgentMediaStateSubscriber(interactionService);
                    var media = Datacontext.AvailableServerDic.FirstOrDefault(x => x.Value == Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGInteractionServer.ToString()).Key;
                    if (media != null)
                    {
                        Pointel.Interactions.Core.Common.OutputValues ixnConnectOutput = interactionService.ConnectInteractionServer(media, _dataContext.AgentID);
                        if (ixnConnectOutput.MessageCode == "200")
                        {
                            registerOutput = interactionService.RegisterClient(_dataContext.AgentID);
                            if (registerOutput != null)
                            {
                                if (registerOutput.MessageCode == "200")
                                {
                                    _dataContext.ProxyID = registerOutput.ProxyID;
                                    //if (_mediaListWithState.Count > 0)
                                    //{
                                    ixnLoginResponse = interactionService.AgentLogin(_dataContext.AgentID, _dataContext.Place,
                                        _dataContext.ProxyID, _configContainer.TenantDbId, _mediaListWithState);
                                    if (ixnLoginResponse.MessageCode == "200")
                                    {
                                        KeyValueCollection topicList = new KeyValueCollection();
                                        topicList.Add(_configContainer.TenantDbId.ToString() + "@" + _dataContext.Place, "1");
                                        subscribeOutput = interactionService.Subscribe(_dataContext.ProxyID, topicList);
                                        if (subscribeOutput.MessageCode == "200")
                                            _logger.Info(subscribeOutput.Message.ToString());
                                        topicList = null;
                                        if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Chat) && _dataContext.lstHoldingChannelSelection.ContainsKey("chat"))
                                        {
                                            if (_dataContext.InteractionProtocol != null)
                                                ((IChatPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Chat]).NotifyInteractionProtocol(_dataContext.InteractionProtocol);
                                            var chatMedia = Datacontext.AvailableServerDic.FirstOrDefault(x => x.Value == Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGChatServer.ToString()).Key;
                                            if (chatMedia != null)
                                                ((IChatPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Chat]).InitializeChat(_dataContext.UserName, _configContainer.ConfServiceObject, chatMedia, _dataContext.Place, _chatListener);
                                            else
                                            {
                                                _errorMessage.Clear();
                                                if (_errorMessage.Count == 0)
                                                {
                                                    _errorMessage.Add("IWS_Message", "Chat Server not configured....");
                                                    _errorMessage.Add("IWS_Subject", "Chat media not initialized.");
                                                    _errorMessage.Add("IWS_Sender", "System");
                                                    _errorMessage.Add("IWS_Priority", "4");
                                                    _errorMessage.Add("IWS_MessageType", "System");
                                                    _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                                    _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                                    GettingUserData(VoiceEvents.None, _errorMessage);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            _logger.Warn("Chat Plug-in missing");
                                        }
                                    }
                                    else
                                    {
                                        _errorMessage.Clear();
                                        if (_errorMessage.Count == 0)
                                        {
                                            _errorMessage.Add("IWS_Message", ixnLoginResponse.Message + " -  Interaction Media Error(" + ixnLoginResponse.ErrorCode + ")");
                                            _errorMessage.Add("IWS_Subject", ixnLoginResponse.Message);
                                            _errorMessage.Add("IWS_Sender", "System");
                                            _errorMessage.Add("IWS_Priority", "4");
                                            _errorMessage.Add("IWS_MessageType", "System");
                                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                            GettingUserData(VoiceEvents.None, _errorMessage);
                                        }
                                    }
                                    //}
                                }
                            }
                        }
                        else
                        {
                            if ((_configContainer.AllKeys.Contains("email.enable.plugin") &&
                                ((string)_configContainer.GetValue("email.enable.plugin")).ToLower().Equals("true")) && _dataContext.IsEmailPluginAdded && _dataContext.lstHoldingChannelSelection.ContainsKey("email"))
                            {
                                _errorMessage.Clear();
                                if (_errorMessage.Count == 0)
                                {
                                    _errorMessage.Add("IWS_Message", "Interaction Server could not be started....");
                                    _errorMessage.Add("IWS_Subject", "The channel email is out of service.");
                                    _errorMessage.Add("IWS_Sender", "System");
                                    _errorMessage.Add("IWS_Priority", "4");
                                    _errorMessage.Add("IWS_MessageType", "System");
                                    _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                    _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                    GettingUserData(VoiceEvents.None, _errorMessage);
                                    InteractionHandler.AgentEmailState = "Out Of Service";
                                    image = _imageDatacontext.ImgOutofServiceStatus;
                                    _dataContext.EmailStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                                    _ixnHandler.ChangeEmailStatus("Out Of Service");
                                }
                            }
                            if ((_configContainer.AllKeys.Contains("chat.enable.plugin") &&
                                ((string)_configContainer.GetValue("chat.enable.plugin")).ToLower().Equals("true")) && _dataContext.IsChatPluginAdded && _dataContext.lstHoldingChannelSelection.ContainsKey("chat"))
                            {
                                _errorMessage.Clear();
                                if (_errorMessage.Count == 0)
                                {
                                    _errorMessage.Add("IWS_Message", "Interaction Server could not be started....");
                                    _errorMessage.Add("IWS_Subject", "The channel chat is out of service.");
                                    _errorMessage.Add("IWS_Sender", "System");
                                    _errorMessage.Add("IWS_Priority", "4");
                                    _errorMessage.Add("IWS_MessageType", "System");
                                    _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                    _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                    GettingUserData(VoiceEvents.None, _errorMessage);
                                    InteractionHandler.AgentChatState = "Out Of Service";
                                    image = _imageDatacontext.ImgOutofServiceStatus;
                                    //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Out_of_Service.png",
                                    //                    UriKind.Relative));
                                    _dataContext.ChatStateImageSource = image;
                                    _ixnHandler.ChangeChatStatus("Out Of Service");
                                }
                            }
                            if ((_configContainer.AllKeys.Contains("outbound.enable.plugin") &&
                                ((string)_configContainer.GetValue("outbound.enable.plugin")).ToLower().Equals("true")) && _dataContext.IsOutboundPluginAdded)
                            {
                                _errorMessage.Clear();
                                if (_errorMessage.Count == 0)
                                {
                                    _errorMessage.Add("IWS_Message", "Interaction Server could not be started....");
                                    _errorMessage.Add("IWS_Subject", "The channel outbound preview is out of service.");
                                    _errorMessage.Add("IWS_Sender", "System");
                                    _errorMessage.Add("IWS_Priority", "4");
                                    _errorMessage.Add("IWS_MessageType", "System");
                                    _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                                    _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                                    GettingUserData(VoiceEvents.None, _errorMessage);
                                    InteractionHandler.AgentOutboundState = "Out Of Service";
                                    _ixnHandler.ChangeOutboundStatus("Out Of Service");
                                }
                            }
                            InteractionHandler._isIXNServerDown = true;
                        }
                    }
                    else
                    {
                        _errorMessage.Clear();
                        if (_errorMessage.Count == 0)
                        {
                            _errorMessage.Add("IWS_Message", "Interaction server not configured.");
                            _errorMessage.Add("IWS_Subject", "The interaction medias are not initialized.");
                            _errorMessage.Add("IWS_Sender", "System");
                            _errorMessage.Add("IWS_Priority", "4");
                            _errorMessage.Add("IWS_MessageType", "System");
                            _errorMessage.Add("IWS_Date", DateTime.Now.ToString());
                            _errorMessage.Add("IWS_Topic", _dataContext.UserName);
                            GettingUserData(VoiceEvents.None, _errorMessage);
                        }
                        InteractionHandler._isIXNServerDown = true;
                    }
                }
                else
                {
                    if (!Datacontext.AvailableServerDic.ContainsValue(Genesyslab.Platform.Configuration.Protocols.Types.CfgAppType.CFGInteractionServer.ToString()))
                    {
                        InteractionHandler._isIXNServerDown = true;
                        _logger.Warn("The interaction medias are not initialized.");
                    }
                }
                if (ixnLoginResponse != null)
                {
                    if (ixnLoginResponse.MessageCode == "200")
                        isAgentLoginIxn = true;
                    if (ixnLoginResponse.MessageCode == "2002")
                    {
                        //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Out_of_Service.png",
                        //                    UriKind.Relative));
                        _dataContext.EmailStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                        _dataContext.ChatStateImageSource = _imageDatacontext.ImgOutofServiceStatus;
                        InteractionHandler.AgentEmailState = "Out Of Service";
                        InteractionHandler.AgentChatState = "Out Of Service";
                        InteractionHandler.AgentOutboundState = "Out Of Service";
                        isAgentLoginIxn = false;
                    }
                    else if (ixnLoginResponse.MessageCode == "2001")
                    {
                        InteractionHandler.AgentEmailState = "Logout";
                        //image = GetBitmapImage(new Uri("/Agent.Interaction.Desktop;component/Images/Logout-state.png",
                        //                    UriKind.Relative));
                        _dataContext.EmailStateImageSource = _imageDatacontext.ImgLogoutStatus;
                        InteractionHandler.AgentChatState = "Logout";
                        _dataContext.ChatStateImageSource = _imageDatacontext.ImgLogoutStatus;
                        InteractionHandler.AgentOutboundState = "Out Of Service";
                        isAgentLoginIxn = false;
                    }
                }
                //else
                //{
                //    InteractionHandler.AgentEmailState = "Logout";
                //    InteractionHandler.AgentChatState = "Logout";
                //}

                if ((_configContainer.AllKeys.Contains("email.enable.plugin") &&
                          ((string)_configContainer.GetValue("email.enable.plugin")).ToLower().Equals("true")) && _dataContext.IsEmailPluginAdded && _dataContext.lstHoldingChannelSelection.ContainsKey("email"))
                    _ixnHandler.ChangeEmailStatus(InteractionHandler.AgentEmailState);

                if ((_configContainer.AllKeys.Contains("chat.enable.plugin") &&
                            ((string)_configContainer.GetValue("chat.enable.plugin")).ToLower().Equals("true")) && _dataContext.IsChatPluginAdded && _dataContext.lstHoldingChannelSelection.ContainsKey("chat"))
                    _ixnHandler.ChangeChatStatus(InteractionHandler.AgentChatState);

                if ((_configContainer.AllKeys.Contains("outbound.enable.plugin") &&
                            ((string)_configContainer.GetValue("outbound.enable.plugin")).ToLower().Equals("true")) && _dataContext.IsOutboundPluginAdded)
                    _ixnHandler.ChangeOutboundStatus(InteractionHandler.AgentOutboundState);

                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Email))
                {
                    //((IEmailPlugin)_plugins.PluginCollection[Pointel.Interactions.IPlugins.Plugins.Email]).NotifyContactProtocol(_dataContext.ContactServerProtocol);
                    //((IEmailPlugin)_plugins.PluginCollection[Pointel.Interactions.IPlugins.Plugins.Email]).InitializeEmail(_dataContext.UserName, _dataContext.Place, _dataContext.AgentEmplooyeeID, Datacontext.comObject, _dataContext.TenantDBID, _dataContext.ApplicationName, GetWINPostion(), _emailListener, _plugins.PluginCollection);
                    Dictionary<string, string> agentInfo = new Dictionary<string, string>();
                    agentInfo.Add("UserName", _dataContext.UserName);
                    agentInfo.Add("Place", _dataContext.Place);
                    agentInfo.Add("EmployeeID", _dataContext.AgentID);
                    agentInfo.Add("TenantDBID", _configContainer.TenantDbId.ToString());
                    agentInfo.Add("ProxyClientID", _dataContext.ProxyID.ToString());
                    agentInfo.Add("ApplicationName", _dataContext.ApplicationName.ToString());
                    Dispatcher.BeginInvoke((Action)(delegate
                    {
                        ((IEmailPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Email]).InitializeEmail(_configContainer.ConfServiceObject,
                            _emailListener, agentInfo);
                    }), DispatcherPriority.Render);
                }

                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                {
                    var pluginWorkbin = (IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin];
                    if (_dataContext.InteractionProtocol != null)

                        pluginWorkbin.NotifyInteractionProtocol(_dataContext.InteractionProtocol);
                    if (_dataContext.ContactServerProtocol != null)
                        pluginWorkbin.NotifyContactProtocol(_dataContext.ContactServerProtocol);
                    pluginWorkbin.InitializeWorkBin(_dataContext.Place, _dataContext.ProxyID, _emailListener);

                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Workbin))
                    {
                        ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).WorkbinFlag(InteractionHandler.AgentEmailState != "Logout");

                        if (isAgentLoginIxn)
                        {
                            ((IWorkbinPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Workbin]).NotifyAgentLogin(true);
                            NotifyAgentIXNProxyID();

                            RegisterWorkbinNotification();
                        }
                    }

                    //CR by sakthi - 10-09-2015
                    // Added to notify the Email State Information to contact Plugin.
                    if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Contact))
                    {
                        ((IContactPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.Contact]).NotifyEmailMediaState(InteractionHandler.AgentEmailState != "Logout");
                    }
                    Dispatcher.BeginInvoke((Action)(delegate
                    {
                        _objWorbin = pluginWorkbin.ShowWorkBinForm();
                        var win = (UserControl)_objWorbin;
                        dockWorkbin.Children.Clear();
                        dockWorkbin.Children.Add(win);
                    }), DispatcherPriority.Render);
                }
                if (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.OutboundPreview))
                {
                    if (_dataContext.InteractionProtocol != null)
                        ((IOutboundPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.OutboundPreview]).NotifyInteractionProtocol(_dataContext.InteractionProtocol);
                    ((IOutboundPlugin)_plugins.PluginCollections[Pointel.Interactions.IPlugins.Plugins.OutboundPreview]).InitializeOutbound(_dataContext.UserName,
                        _dataContext.ApplicationName, _configContainer.ConfServiceObject, _chatListener);
                }

                #endregion Load Interaction

                InitializeSalesforce();

                if (_dataContext.IsTeamCommunicatorPluginAdded && (_plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Email) ||
                                                                    _plugins.PluginCollections.ContainsKey(Pointel.Interactions.IPlugins.Plugins.Chat)))
                {
                    LoadTeamCommunicatorPlugin();
                }
                Pointel.Configuration.Manager.Helpers.ConfigValue subscribe = new Pointel.Configuration.Manager.Helpers.ConfigValue();
                subscribe.SubscribeConfigObjectNotification(configListenerObject);
                //NotifyVoiceMediaStatus(_voiceCurrentStatus);

                Left = ((SystemParameters.PrimaryScreenWidth - ActualWidth) / 2) - 10;
            }
            catch (Exception commonException)
            {
                _logger.Error("SoftphoneBar:Window_Loaded : Error" + commonException);
            }

            _dataContext.IsVoicePopCaseData = _configContainer.GetAsBoolean("voice.enable.popup-case-data", false) ? Visibility.Visible : Visibility.Collapsed;

            voiceContact.Visibility = Visibility.Collapsed;
            _logger.Debug("SoftphoneBar:Window_Loaded: Exit");
        }

        /// <summary>
        ///     Handles the MouseEnter event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.MouseEventArgs" /> instance containing the event data.</param>
        private void Window_MouseEnter(object sender, MouseEventArgs e)
        {
            try
            {
                _seconds = 0;
                winHideTimer.Stop();
                winHideTimer.IsEnabled = false;
            }
            catch (Exception ex)
            {
                _logger.Error("Error occurred as " + ex.Message);
            }
        }

        /// <summary>
        ///     Handles the StateChanged event of the Window1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.EventArgs" /> instance containing the event data.</param>
        private void Window_StateChanged(object sender, EventArgs e)
        {
            if (WindowState == System.Windows.WindowState.Minimized)
            {
                DeleteMenu(SystemMenu, CU_Minimize, MF_BYCOMMAND);
                DeleteMenu(SystemMenu, CU_Restore, MF_BYCOMMAND);
                InsertMenu(SystemMenu, 0, MF_BYPOSITION, CU_Restore, "Restore");

                if (_dataContext.StatProcessId != 0 && _dataContext.NotifyGadgetDisplayName != "Show Stat Gadget")
                {
                    try
                    {
                        StatisticHelperClient.SendRequest(StatRequest.Hide);
                        _isStatGadgetClosedByUser = false;
                        _dataContext.GadgetState = "Closed";
                        _dataContext.NotifyGadgetDisplayName = "Show Stat Gadget";
                    }
                    catch (Exception ex)
                    {
                        _logger.Error("Error occurred as " + ex.Message);
                    }
                }
            }
            if (WindowState == System.Windows.WindowState.Normal)
            {
                DeleteMenu(SystemMenu, CU_Restore, MF_BYCOMMAND);
                DeleteMenu(SystemMenu, CU_Minimize, MF_BYCOMMAND);
                InsertMenu(SystemMenu, 0, MF_BYPOSITION, CU_Minimize, "Minimize");

                if (_dataContext.StatProcessId != 0 && _dataContext.NotifyGadgetDisplayName == "Show Stat Gadget" && !_isStatGadgetClosedByUser)
                {
                    try
                    {
                        StatisticHelperClient.SendRequest(StatRequest.Show);
                        _dataContext.GadgetState = "Opened";
                        _dataContext.NotifyGadgetDisplayName = "Close Stat Gadget";
                    }
                    catch (Exception ex)
                    {
                        _logger.Error("Error occurred as " + ex.Message);
                    }
                }
            }
            if (WindowState == System.Windows.WindowState.Maximized)
            {
                WindowState = System.Windows.WindowState.Normal;
                DeleteMenu(SystemMenu, CU_Restore, MF_BYCOMMAND);
                DeleteMenu(SystemMenu, CU_Minimize, MF_BYCOMMAND);
                InsertMenu(SystemMenu, 0, MF_BYPOSITION, CU_Minimize, "Minimize");
            }
        }

        /// <summary>
        ///     Handles the Tick event of the timer control.
        /// </summary>
        /// <param name="source">The source of the event.</param>
        /// <param name="e">The <see cref="System.EventArgs" /> instance containing the event data.</param>
        private void winHideTimer_Tick(object source, EventArgs e)
        {
            _seconds++;
            if (_seconds == 4)
            {
                winHideTimer.Stop();
                btnMinimize.IsEnabled = true;
                winHideTimer.IsEnabled = false;
                _seconds = 0;
                Visibility = Visibility.Hidden;
            }
        }

        private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
        {
            if (msg != WM_SYSCOMMAND) return IntPtr.Zero;
            switch (wParam.ToInt32())
            {
                case CU_Minimize:
                    if (WindowState != System.Windows.WindowState.Minimized)
                        WindowState = System.Windows.WindowState.Minimized;
                    break;

                case CU_Restore:
                    if (WindowState != System.Windows.WindowState.Normal)
                        WindowState = System.Windows.WindowState.Normal;
                    break;

                case CU_Close: //close
                    btnExit_Click(null, null);
                    handled = true;
                    break;

                default:
                    break;
            }
            return IntPtr.Zero;
        }

        /// <summary>
        ///     Handles the KeyDown event of the wnd control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.KeyEventArgs" /> instance containing the event data.</param>
        private void wnd_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.System && e.SystemKey == Key.F4)
            {
                e.Handled = true;
            }
        }

        #endregion Methods

        #region Other

        //public void NotifyHIMMSButtonState(bool isVisible)
        //{
        //    //throw new NotImplementedException();
        //}
        //public bool IsAgentInCall()
        //{
        //    //throw new NotImplementedException();
        //    return true;
        //}
        //public void ShowMIDCollector(string mid, string midurl)
        //{
        //}
        //public void HideMIDCollector()
        //{
        //}
        //private void btnEpic_Click(object sender, RoutedEventArgs e)
        //{
        //    if (_configContainer.AllKeys.Contains("crm.third-party-tool") && _configContainer.GetAsBoolean("crm.third-party-tool"))
        //    {
        //        if (_dataContext.userAttachData != null && _dataContext.userAttachData.Count > 0 && _dataContext.userAttachData.ContainsKey("MemberType") && _dataContext.userAttachData["MemberType"] == "EPIC")
        //        {
        //            var file = Path.Combine(Path.Combine(System.Windows.Forms.Application.StartupPath, "Plugins"), "Pointel.Integration.Core.dll");
        //            if (File.Exists(file))
        //            {
        //                Assembly asm = Assembly.LoadFile(file);
        //                var thirdPartyInterfrace = (IDesktopMessenger)(from asmType in asm.GetTypes() where asmType.GetInterface("IDesktopMessenger") != null select (IDesktopMessenger)Activator.CreateInstance(asmType)).FirstOrDefault();
        //                if (thirdPartyInterfrace != null)
        //                {
        //                    if (_configContainer.AllKeys.Contains("epic.process-name") && !string.IsNullOrEmpty(_configContainer.GetAsString("epic.process-name")) && _dataContext.userAttachData.ContainsKey("EPICAcct"))
        //                        thirdPartyInterfrace.NotifyEpicPopup(_configContainer.GetAsString("epic.process-name"), _dataContext.userAttachData["EPICAcct"].ToString());
        //                }
        //            }
        //            else
        //                _logger.Warn("Integration.Core Plug-in dll not exist");
        //        }
        //    }
        //}
        //private void PostDataToEVAS()
        //{
        //    try
        //    {
        //        if (_evasLoggedIn)
        //        {
        //            if (_configContainer.AllKeys.Contains("evas.main-page.url"))
        //            {
        //                string url = _configContainer.GetAsString("evas.main-page.url");
        //                if (userData != null)
        //                {
        //                    var AppName = userData.ContainsKey("AppName") ? userData["AppName"] : "";
        //                    var m_MerchantID = userData.ContainsKey("MID") ? userData["MID"] : "";
        //                    var m_ANI = userData.ContainsKey("ANINumber") ? userData["ANINumber"] : "";
        //                    var m_Amount = userData.ContainsKey("Amount") ? userData["Amount"] : "";
        //                    var m_AuthDate = userData.ContainsKey("AuthDate") ? userData["AuthDate"] : "";
        //                    var m_AuthNumber = userData.ContainsKey("AuthNumber") ? userData["AuthNumber"] : "";
        //                    var m_Batch_CVV2 = userData.ContainsKey("Batch_CVV2") ? userData["Batch_CVV2"] : "";
        //                    var m_CallType = userData.ContainsKey("CallType") ? userData["CallType"] : "";
        //                    var m_CardNumber = userData.ContainsKey("CardNumber") ? userData["CardNumber"] : "";
        //                    var m_DBA = userData.ContainsKey("DBA") ? userData["DBA"] : "";
        //                    var m_DNIS = userData.ContainsKey("DNIS") ? userData["DNIS"] : "";
        //                    var m_ExpDate = userData.ContainsKey("ExpDate") ? userData["ExpDate"] : "";
        //                    var m_Language = userData.ContainsKey("Language") ? userData["Language"] : "";
        //                    var m_ReferralNumber = userData.ContainsKey("ReferralNumber") ? userData["ReferralNumber"] : "";
        //                    var m_CurrencyCode = userData.ContainsKey("CurrencyCode") ? userData["CurrencyCode"] : "";
        //                    var m_CurrencyCodeAlpha = userData.ContainsKey("CurrencyCodeAlpha") ? userData["CurrencyCodeAlpha"] : "";
        //                    var m_IVRMessage = userData.ContainsKey("LastErr") ? userData["LastErr"] : "";
        //                    var m_IssueNo = userData.ContainsKey("IssueNo") ? userData["IssueNo"] : "";
        //                    url = url + "?ANI=" + m_ANI + "&Amount=" + m_Amount + "&AppName=" + AppName + "&AuthDate=" + m_AuthDate + "&AuthorizationNumber=" + m_AuthNumber + "&Batch_CVV2=" + m_Batch_CVV2 + "&CallType=" + m_CallType + "&CardNumber=" + m_CardNumber + "&DBA=" + m_DBA + "&DNIS=" + m_DNIS + "&CardExpirationDate=" + m_ExpDate + "&Language=" + m_Language + "&MerchantID=" + m_MerchantID + "&ReferralNumber=" + m_ReferralNumber + "&CurrencyCode=" + m_CurrencyCode + "&CurrencyCodeAlpha=" + m_CurrencyCodeAlpha + "&IVRMessage=" + m_IVRMessage + "&Applet=jPhone" + "&IssueNo=" + m_IssueNo;
        //                }
        //                else
        //                    url = url + "?ANI=";
        //                Dispatcher.Invoke(new Action(() =>
        //                {
        //                    _evas.Navigate(url);
        //                }));
        //            }
        //        }
        //        else
        //        {
        //        }
        //    }
        //    catch (Exception _generalException)
        //    {
        //        _logger.Error("Error occurred as " + _generalException.Message);
        //    }
        //}
        //private void PostDataToNVAS()
        //{
        //    try
        //    {
        //        if (_nvasLoggedIn)
        //        {
        //            if (userData != null)
        //            {
        //                var m_NIS = userData.ContainsKey("DNIS") ? userData["DNIS"] : "''";
        //                var m_SkillSet = userData.ContainsKey("SkillSet") ? userData["SkillSet"] : "''";
        //                var m_BankNumber = userData.ContainsKey("BankNum") ? userData["BankNum"] : "''";
        //                var m_MerchantID = userData.ContainsKey("MID") ? userData["MID"] : "''";
        //                var m_CardNumber = userData.ContainsKey("CardNum") ? userData["CardNum"] : "''";
        //                var m_CardExpirationDate = userData.ContainsKey("CardExpDate") ? userData["CardExpDate"] : "''";
        //                var m_Amount = userData.ContainsKey("Amount") ? userData["Amount"] : "''";
        //                var m_AuthType = userData.ContainsKey("AuthType") ? userData["AuthType"] : "''";
        //                var m_IVRMessage = userData.ContainsKey("LastErrMsg") ? userData["LastErrMsg"] : "''";
        //                var m_DBA = userData.ContainsKey("DBA") ? userData["DBA"] : "''";
        //                var m_RefBankNumber = userData.ContainsKey("RefBankNum") ? userData["RefBankNum"] : "''";
        //                var m_AuthorizationNumber = userData.ContainsKey("AuthNum") ? userData["AuthNum"] : "''";
        //                var m_ANINumber = userData.ContainsKey("ANI") ? userData["ANI"] : "''";
        //                var m_ANI_Indicator = userData.ContainsKey("ANI_Indicator") ? userData["ANI_Indicator"] : "''";
        //                var m_CallState = "1";
        //                var m_Country = userData.ContainsKey("COUNTRY") ? userData["COUNTRY"] : "''";
        //                var m_Language = userData.ContainsKey("Language") ? userData["Language"] : "''";
        //                var m_ATC = userData.ContainsKey("ELV_VA_Airline") ? userData["ELV_VA_Airline"] : "''";
        //                HTMLDocument doc = _nvas.Document as HTMLDocument;
        //                if (doc != null)
        //                {
        //                    //MessageBox.Show(doc.getElementById("Contents").getAttribute("src"));
        //                    //<SCRIPT language="JavaScript" src="javascripts/NvasScript.js"> </SCRIPT>
        //                    HTMLDocument iframe = doc.getElementById("Contents") as HTMLDocument;
        //                    var scriptErrorSuppressed = (IHTMLScriptElement)iframe.createElement("SCRIPT");
        //                    scriptErrorSuppressed.type = "text/javascript";
        //                    string parameter = m_NIS + "," + m_SkillSet + "," + m_BankNumber + "," + m_MerchantID + "," + m_CardNumber + "," + m_CardExpirationDate + "," + m_Amount + "," + m_AuthType + "," + m_IVRMessage + "," + m_DBA + "," + m_RefBankNumber + "," + m_AuthorizationNumber + "," + m_ANINumber + "," + m_ANI_Indicator + "," + m_CallState + "," + m_Country + "," + m_Language + "," + m_ATC;
        //                    scriptErrorSuppressed.text = "!function(t,e){function n(){if(!a){a=!0;for(var t=0;t<d.length;t++)d[t].fn.call(window,d[t].ctx);d=[]}}function o(){'complete'===document.readyState&&n()}t=t||'docReady',e=e||window;var d=[],a=!1,c=!1;e[t]=function(t,e){return a?void setTimeout(function(){t(e)},1):(d.push({fn:t,ctx:e}),void('complete'===document.readyState?setTimeout(n,1):c||(document.addEventListener?(document.addEventListener('DOMContentLoaded',n,!1),window.addEventListener('load',n,!1)):(document.attachEvent('onreadystatechange',o),window.attachEvent('onload',n)),c=!0)))}}('docReady',window);";
        //                    scriptErrorSuppressed.text += "docReady(function (){toOtherFrame(" + parameter + "); });  function noError() {return true;} window.onerror = noError;";
        //                    IHTMLElementCollection nodes = iframe.getElementsByTagName("head");
        //                    foreach (IHTMLElement elem in nodes)
        //                    {
        //                        var head = (HTMLHeadElement)elem;
        //                        head.appendChild((IHTMLDOMNode)scriptErrorSuppressed);
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //        else
        //        {
        //            //Need to Handle Login
        //        }
        //    }
        //    catch (Exception _generalException)
        //    {
        //        _logger.Error("Error occurred as " + _generalException.Message);
        //    }
        //}
        //end
        //private WebBrowser _evas;
        //private WebBrowser _nvas;

        #endregion Other
    }

    public static class WindowExtensions
    {
        #region Fields

        private const UInt32 FLASHW_ALL = 3; //Flash both the window caption and taskbar button.
        private const UInt32 FLASHW_CAPTION = 1; //Flash the window caption.
        private const UInt32 FLASHW_STOP = 0; //Stop flashing. The system restores the window to its original state.
        private const UInt32 FLASHW_TIMER = 4; //Flash continuously, until the FLASHW_STOP flag is set.
        private const UInt32 FLASHW_TIMERNOFG = 12; //Flash continuously until the window comes to the foreground.
        private const UInt32 FLASHW_TRAY = 2; //Flash the taskbar button.

        #endregion Fields

        #region Methods

        /// <summary>
        /// Flashes the window.
        /// </summary>
        /// <param name="win">The win.</param>
        /// <param name="count">The count.</param>
        public static void FlashWindow(this Window win, UInt32 count = UInt32.MaxValue)
        {
            //Don't flash if the window is active
            //if (win.IsActive) return;

            var h = new WindowInteropHelper(win);

            var info = new FLASHWINFO
            {
                hwnd = h.Handle,
                dwFlags = FLASHW_ALL | FLASHW_TIMER,
                uCount = count,
                dwTimeout = 500
            };

            info.cbSize = Convert.ToUInt32(Marshal.SizeOf(info));
            FlashWindowEx(ref info);
        }

        /// <summary>
        /// Stops the flashing window.
        /// </summary>
        /// <param name="win">The win.</param>
        /// <param name="count">The count.</param>
        public static void StopFlashingWindow(this Window win, UInt32 count = UInt32.MaxValue)
        {
            var h = new WindowInteropHelper(win);

            var info = new FLASHWINFO();
            info.hwnd = h.Handle;
            info.cbSize = Convert.ToUInt32(Marshal.SizeOf(info));
            info.dwFlags = FLASHW_STOP;
            info.uCount = count;
            info.dwTimeout = 500;

            FlashWindowEx(ref info);
        }

        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool FlashWindowEx(ref FLASHWINFO pwfi);

        #endregion Methods

        #region Nested Types

        [StructLayout(LayoutKind.Sequential)]
        private struct FLASHWINFO
        {
            public UInt32 cbSize; //The size of the structure in bytes.
            public IntPtr hwnd; //A Handle to the Window to be Flashed. The window can be either opened or minimized.
            public UInt32 dwFlags; //The Flash Status.
            public UInt32 uCount; // number of times to flash the window
            public UInt32 dwTimeout;

            #region Other

            //The rate at which the Window is to be flashed, in milliseconds. If Zero, the function uses the default cursor blink rate.

            #endregion Other
        }

        #endregion Nested Types
    }
}