<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:my="http://schemas.microsoft.com/wpf/2008/toolkit"
					xmlns:auto="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Input.Toolkit"
					xmlns:local="clr-namespace:Agent.Interaction.Desktop.CustomControls"
					xmlns:win="clr-namespace:Agent.Interaction.Desktop"                    
					xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
					xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
		xmlns:Converter="clr-namespace:Agent.Interaction.Desktop.Converters"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<!--xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
	xmlns:s="clr-namespace:System;assembly=mscorlib"-->

	<!-- Brushes definition start -->

	<!--<Converter:UnsavedData x:Key="UsavedDataConverter"/>-->
	<LinearGradientBrush x:Key="DisabledBorderBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="Orange" Offset="0" />
				<GradientStop Color="#C0C0C1" Offset="0.25" />
				<GradientStop Color="#C0C0C0" Offset="0.75" />
				<GradientStop Color="Orange"  Offset="1" />
				<!--#808080-->
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="TabItemBrush" StartPoint="1,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="Orange" Offset="0" />
				<GradientStop Color="#ffc14e" Offset="0.25" />
				<GradientStop Color="#ffcf76" Offset="0.5" />
				<GradientStop Color="#ffb327" Offset="0.75" />
				<GradientStop Color="Orange"  Offset="1" />
				<!--#808080-->
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="GridBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="1" />
				<GradientStop Color="Gray" Offset="0.5" />
				<GradientStop Color="Gray" Offset="0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="GradiantBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="0" />
				<!--<GradientStop Color="Gray" Offset="0.5" />-->
				<GradientStop Color="Black" Offset="1" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="GradiantBrush1" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="0" />
				<GradientStop Color="Gray" Offset="0.9" />
				<GradientStop Color="Black" Offset="-1" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="OpticBrush" StartPoint="1,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="Black" Offset="1.0" />
				<GradientStop Color="#AAA" Offset="0.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="GradiantBrush2" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="0" />
				<GradientStop Color="#B6B6B6" Offset="1" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="0.0" />
				<GradientStop Color="#AAA" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#BBB" Offset="0.0" />
				<GradientStop Color="#EEE" Offset="0.1" />
				<GradientStop Color="#EEE" Offset="0.9" />
				<GradientStop Color="#FFF" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="0.0" />
				<GradientStop Color="#CCC" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="NormalBrush1" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="0.0" />
				<GradientStop Color="Black" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="0.0" />
				<GradientStop Color="#CCC" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="0.0" />
				<GradientStop Color="#EEE" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="0.0" />
				<GradientStop Color="#EEE" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#CCC" Offset="0.0" />
				<GradientStop Color="#444" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#CCC" Offset="0.0" />
				<GradientStop Color="#444" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#777" Offset="0.0" />
				<GradientStop Color="#000" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#444" Offset="0.0" />
				<GradientStop Color="#888" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="Tile" StartPoint="1,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="White" Offset="0" />
				<!--<GradientStop Color="AliceBlue" Offset="0.06" />
					<GradientStop Color="AliceBlue"  Offset="0.07" />
					<GradientStop Color="AliceBlue" Offset="0.08" />
					<GradientStop Color="AliceBlue" Offset="0.09" />
					<GradientStop Color="AliceBlue" Offset="0.10" />
					<GradientStop Color="BlanchedAlmond" Offset="0.15" />
					<GradientStop Color="GreenYellow" Offset="0.25" />
					<GradientStop Color="BlanchedAlmond" Offset="0.35" />-->
				<GradientStop Color="AliceBlue" Offset="0.55" />
				<GradientStop Color="#808080"  Offset="1" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="GlassBrush" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Offset="0" Color="#66ffffff" />
		<GradientStop Offset="0" Color="#36FFFFFF" />
		<GradientStop Offset="1" Color="#B5EBE7E7" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="CBorderBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#707f8b" Offset="1" />
				<GradientStop Color="#c6cdd1"  Offset="0.1" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="CallBG" Color="#358535" />

	<SolidColorBrush x:Key="ClearBG" Color="#b28e00" />

	<SolidColorBrush x:Key="NormalBG" Color="#0061ac" />

	<SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

	<SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

	<SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

	<SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

	<SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

	<SolidColorBrush x:Key="GlyphBrush" Color="#444" />

	<SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />

	<SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

	<SolidColorBrush x:Key="DisabledBorderBrush1" Color="#AAA" />

	<SolidColorBrush x:Key="HighlightedBrush" Color="#CEE7F7" />

	<!--<LinearGradientBrush x:Key="TooltipBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="0.0" />
				<GradientStop Color="#EEE" Offset="1.0" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="TooltipBorderBrush" Color="#888" />
	<SolidColorBrush x:Key="TooltipTitleSeparatorBrush" Color="#F00" />
	<Style TargetType="{x:Type ToolTip}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="HasDropShadow" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToolTip">
					<mwt:SystemDropShadowChrome Color="#00FFFFFF" CornerRadius="2,2,2,2" Name="Shdw" SnapsToDevicePixels="True">
						<Border Name="Border"
									  BorderThickness="1"
									  Padding="{TemplateBinding Control.Padding}"
									  CornerRadius="4"
									  BorderBrush="{StaticResource TooltipBorderBrush}"
									  Background="{StaticResource TooltipBackgroundBrush}"
									  Width="{TemplateBinding Width}"
									  Height="{TemplateBinding Height}"
>
							<StackPanel>
								<TextBlock Grid.Row="0" VerticalAlignment="Center" FontWeight="Bold" Margin="5"
									  Text="{Binding Path=Title, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
								<Line Stretch="Fill" X1="0" X2="1" Y1="0" Y2="0" Stroke="{StaticResource TooltipTitleSeparatorBrush}" />
								<TextBlock Text="{TemplateBinding Content}" MaxWidth="250" TextWrapping="Wrap" Margin="5" />
							</StackPanel>
						</Border>
					</mwt:SystemDropShadowChrome>
					<ControlTemplate.Triggers>
						<Trigger Property="ToolTipService.HasDropShadow">
							<Setter Property="FrameworkElement.Margin" TargetName="Shdw">
								<Setter.Value>
									<Thickness>0,0,5,5</Thickness>
								</Setter.Value>
							</Setter>
							<Setter Property="mwt:SystemDropShadowChrome.Color" TargetName="Shdw">
								<Setter.Value>
									<Color>#71000000</Color>
								</Setter.Value>
							</Setter>
							<Trigger.Value>
								<s:Boolean>True</s:Boolean>
							</Trigger.Value>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

	<Style TargetType="{x:Type local:TimerLabel}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:TimerLabel}">
					<TextBlock  Text="{TemplateBinding Text}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Width="{TemplateBinding Width}"
						   Height="{TemplateBinding Height}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}"
						   Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" FontFamily="{TemplateBinding FontFamily}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Sakthi Cahnges Start-->
	<ControlTemplate x:Key="HorizontalScrollBarTemplate" TargetType="{x:Type ScrollBar}">
		<Grid x:Name="Bg" SnapsToDevicePixels="True" Background="Transparent">
			<Grid.ColumnDefinitions>
				<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
				<ColumnDefinition Width="1E-05*"/>
				<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
			</Grid.ColumnDefinitions>

			<RepeatButton IsEnabled="{TemplateBinding IsMouseOver}" Command="ScrollBar.PageLeftCommand" >
				<RepeatButton.Style>
					<Style TargetType="{x:Type RepeatButton}">
						<Setter Property="OverridesDefaultStyle" Value="True"/>
						<Setter Property="Focusable" Value="False"/>
						<Setter Property="IsTabStop" Value="False"/>

						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type RepeatButton}">
									<Border  Background="{x:Null}" Height="18" Width="18" >
										<Path Data=" M 8 15 L 8 3 L 2 9 Z" Fill="#007edf" />
									</Border>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</RepeatButton.Style>
			</RepeatButton>
			<RepeatButton IsEnabled="{TemplateBinding IsMouseOver}" Command="ScrollBar.PageRightCommand" Grid.Column="2" >
				<RepeatButton.Style>
					<Style TargetType="{x:Type RepeatButton}">
						<Setter Property="OverridesDefaultStyle" Value="True"/>
						<Setter Property="Focusable" Value="False"/>
						<Setter Property="IsTabStop" Value="False"/>
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type RepeatButton}">
									<Border Background="{x:Null}" Height="18" Width="18" >
										<Path Data=" M 9 15 L 9 3 L 15 9 Z" Fill="#007edf" />
									</Border>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</RepeatButton.Style>
			</RepeatButton>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" TargetName="Bg" Value="#FFF4F4F4"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ScrollViewerTemplate" TargetType="{x:Type ScrollViewer}">
		<Grid x:Name="Grid" Background="Transparent">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="Auto"/>
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="*"/>
				<RowDefinition Height="Auto"/>
			</Grid.RowDefinitions>
			<Rectangle  x:Name="Corner" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
			<ScrollBar x:Name="PART_HorizontalScrollBar" Cursor="Arrow" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="0" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" AutomationProperties.AutomationId="HorizontalScrollBar" Template="{DynamicResource HorizontalScrollBarTemplate}"/>
			<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="15,2,15,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Grid.Column="0" Grid.Row="0" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False"/>
		</Grid>
	</ControlTemplate>
	<ControlTemplate x:Key="ScrollableTabControlTemplate" TargetType="{x:Type TabControl}">
		<DockPanel>
			<Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
				<Grid.ColumnDefinitions>
					<ColumnDefinition x:Name="ColumnDefinition0"/>
					<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
					<RowDefinition x:Name="RowDefinition1" Height="*"/>
				</Grid.RowDefinitions>
				<ScrollViewer  VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Auto" Template="{DynamicResource ScrollViewerTemplate}">
					<Border  BorderBrush="#D6D7D6"
			 BorderThickness="0,0,0,1">
						<TabPanel x:Name="HeaderPanel" Panel.ZIndex="1000" Margin="0" IsItemsHost="True" Grid.Column="0" Grid.Row="0" Background="White" KeyboardNavigation.TabIndex="1"/>
					</Border>

				</ScrollViewer>
				<Border x:Name="ContentPanel"
			 Grid.Row="1" Panel.ZIndex="0"
			 BorderBrush="#D6D7D6"
			 BorderThickness="1,0,1,1">

					<ContentPresenter ContentSource="SelectedContent" />
				</Border>

				<!--<Border
			 Grid.Row="1"
			 BorderBrush="#D6D7D6"
			 BorderThickness="1" x:Name="ContentPanel" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
				<ContentPresenter x:Name="PART_SelectedContentHost" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding SelectedContent}" ContentSource="SelectedContent" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentTemplate="{TemplateBinding SelectedContentTemplate}"/>
			</Border>-->

			</Grid>
			<!--<ControlTemplate.Triggers>
			<Trigger Property="TabStripPlacement" Value="Bottom">
				<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
				<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
				<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
				<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
				<Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
			</Trigger>
			<Trigger Property="TabStripPlacement" Value="Left">
				<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
				<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
				<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
				<Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
				<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
				<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
				<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
				<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
				<Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
			</Trigger>
			<Trigger Property="TabStripPlacement" Value="Right">
				<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
				<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
				<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
				<Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
				<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
				<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
				<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
				<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
				<Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
			</Trigger>
		   
			
		</ControlTemplate.Triggers>-->

		</DockPanel>

	</ControlTemplate>

	<!--Sakthi Changes End-->

	<!--Edited for unsaved textbox-->
	<!--<ControlTemplate x:Key="controltempTextbox" TargetType="{x:Type TextBoxBase}">
		<Border
				Padding="2"
				Background="White"
				BorderBrush="#ADAAAD"
				BorderThickness="1" TextBlock.FontFamily="Calibri">
			<Grid>
				<Image Name="image" Source="/Agent.Interaction.Desktop;component/Images/UnSaved.png" Visibility="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Top" Width="12" Height="10"/>
				<ScrollViewer Margin="0" x:Name="PART_ContentHost" />
			</Grid>
		</Border>

		<ControlTemplate.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Value="True">
						<Condition.Binding>
							<MultiBinding Converter="{StaticResource UsavedDataConverter}">
								<Binding Path="Text" RelativeSource="{RelativeSource Self}"/>
								<Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
							</MultiBinding>
						</Condition.Binding>
					</Condition>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="image" Property="Panel.ZIndex" Value="0" />
				<Setter TargetName="image" Property="Visibility" Value="Collapsed" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Value="False">
						<Condition.Binding>
							<MultiBinding Converter="{StaticResource UsavedDataConverter}">
								<Binding Path="Text" RelativeSource="{RelativeSource Self}"/>
								<Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
							</MultiBinding>
						</Condition.Binding>
					</Condition>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="image" Property="Panel.ZIndex" Value="10000" />
				<Setter TargetName="image" Property="Visibility" Value="Visible" />
			</MultiDataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>-->


	<!--<Condition Value="True">
						<Condition.Binding>
							<MultiBinding Converter="{StaticResource UsavedDataConverter}">
								<Binding Path="Text" RelativeSource="{RelativeSource Self}"/>
								<Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
							</MultiBinding>
						</Condition.Binding>
					</Condition>-->

	<!--<Condition Value="False">
						<Condition.Binding>
							<MultiBinding Converter="{StaticResource UsavedDataConverter}">
								<Binding Path="Text" RelativeSource="{RelativeSource Self}"/>
								<Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
							</MultiBinding>
						</Condition.Binding>
					</Condition>-->



	<ControlTemplate x:Key="controltempTextbox" TargetType="{x:Type TextBoxBase}">
		<Border
				Padding="2"
				Background="White"
				BorderBrush="#ADAAAD"
				BorderThickness="1" TextBlock.FontFamily="Calibri">
			<ScrollViewer Margin="0" x:Name="PART_ContentHost" />
		</Border>
	</ControlTemplate>


	<ControlTemplate x:Key="controltempTextbox1" TargetType="{x:Type TextBoxBase}">
		<Border
				Padding="2"
				Background="White"
				BorderBrush="#ADAAAD"
				BorderThickness="1" TextBlock.FontFamily="Calibri">
			<ScrollViewer Margin="0" x:Name="PART_ContentHost" />
		</Border>
	</ControlTemplate>

	<ControlTemplate x:Key="controltempPasswordbox" TargetType="{x:Type PasswordBox}">
		<Border
				Padding="2"
				Background="White"
				BorderBrush="#888588"
				BorderThickness="1" TextBlock.FontFamily="Calibri">
			<ScrollViewer Margin="0" x:Name="PART_ContentHost" />
		</Border>
	</ControlTemplate>

	<!--Expander style strats-->
	<ControlTemplate x:Key="AnimatedExpanderButtonTemp"
						 TargetType="{x:Type ToggleButton}">
		<Border x:Name="ExpanderButtonBorder"
					Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="{TemplateBinding BorderThickness}"
					Padding="{TemplateBinding Padding}">
			<Grid VerticalAlignment="Top">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="*" />
				</Grid.ColumnDefinitions>
				<Rectangle Fill="Transparent"
							   Grid.ColumnSpan="2" />
				<Ellipse Name="Circle"
							 Grid.Column="0"
							 Stroke="DarkGray"
							 Width="20"
							 Height="20"
							 HorizontalAlignment="Center"
							 VerticalAlignment="Center" />
				<Path x:Name="Arrow"
						  Grid.Column="0"
						  Data="M 1,1.5 L 4.5,5 8,1.5"
						  Stroke="#FF666666"
						  StrokeThickness="2"
						  HorizontalAlignment="Center"
						  VerticalAlignment="Center"
						  RenderTransformOrigin="0.5,0.5">
					<Path.RenderTransform>
						<RotateTransform Angle="0" />
					</Path.RenderTransform>
				</Path>
				<ContentPresenter x:Name="HeaderContent"
									  Grid.Column="1"
									  Margin="4,0,0,0" VerticalAlignment="Center"
									  ContentSource="Content" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<!-- Animate arrow when toggled-->
			<Trigger Property="IsChecked"
						 Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Arrow"
												 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
												 To="180"
												 Duration="0:0:0.4" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Arrow"
												 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
												 To="0"
												 Duration="0:0:0.4" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.ExitActions>
			</Trigger>

			<!-- MouseOver, Pressed behaviours-->
			<Trigger Property="IsMouseOver"
						 Value="true">
				<Setter Property="Stroke"
							Value="#808080"
							TargetName="Circle" />
			</Trigger>
			<Trigger Property="IsPressed"
						 Value="true">
				<Setter Property="Fill"
							Value="#808080"
							TargetName="Circle" />
				<Setter Property="Stroke"
							Value="White"
							TargetName="Arrow" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Stretch Out Content Expander's Template,
		Uses: AnimatedExpanderButtonTemp from above-->
	<ControlTemplate x:Key="StretchyExpanderTemp"
						 TargetType="{x:Type Expander}">
		<DockPanel>
			<ToggleButton x:Name="ExpanderButton" Height="35"
							  DockPanel.Dock="Top" BorderBrush="#808080" BorderThickness="0,0,0,1"
							  Template="{StaticResource AnimatedExpanderButtonTemp}"
							  Content="{TemplateBinding Header}"
							  IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
							  OverridesDefaultStyle="True"
							  Padding="1.5,0">
			</ToggleButton>
			<ContentPresenter x:Name="ExpanderContent"
								  ContentSource="Content"
								  DockPanel.Dock="Bottom">
				<ContentPresenter.LayoutTransform>
					<ScaleTransform ScaleY="0" />
				</ContentPresenter.LayoutTransform>
			</ContentPresenter>
		</DockPanel>
		<ControlTemplate.Triggers>
			<Trigger Property="IsExpanded"
						 Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="ExpanderContent"
												 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
												 To="1"
												 Duration="0:0:0.4" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="ExpanderContent"
												 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
												 To="0"
												 Duration="0:0:0.4" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Simple Expander Button's Template-->
	<ControlTemplate x:Key="SimpleExpanderButtonTemp"
						 TargetType="{x:Type ToggleButton}">
		<Border x:Name="ExpanderButtonBorder"
					Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="{TemplateBinding BorderThickness}"
					Padding="{TemplateBinding Padding}">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="*" />
				</Grid.ColumnDefinitions>
				<Rectangle Fill="Transparent"
							   Grid.ColumnSpan="2" />
				<Ellipse Name="Circle"
							 Grid.Column="0"
							 Stroke="White"
							 Width="20"
							 Height="20"
							 HorizontalAlignment="Center"
							 VerticalAlignment="Center" />
				<Path x:Name="Arrow"
						  Grid.Column="0"
						  Data="M 1,1.5 L 4.5,5 8,1.5"
						  Stroke="White"
						  StrokeThickness="2"
						  HorizontalAlignment="Center"
						  VerticalAlignment="Center"
						  RenderTransformOrigin="0.5,0.5">
					<Path.RenderTransform>
						<RotateTransform Angle="0" />
					</Path.RenderTransform>
				</Path>
				<ContentPresenter x:Name="HeaderContent"
									  Grid.Column="1"
									  Margin="4,0,0,0"
									  ContentSource="Content" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<!--Change the sign to minus when toggled-->
			<Trigger Property="IsChecked"
						 Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Arrow"
												 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
												 To="180"
												 Duration="0:0:0.4" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Arrow"
												 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
												 To="0"
												 Duration="0:0:0.4" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Simple Expander Template-->
	<ControlTemplate x:Key="SimpleExpanderTemp"
						 TargetType="{x:Type Expander}">
		<DockPanel>
			<ToggleButton x:Name="ExpanderButton"
							  DockPanel.Dock="Top"
							  Template="{StaticResource SimpleExpanderButtonTemp}"
							  Content="{TemplateBinding Header}"
							  IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
							  OverridesDefaultStyle="True"
							  Padding="1.5,0">
			</ToggleButton>
			<ContentPresenter x:Name="ExpanderContent"
								  Grid.Row="1"
								  Visibility="Collapsed"
								  DockPanel.Dock="Bottom" />
		</DockPanel>
		<ControlTemplate.Triggers>
			<Trigger Property="IsExpanded"
						 Value="True">
				<Setter TargetName="ExpanderContent"
							Property="Visibility"
							Value="Visible" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--Expander style stops-->

	<!-- Combobox styling start -->
	<ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="20" />
			</Grid.ColumnDefinitions>
			<Border
	  x:Name="Border"
	  Grid.ColumnSpan="2"
	  Background="White"
	  BorderBrush="#ADAAAD"
	  BorderThickness="1" />
			<Border
	  Grid.Column="0"
	  Margin="1"
	  Background="Transparent"
	  BorderThickness="0,0,0,0" />
			<Path
	  x:Name="Arrow"
	  Grid.Column="1"
	  Fill="#737573"
	  HorizontalAlignment="Center"
	  VerticalAlignment="Center"
	  Data="M 0 0 L 4 4 L 8 0 Z" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="ToggleButton.IsMouseOver" Value="true">
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="true">
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
		<Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" BorderThickness="0" BorderBrush="Transparent" />
	</ControlTemplate>

	<Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border
		  Name="Border"
		  Margin="1"
		  Background="White"
		  BorderBrush="#ADAAAD"
		  BorderThickness="1">
						<Path
			HorizontalAlignment="Center"
			VerticalAlignment="Center"
			Fill="#737573"
			Data="{Binding Path=Content,RelativeSource={RelativeSource TemplatedParent}}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="BorderBrush" Value="Black"></Setter>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="BorderBrush" Value="Black"></Setter>
							<Setter TargetName="Border" Property="Background" Value="#F7F3F7" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border Background="#F7F3F7" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Name="Border"
		  Background="White"
		  BorderBrush="#ADAAAD"
		  BorderThickness="1" />
					<ControlTemplate.Triggers>
						<Trigger Property="Thumb.IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="#F7F3F7" />
						</Trigger>
						<Trigger Property="Thumb.IsDragging" Value="true">
							<Setter TargetName="Border" Property="Background" Value="#F7F3F7" />
							<Setter TargetName="Border" Property="BorderBrush" Value="Black" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- styled to change vertical and horizontal scrollbars start-->
	<ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition  MaxHeight="18" />
				<RowDefinition Height="0.00001*" />
				<RowDefinition MaxHeight="18" />
			</Grid.RowDefinitions>
			<Border
	  Grid.RowSpan="3"
	  Background="#F0F0F0" />
			<RepeatButton
	  Grid.Row="0"
	  Style="{StaticResource ScrollBarLineButton}"
	  Height="18"
	  Command="ScrollBar.LineUpCommand"
	  Content="M 0 4 L 8 4 L 4 0 Z" />
			<Track
	  Name="PART_Track"
	  Grid.Row="1"
	  IsDirectionReversed="true">
				<Track.DecreaseRepeatButton>
					<RepeatButton
		  Style="{StaticResource ScrollBarPageButton}"
		  Command="ScrollBar.PageUpCommand" />
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb
		  Style="{StaticResource ScrollBarThumb}"
		  Margin="1,0,1,0"
		  Background="{StaticResource HorizontalNormalBrush}"
		  BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton
		  Style="{StaticResource ScrollBarPageButton}"
		  Command="ScrollBar.PageDownCommand" />
				</Track.IncreaseRepeatButton>
			</Track>
			<RepeatButton
	  Grid.Row="3"
	  Style="{StaticResource ScrollBarLineButton}"
	  Height="18"
	  Command="ScrollBar.LineDownCommand"
	  Content="M 0 0 L 4 4 L 8 0 Z" />
		</Grid>
	</ControlTemplate>

	<ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition MaxWidth="18" />
				<ColumnDefinition Width="0.00001*" />
				<ColumnDefinition MaxWidth="18" />
			</Grid.ColumnDefinitions>
			<Border
	  Grid.ColumnSpan="3"
	  Background="#F0F0F0" />
			<RepeatButton
	  Grid.Column="0"
	  Style="{StaticResource ScrollBarLineButton}"
	  Width="18"
	  Command="ScrollBar.LineLeftCommand"
	  Content="M 4 0 L 4 8 L 0 4 Z" />
			<Track
	  Name="PART_Track"
	  Grid.Column="1"
	  IsDirectionReversed="False">
				<Track.DecreaseRepeatButton>
					<RepeatButton
		  Style="{StaticResource ScrollBarPageButton}"
		  Command="ScrollBar.PageLeftCommand" />
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb
		  Style="{StaticResource ScrollBarThumb}"
		  Margin="0,1,0,1"
		  Background="{StaticResource NormalBrush}"
		  BorderBrush="{StaticResource NormalBorderBrush}" />
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton
		  Style="{StaticResource ScrollBarPageButton}"
		  Command="ScrollBar.PageRightCommand" />
				</Track.IncreaseRepeatButton>
			</Track>
			<RepeatButton
	  Grid.Column="3"
	  Style="{StaticResource ScrollBarLineButton}"
	  Width="18"
	  Command="ScrollBar.LineRightCommand"
	  Content="M 0 0 L 4 4 L 0 8 Z" />
		</Grid>
	</ControlTemplate>
	<!-- styled to change vertical and horizontal scrollbars end-->

	<Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Foreground" Value="Black" /> <!--#737573-->
        <Setter Property="Height" Value="20" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border x:Name="Bd"
					SnapsToDevicePixels="true"
					Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="{TemplateBinding BorderThickness}"
					Padding="{TemplateBinding Padding}">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsHighlighted" Value="true">
							<Setter Property="Background" Value="{StaticResource HighlightedBrush}" />
							<Setter Property="FontSize" Value="12" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="true">
							<Setter Property="FontSize" Value="12" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style  TargetType="ComboBox">
		<!--x:Key="{x:Type ComboBox}"-->
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBox">
					<Grid>
						<ToggleButton
			Name="ToggleButton"
			Template="{StaticResource ComboBoxToggleButton}"
			Focusable="false"
			IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
			ClickMode="Press">
						</ToggleButton>
						<ContentPresenter
			Name="ContentSite"
			IsHitTestVisible="False"
			Content="{TemplateBinding SelectionBoxItem}"
			ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
			ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
			Margin="3,3,23,3"
			VerticalAlignment="Center"
			HorizontalAlignment="Left" />
						<TextBox UndoLimit="10" x:Name="PART_EditableTextBox"
			Style="{x:Null}" FlowDirection="LeftToRight" Width="210"
			HorizontalAlignment="Left" BorderBrush="Transparent" BorderThickness="0"
			VerticalAlignment="Top" Height="25" HorizontalContentAlignment="Left" VerticalContentAlignment="Top"
			Margin="3,3,23,3"
			Focusable="True"
			Background="Transparent"
			Visibility="Hidden"
			IsReadOnly="{TemplateBinding IsReadOnly}" />
						<Popup
			Name="Popup"
			Placement="Bottom"
			IsOpen="{TemplateBinding IsDropDownOpen}"
			AllowsTransparency="True"
			Focusable="False"
			PopupAnimation="Slide">
							<Grid
			  Name="DropDown"
			  SnapsToDevicePixels="True"
			  MinWidth="{TemplateBinding ActualWidth}"
			  MaxHeight="{TemplateBinding MaxDropDownHeight}" Height="Auto">
								<Border
				x:Name="DropDownBorder"
				Background="{StaticResource WindowBackgroundBrush}"
				BorderThickness="1,0,1,1"
				BorderBrush="#ADAAAD" />
								<ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
									<ScrollViewer.Resources>
										<Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
											<Setter Property="SnapsToDevicePixels" Value="True" />
											<Setter Property="OverridesDefaultStyle" Value="true" />
											<Style.Triggers>
												<Trigger Property="Orientation" Value="Horizontal">
													<Setter Property="Width" Value="Auto" />
													<Setter Property="Height" Value="18" />
													<Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
												</Trigger>
												<Trigger Property="Orientation" Value="Vertical">
													<Setter Property="Width" Value="18" />
													<Setter Property="Height" Value="Auto" />
													<Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
												</Trigger>
											</Style.Triggers>
										</Style>
									</ScrollViewer.Resources>
									<!--<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />-->
										<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
								</ScrollViewer>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="PART_EditableTextBox" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
							<Setter TargetName="ToggleButton" Property="IsEnabled" Value="False" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="True">
							<Setter TargetName="ToggleButton" Property="IsEnabled" Value="True" />
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</Trigger>
						<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
							<Setter TargetName="DropDownBorder" Property="Margin" Value="0,0,0,0" />
						</Trigger>
						<Trigger Property="IsEditable" Value="true">
							<Setter Property="IsTabStop" Value="false" />
							<Setter TargetName="PART_EditableTextBox" Property="Visibility"	Value="Visible" />
							<Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
		</Style.Triggers>
	</Style>
	<!-- Combobox styling end -->

	<Style x:Key="CloseButton"  TargetType="Button">
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Image x:Name="Close" VerticalAlignment="Bottom" Source="/Agent.Interaction.Desktop;component/Images/Custom Close.png" Height="12" Width="12">
					</Image>
					<DataTemplate.Triggers>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsMouseOver}" Value="True">
							<Setter TargetName="Close" Property="Source" Value="/Agent.Interaction.Desktop;component/Images/Custom Close selected.png" />
						</DataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsPressed}" Value="True">
							<Setter TargetName="Close" Property="Source" Value="/Agent.Interaction.Desktop;component/Images/Custom Close selected.png" />
						</DataTrigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnMouseEnter1">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4" />
								<SplineDoubleKeyFrame KeyTime="00:00:01" Value="1" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4" />
								<SplineDoubleKeyFrame KeyTime="00:00:01" Value="1" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border Name="Border" Background="Transparent">
						<ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									  Margin="{TemplateBinding Padding}"
									  RecognizesAccessKey="True"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<ContentPresenter.RenderTransform>
								<TransformGroup>
									<ScaleTransform ScaleX="1" ScaleY="1" />
									<SkewTransform AngleX="0" AngleY="0" />
									<RotateTransform Angle="0" />
									<TranslateTransform X="0" Y="0" />
								</TransformGroup>
							</ContentPresenter.RenderTransform>
						</ContentPresenter>
					</Border>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="Mouse.MouseEnter">
							<BeginStoryboard Storyboard="{StaticResource OnMouseEnter1}" />
						</EventTrigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#d6ebff" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#94c3e7" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MinimizeButton"  TargetType="Button">
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Image x:Name="Minimize" Source="/Agent.Interaction.Desktop;component/Images/Custom Minimize.png" Height="15" Width="11">
					</Image>
					<DataTemplate.Triggers>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsMouseOver}" Value="True">
							<Setter TargetName="Minimize" Property="Source" Value="/Agent.Interaction.Desktop;component/Images/Custom Minimize selected.png" />
						</DataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsPressed}" Value="True">
							<Setter TargetName="Minimize" Property="Source" Value="/Agent.Interaction.Desktop;component/Images/Custom Minimize selected.png" />
						</DataTrigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnMouseEnter1">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4" />
								<SplineDoubleKeyFrame KeyTime="00:00:01" Value="1" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4" />
								<SplineDoubleKeyFrame KeyTime="00:00:01" Value="1" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border Name="Border" Background="Transparent">
						<ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									  Margin="{TemplateBinding Padding}"
									  RecognizesAccessKey="True"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<ContentPresenter.RenderTransform>
								<TransformGroup>
									<ScaleTransform ScaleX="1" ScaleY="1" />
									<SkewTransform AngleX="0" AngleY="0" />
									<RotateTransform Angle="0" />
									<TranslateTransform X="0" Y="0" />
								</TransformGroup>
							</ContentPresenter.RenderTransform>
						</ContentPresenter>
					</Border>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="Mouse.MouseEnter">
							<BeginStoryboard Storyboard="{StaticResource OnMouseEnter1}" />
						</EventTrigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#d6ebff" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#94c3e7" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="PinButton"  TargetType="Button">
		<!--<Setter Property="ContentTemplate">
		<Setter.Value>
			<DataTemplate>
				<Image x:Name="Minimize" Source="/Agent.Interaction.Desktop;component/Images/Pin.Open.png" Height="15" Width="11">
				</Image>
				<DataTemplate.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsMouseOver}" Value="True">
						<Setter TargetName="Minimize" Property="Source" Value="/Agent.Interaction.Desktop;component/Images/Custom Minimize selected.png" />
					</DataTrigger>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsPressed}" Value="True">
						<Setter TargetName="Minimize" Property="Source" Value="/Agent.Interaction.Desktop;component/Images/Custom Minimize selected.png" />
					</DataTrigger>
				</DataTemplate.Triggers>
			</DataTemplate>
		</Setter.Value>
	</Setter>-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnMouseEnter1">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4" />
								<SplineDoubleKeyFrame KeyTime="00:00:01" Value="1" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4" />
								<SplineDoubleKeyFrame KeyTime="00:00:01" Value="1" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border Name="Border" Background="Transparent">
						<ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									  Margin="{TemplateBinding Padding}"
									  RecognizesAccessKey="True"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<ContentPresenter.RenderTransform>
								<TransformGroup>
									<ScaleTransform ScaleX="1" ScaleY="1" />
									<SkewTransform AngleX="0" AngleY="0" />
									<RotateTransform Angle="0" />
									<TranslateTransform X="0" Y="0" />
								</TransformGroup>
							</ContentPresenter.RenderTransform>
						</ContentPresenter>
					</Border>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="Mouse.MouseEnter">
							<BeginStoryboard Storyboard="{StaticResource OnMouseEnter1}" />
						</EventTrigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#d6ebff" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#94c3e7" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TCStackPannelImageButton"  TargetType="StackPanel">
		<Style.Triggers>
			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
				<Setter Property="Background" Value="Transparent" />
			</DataTrigger>
			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True">
				<Setter Property="Background" Value="#d6ebff" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="TCArrowImageButton"  TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Name="Border" Background="Transparent">
						<ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									  Margin="{TemplateBinding Padding}"
									  RecognizesAccessKey="True"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="Transparent" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#94c3e7" />
						</Trigger>
						<!--<Trigger Property="IsEnabled" Value="False">
								<Setter TargetName="Border" Property="Background" Value="#C6C7C6" />
							</Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NormalImageButton"  TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Name="Border" Background="Transparent">
						<ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									  Margin="{TemplateBinding Padding}"
									  RecognizesAccessKey="True"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#d6ebff" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#94c3e7" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="CallButton" TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Name="Border" CornerRadius="2" Background="#4DBF4D" TextBlock.Foreground="White" TextBlock.FontFamily="Calibri" TextBlock.FontSize="14">
						<ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									  Margin="{TemplateBinding Padding}"
									  RecognizesAccessKey="True"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="Button.Click">
							<BeginStoryboard>
								<Storyboard>
									<!--<ObjectAnimationUsingKeyFrames Duration="0" AutoReverse="True" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background">
										<DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource CallBG}" />
									</ObjectAnimationUsingKeyFrames>-->
									<DoubleAnimation Storyboard.TargetProperty="(Button.Opacity)" From="1" To="0.25" Duration="0:0:0.25" AutoReverse="True" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#358535" />
						</Trigger>
						<!--<Trigger Property="IsEnabled" Value="False">
								<Setter TargetName="Border" Property="Background" Value="#C6C7C6" />
							</Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="RejectButton" TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Name="Border" CornerRadius="2" Background="#f94e4b" TextBlock.Foreground="White" TextBlock.FontFamily="Calibri" TextBlock.FontSize="14">
						<ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									  Margin="{TemplateBinding Padding}"
									  RecognizesAccessKey="True"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#EF0C08" />
						</Trigger>
						<!--<Trigger Property="IsEnabled" Value="False">
								<Setter TargetName="Border" Property="Background" Value="#C6C7C6" />
							</Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ClearButton" TargetType="RepeatButton">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border Name="Border" CornerRadius="2" Background="#FFCC00" TextBlock.Foreground="White" TextBlock.FontFamily="Calibri" TextBlock.FontSize="14">
						<ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									  Margin="{TemplateBinding Padding}"
									  RecognizesAccessKey="True"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="Button.Click">
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation Storyboard.TargetProperty="(Button.Opacity)" From="1" To="0.25" Duration="0:0:0.25" AutoReverse="True" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#b28e00" />
						</Trigger>
						<!--<Trigger Property="IsEnabled" Value="False">
								<Setter TargetName="Border" Property="Background" Value="#C6C7C6" />
							</Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NormalButton1" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="Border" CornerRadius="0,0,2,2" Background="Transparent" BorderBrush="Transparent"
						BorderThickness="1,0,1,1">
						<Path x:Name="Arrow" Fill="White" HorizontalAlignment="Center" VerticalAlignment="Bottom" Data="M 0 0 L 4 4 L 8 0 Z" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#007edf" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#0061ac" />
						</Trigger>
						<!--<Trigger Property="IsEnabled" Value="False">
								<Setter TargetName="Border" Property="Background" Value="#C6C7C6" />
							</Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NormalButton" TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Name="Border" CornerRadius="2" Background="#939589" TextBlock.Foreground="White" TextBlock.FontFamily="Calibri" TextBlock.FontSize="14">
						<ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									  Margin="{TemplateBinding Padding}"
									  RecognizesAccessKey="True"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#007edf" />
						</Trigger>
						<EventTrigger RoutedEvent="Button.Click">
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation Storyboard.TargetProperty="(Button.Opacity)" From="1" To="0.25" Duration="0:0:0.25" AutoReverse="True" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#0061ac" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="Label">
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="FontFamily" Value="Calibri" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Border Background="{TemplateBinding Background}">
						<ContentPresenter Margin="5"
					   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
			   RecognizesAccessKey="False" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Check Box style-->
	<Style x:Key="CheckBoxFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle
			Margin="15,0,0,0"
			StrokeThickness="1"
			Stroke="#60000000"
			StrokeDashArray="2 2" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type CheckBox}" TargetType="CheckBox">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="FocusVisualStyle"    Value="{StaticResource CheckBoxFocusVisual}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CheckBox">
					<BulletDecorator VerticalAlignment="Center" Background="Transparent">
						<BulletDecorator.Bullet>
							<Border x:Name="Border"
			  Width="13"
			  Height="13"
			  CornerRadius="0"
			  Background="White"
			  BorderThickness="1"
			  BorderBrush="#ADAAAD">
								<Path
				Width="7" Height="7"
				x:Name="CheckMark"
				SnapsToDevicePixels="False"
				Stroke="{StaticResource GlyphBrush}"
				StrokeThickness="2"
				Data="M 0 0 L 7 7 M 0 7 L 7 0" />
							</Border>
						</BulletDecorator.Bullet>
						<ContentPresenter Margin="4,0,0,0"
			VerticalAlignment="Center"
			HorizontalAlignment="Left"
			RecognizesAccessKey="True" />
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="BorderBrush" Value="Black" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="#F7F3F7" />
							<Setter TargetName="Border" Property="BorderBrush" Value="Black" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="#40000000" />
							<Setter Property="Foreground" Value="#80000000" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Radio Button style-->
	<Style x:Key="RadioButtonFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle
			Margin="15,0,0,0"
			StrokeThickness="1"
			Stroke="#60000000"
			StrokeDashArray="1 2" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="FocusVisualStyle"	Value="{StaticResource RadioButtonFocusVisual}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<BulletDecorator VerticalAlignment="Center" Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="13" Height="13">
								<Ellipse x:Name="Border" Fill="White" StrokeThickness="1" Stroke="#ADAAAD" />
								<Ellipse x:Name="CheckMark" Margin="4" Fill="Black" />
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Stroke" Value="#F7F3F7" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Fill" Value="#F7F3F7" />
							<Setter TargetName="Border" Property="Stroke" Value="Black" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Fill" Value="{StaticResource DisabledBackgroundBrush}" />
							<Setter TargetName="Border" Property="Stroke" Value="#40000000" />
							<Setter Property="Foreground" Value="#80000000" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--TabControl style-->
	<Style  TargetType="{x:Type TabControl}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>

						<TabPanel             
			 Panel.ZIndex="1"
			 Margin="0,0,0,0"
			 IsItemsHost="True"
			 Background="White" />
						<Border
			 Grid.Row="1"
			 BorderBrush="#D6D7D6"
			 BorderThickness="1">

							<ContentPresenter ContentSource="SelectedContent" />
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--TabItem Style-->
	<Style TargetType="{x:Type TabItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid>
						<Border
			 Name="Border"
			 Background="White" BorderThickness="1,1,1,0"  BorderBrush="Transparent"  TextBlock.FontFamily="Calibri" TextBlock.FontSize="12">
							<ContentPresenter x:Name="ContentSite"
			   VerticalAlignment="Center"
			   HorizontalAlignment="Center"
			   ContentSource="Header" Height="20" RecognizesAccessKey="True"
			   Margin="5,5,5,0" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Border" Property="TextBlock.Foreground" Value="#0071C6" />
							<Setter TargetName="Border" Property="BorderBrush" Value="#D6D7D6" />
							<Setter TargetName="Border" Property="Margin" Value="0,0,0,-2" />
							<Setter TargetName="ContentSite" Property="Margin" Value="5,2,5,0" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style TargetType="ContextMenu">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ContextMenu">
					<Border BorderBrush="#ADAAAD" BorderThickness="1.25" Background="White" SnapsToDevicePixels="True" >
						<ItemsPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="Contextmenu" TargetType="ContextMenu">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ContextMenu">
					<Border  Padding="0,3,0,3" BorderBrush="#ADAAAD" BorderThickness="1.25" Background="White" SnapsToDevicePixels="True">
						<ItemsPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ContextMenu x:Key="DefaultCopyContextmenu" Style="{StaticResource Contextmenu}">
		<MenuItem Header="Cut  " Command="ApplicationCommands.Cut" />
		<MenuItem Header="Copy  "  Command="ApplicationCommands.Copy" />
		<MenuItem Header="Paste  " Command="ApplicationCommands.Paste" />
	</ContextMenu>

	<!-- TopLevelHeader -->

	<ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
		<Border Name="Border">
			<Grid>
				<ContentPresenter
		Margin="-10,3,6,3"
		ContentSource="Header"
		RecognizesAccessKey="False" />
				<Popup
		Name="Popup"
		Placement="Bottom"
		IsOpen="{TemplateBinding IsSubmenuOpen}"
		AllowsTransparency="True"
		Focusable="False"
		PopupAnimation="Fade">
					<Border
		  Name="SubmenuBorder"
		  SnapsToDevicePixels="True"
		  Background="#FFFFFF"
		  BorderBrush="#888888"
		  BorderThickness="1">
						<StackPanel
			IsItemsHost="True"
			KeyboardNavigation.DirectionalNavigation="Cycle" />
					</Border>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsSuspendingPopupAnimation" Value="true">
				<Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
			</Trigger>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
			</Trigger>
			<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
				<Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
				<Setter TargetName="SubmenuBorder" Property="BorderBrush" Value="{StaticResource CBorderBrush}" />
				<Setter TargetName="SubmenuBorder" Property="BorderThickness" Value="1.25" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- TopLevelItem -->

	<ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
		<Border Name="Border">
			<Grid>
				<ContentPresenter
		Margin="6,3,6,3"
		ContentSource="Header"
		RecognizesAccessKey="False" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
		<Border Name="Border" Padding="0,3,0,3">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
					<ColumnDefinition Width="13" />
				</Grid.ColumnDefinitions>
				<ContentPresenter Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
				<Border Name="Check" Width="13" Height="13" Visibility="Collapsed" Background="{StaticResource NormalBrush}"
					BorderThickness="1" BorderBrush="{StaticResource NormalBorderBrush}">
					<Path Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="False" Stroke="{StaticResource GlyphBrush}"
						StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0" />
				</Border>
				<ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="False" />
				<TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}"  Margin="2,0,2,0" DockPanel.Dock="Right" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="Icon" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="IsCheckable" Value="true">
				<Setter TargetName="Check" Property="Visibility" Value="Visible" />
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
			</Trigger>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="MenuItem">
		<Border Name="Border" Padding="0,3,0,3">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
					<ColumnDefinition Width="15" />
				</Grid.ColumnDefinitions>
				<ContentPresenter Name="Icon" VerticalAlignment="Center" ContentSource="Icon" />
				<ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="False" />
				<TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="2,0,2,0" DockPanel.Dock="Right" />
				<Path Grid.Column="3" Margin="0,0,5,0" HorizontalAlignment="Left" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="{StaticResource GlyphBrush}" />
				<Popup Name="Popup" Placement="Right" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
					<Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{StaticResource WindowBackgroundBrush}">
						<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
					</Border>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="Icon" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
			</Trigger>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
				<!---->
			</Trigger>
			<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
				<Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
				<Setter TargetName="SubmenuBorder" Property="BorderBrush" Value="{StaticResource CBorderBrush}" />
				<Setter TargetName="SubmenuBorder" Property="BorderThickness" Value="1.25" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="Menuitem" TargetType="MenuItem">
					<Setter Property="OverridesDefaultStyle" Value="True" />
					<Style.Triggers>
						<Trigger Property="Role" Value="SubmenuHeader">
							<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
						</Trigger>
						<Trigger Property="Role" Value="SubmenuItem">
							<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
						</Trigger>
						<Trigger Property="Role" Value="TopLevelHeader">
							<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
							<Setter Property="Grid.IsSharedSizeScope" Value="true" />
						</Trigger>
						<Trigger Property="Role" Value="TopLevelItem">
							<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
						</Trigger>
					</Style.Triggers>
				</Style>
	
	
	

	<ControlTemplate x:Key="TopLevelHeaderTemplateKey" TargetType="{x:Type MenuItem}">
		<Border Name="Border">
			<Grid>
				<ContentPresenter
		Margin="-10,3,6,3"
		ContentSource="Header"
		RecognizesAccessKey="False" />
				<Popup
		Name="Popup"
		Placement="Bottom"
		IsOpen="{TemplateBinding IsSubmenuOpen}"
		AllowsTransparency="True"
		Focusable="False"
		PopupAnimation="Fade">
					<Border
		  Name="SubmenuBorder"
		  SnapsToDevicePixels="True"
		  Background="#FFFFFF"
		  BorderBrush="#888888"
		  BorderThickness="1">
						<StackPanel
			IsItemsHost="True"
			KeyboardNavigation.DirectionalNavigation="Cycle" />
					</Border>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsSuspendingPopupAnimation" Value="true">
				<Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
			</Trigger>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
			</Trigger>
			<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
				<Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
				<Setter TargetName="SubmenuBorder" Property="BorderBrush" Value="{StaticResource CBorderBrush}" />
				<Setter TargetName="SubmenuBorder" Property="BorderThickness" Value="1.25" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- TopLevelItem -->

	<ControlTemplate x:Key="TopLevelItemTemplateKey" TargetType="{x:Type MenuItem}">
		<Border Name="Border">
			<Grid>
				<ContentPresenter
	Margin="6,3,6,3"
	ContentSource="Header"
	RecognizesAccessKey="False" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="SubmenuItemTemplateKey" TargetType="{x:Type MenuItem}">
		<Border Name="Border" Padding="0,3,0,3">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
					<ColumnDefinition Width="13" />
				</Grid.ColumnDefinitions>
				<ContentPresenter Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
				<Border Name="Check" Width="13" Height="13" Visibility="Collapsed" Background="{StaticResource NormalBrush}"
		BorderThickness="1" BorderBrush="{StaticResource NormalBorderBrush}">
				<Path Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="False" Stroke="{StaticResource GlyphBrush}"
			StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0" />
				</Border>
				<ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="False" />
				<TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}"  Margin="2,0,2,0" DockPanel.Dock="Right" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="Icon" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="IsCheckable" Value="true">
				<Setter TargetName="Check" Property="Visibility" Value="Visible" />
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
			</Trigger>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>


	<ControlTemplate x:Key="SubmenuHeaderTemplateKey" TargetType="MenuItem">
		<Border Name="Border" Padding="0,3,0,3" Background="#007EDF">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
					<ColumnDefinition Width="15" />
				</Grid.ColumnDefinitions>
				<ContentPresenter Name="Icon" VerticalAlignment="Center" ContentSource="Icon" />
				<ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="False"/>
				<TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="2,0,2,0" DockPanel.Dock="Right" />
				<Path Grid.Column="3" Margin="0,0,5,0" HorizontalAlignment="Left" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="White" />
				<Popup Name="Popup" Placement="Right" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
					<Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{StaticResource WindowBackgroundBrush}">
						<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
					</Border>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
				<Trigger Property="Icon" Value="{x:Null}">
					<Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
				</Trigger>
			<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
				<Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
				<Setter TargetName="SubmenuBorder" Property="BorderBrush" Value="{StaticResource CBorderBrush}" />
				<Setter TargetName="SubmenuBorder" Property="BorderThickness" Value="1.25" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	
	<Style x:Key="Menuitem1" TargetType="MenuItem">
					<Setter Property="OverridesDefaultStyle" Value="True" />
					<Style.Triggers>
						<Trigger Property="Role" Value="SubmenuHeader">                            
							<Setter Property="Foreground" Value="White"/>
							<Setter Property="Template" Value="{StaticResource SubmenuHeaderTemplateKey}" />
						</Trigger>
						<Trigger Property="Role" Value="SubmenuItem">                        
							<Setter Property="Foreground" Value="Black"/>
							<Setter Property="Template" Value="{StaticResource SubmenuItemTemplateKey}" />
						</Trigger>
						<Trigger Property="Role" Value="TopLevelHeader">
							<Setter Property="Template" Value="{StaticResource TopLevelHeaderTemplateKey}" />
							<Setter Property="Grid.IsSharedSizeScope" Value="true" />
						</Trigger>
						<Trigger Property="Role" Value="TopLevelItem">
							<Setter Property="Template" Value="{StaticResource TopLevelItemTemplateKey}" />
						</Trigger>
					</Style.Triggers>
				</Style>

	<!-- MenuItem Style -->

							<!-- Datagrid stylling start-->
							<Style TargetType="{x:Type my:DataGrid}">
								<Setter Property="Background" Value="White" />
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type my:DataGrid}">
											<Border Background="{TemplateBinding Background}"
	  BorderBrush="{TemplateBinding BorderBrush}"
	  BorderThickness="{TemplateBinding BorderThickness}"
	  SnapsToDevicePixels="True"
	  Padding="{TemplateBinding Padding}">
												<ScrollViewer   Focusable="false"
				Name="DG_ScrollViewer">
													<ScrollViewer.Template>
														<ControlTemplate TargetType="{x:Type ScrollViewer}">
															<Grid>
																<Grid.RowDefinitions>
																	<RowDefinition Height="Auto" />
																	<RowDefinition Height="*" />
																	<RowDefinition Height="Auto" />
																</Grid.RowDefinitions>

																<Grid.ColumnDefinitions>
																	<ColumnDefinition Width="Auto" />
																	<ColumnDefinition Width="*" />
																	<ColumnDefinition Width="Auto" />
																</Grid.ColumnDefinitions>

																<Button Command="{x:Static my:DataGrid.SelectAllCommand}"
								Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type my:DataGrid}}, Path=CellsPanelHorizontalOffset}"
								Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type my:DataGrid}, ResourceId=DataGridSelectAllButtonStyle}}"
								Focusable="false"
								Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type my:DataGrid}}, Path=HeadersVisibility, Converter={x:Static my:DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static my:DataGridHeadersVisibility.All}}" />
																<my:DataGridColumnHeadersPresenter Grid.Column="1"
										   Name="PART_ColumnHeadersPresenter"
										   Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type my:DataGrid}}, Path=HeadersVisibility, Converter={x:Static my:DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static my:DataGridHeadersVisibility.Column}}" />

																<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="1" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" />

																<ScrollBar Grid.Row="1" Grid.Column="1" Name="PART_VerticalScrollBar"
								 Orientation="Vertical" HorizontalAlignment="Right" Margin="0,0,0,0" SnapsToDevicePixels="True" OverridesDefaultStyle="True"
								 Maximum="{TemplateBinding ScrollableHeight}"
								 ViewportSize="{TemplateBinding ViewportHeight}"
								 Value="{Binding Path=VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
								 Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
																	<ScrollBar.Style>
																		<Style TargetType="{x:Type ScrollBar}">
																			<Setter Property="SnapsToDevicePixels" Value="True" />
																			<Setter Property="OverridesDefaultStyle" Value="true" />
																			<Style.Triggers>
																				<Trigger Property="Orientation" Value="Vertical">
																					<Setter Property="Width" Value="18" />
																					<Setter Property="Height" Value="Auto" />
																					<Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
																				</Trigger>
																			</Style.Triggers>
																		</Style>
																	</ScrollBar.Style>
																</ScrollBar>

																<Grid Grid.Row="2" Grid.Column="1">
																	<Grid.ColumnDefinitions>
																		<ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type my:DataGrid}}, Path=NonFrozenColumnsViewportHorizontalOffset}" />
																		<ColumnDefinition Width="*" />
																	</Grid.ColumnDefinitions>
																	<ScrollBar Grid.Column="1"
									   Name="PART_HorizontalScrollBar"
									   Orientation="Horizontal"
									   Maximum="{TemplateBinding ScrollableWidth}"
									   ViewportSize="{TemplateBinding ViewportWidth}"
									   Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
									   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}">
																		<ScrollBar.Style>
																			<Style TargetType="{x:Type ScrollBar}">
																				<Setter Property="SnapsToDevicePixels" Value="True" />
																				<Setter Property="OverridesDefaultStyle" Value="true" />
																				<Style.Triggers>
																					<Trigger Property="Orientation" Value="Horizontal">
																						<Setter Property="Width" Value="Auto" />
																						<Setter Property="Height" Value="18" />
																						<Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
																					</Trigger>
																				</Style.Triggers>
																			</Style>
																		</ScrollBar.Style>
																	</ScrollBar>
																</Grid>
															</Grid>
														</ControlTemplate>
													</ScrollViewer.Template>
													<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
												</ScrollViewer>
											</Border>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>

							<Style TargetType="{x:Type my:DataGridCell}">
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type my:DataGridCell}">
											<Grid Background="{TemplateBinding Background}">
												<ContentPresenter VerticalAlignment="Center" />
											</Grid>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
								<Style.Triggers>
									<Trigger Property="IsSelected" Value="True">
										<Setter Property="Background" Value="{x:Null}" />
										<Setter Property="BorderBrush" Value="{x:Null}" />
										<Setter Property="Foreground" Value="Black" />
									</Trigger>
								</Style.Triggers>
							</Style>

							<!-- ColumnHeaderGripperStyle styled to set manualy the column header width-->
							<Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
								<Setter Property="Width" Value="5" />
								<Setter Property="Background" Value="Transparent" />
								<Setter Property="Cursor" Value="SizeWE" />
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type Thumb}">
											<Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>
							<!-- DataGridColumnHeadersPresenter styled to remove the DataGridColumnHeader that spans the entire grid -->
							<Style x:Key="{x:Type my:DataGridColumnHeadersPresenter}" TargetType="{x:Type my:DataGridColumnHeadersPresenter}">
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type my:DataGridColumnHeadersPresenter}">
											<Grid>
												<ItemsPresenter />
											</Grid>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>

							<!-- column headers styled to create a rounded tab effect and to add sort arrows -->
							<Style TargetType="{x:Type my:DataGridColumnHeader}">
								<Setter Property="VerticalContentAlignment" Value="Center" />
								<Setter Property="HorizontalAlignment" Value="Stretch" />
								<Setter Property="HorizontalContentAlignment" Value="Center" />
								<Setter Property="Foreground" Value="Black" />
								<Setter Property="FontSize" Value="12" />
								<Setter Property="FontWeight" Value="Bold" />
								<Setter Property="FontFamily" Value="Calibri" />
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type my:DataGridColumnHeader}">
											<ControlTemplate.Resources>
												<Storyboard x:Key="HoverOn">
													<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
														<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6" />
													</DoubleAnimationUsingKeyFrames>
												</Storyboard>
												<Storyboard x:Key="HoverOff">
													<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
														<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
													</DoubleAnimationUsingKeyFrames>
												</Storyboard>
											</ControlTemplate.Resources>
											<Grid>
												<Border Name="MainBorder" BorderThickness="1,1,1,1" Margin="0,0,0,0" BorderBrush="#D6D7D6" Background="White">
													<Grid>
														<!-- an overlayer glass effect -->
														<!--<Border VerticalAlignment="Top" Name="GradientBorder" Height="10" CornerRadius="7,7,0,0"  BorderBrush="#D99466" Background="{StaticResource GlassBrush}" />-->
														<ContentPresenter Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}"
													  ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
													</Grid>
												</Border>
												<Path Name="UpArrow" Fill="Black" HorizontalAlignment="Right"
								  VerticalAlignment="Center" Margin="0,2,1,0" Visibility="Hidden">
													<Path.Data>
														<PathGeometry>
															<PathFigure StartPoint="0,0">
																<LineSegment Point="7,0" />
																<LineSegment Point="3.5,6" />
																<LineSegment Point="0,0" />
															</PathFigure>
														</PathGeometry>
													</Path.Data>
												</Path>
												<Path Name="DownArrow" Fill="Black" HorizontalAlignment="Right"
								  VerticalAlignment="Center" Margin="0,2,1,0" Visibility="Hidden">
													<Path.Data>
														<PathGeometry>
															<PathFigure StartPoint="0,6">
																<LineSegment Point="7,6" />
																<LineSegment Point="3.5,0" />
																<LineSegment Point="0,6" />
															</PathFigure>
														</PathGeometry>
													</Path.Data>
												</Path>
												<Thumb x:Name="PART_LeftHeaderGripper" Grid.Column="0" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}" />
												<Thumb x:Name="PART_RightHeaderGripper" Grid.Column="3" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}" />
											</Grid>
											<ControlTemplate.Triggers>
												<Trigger Property="SortDirection" Value="Descending">
													<Setter TargetName="UpArrow" Property="Visibility" Value="Hidden" />
													<Setter TargetName="DownArrow" Property="Visibility" Value="Visible" />
												</Trigger>
												<Trigger Property="SortDirection" Value="Ascending">
													<Setter TargetName="DownArrow" Property="Visibility" Value="Hidden" />
													<Setter TargetName="UpArrow" Property="Visibility" Value="Visible" />
												</Trigger>
												<Trigger Property="IsMouseOver" Value="true">
													<Setter Property="Cursor" Value="Hand" />
													<Setter TargetName="MainBorder" Property="Background" Value="White" />
													<Setter TargetName="MainBorder" Property="BorderBrush" Value="Black" />
													<Setter Property="Foreground" Value="#0071C6" />
													<!--<Trigger.EnterActions>
											<BeginStoryboard Storyboard="{StaticResource HoverOn}" />
										</Trigger.EnterActions>
										<Trigger.ExitActions>
											<BeginStoryboard Storyboard="{StaticResource HoverOff}" />
										</Trigger.ExitActions>-->
												</Trigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>

							<!-- Row header-->
							<Style TargetType="{x:Type my:DataGridRowHeader}">
								<Setter Property="VerticalContentAlignment" Value="Center" />
								<Setter Property="Foreground" Value="White" />
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type my:DataGridRowHeader}">
											<Grid>
												<Border Name="MainBorder" BorderThickness="0.5" BorderBrush="Black" Background="{StaticResource NormalBrush}">
													<Grid>
														<!-- an overlayer glass effect -->
														<!--<Border VerticalAlignment="Top" Name="GradientBorder" Height="10" CornerRadius="2,2,2,2"  BorderBrush="#D99466" Background="{StaticResource GlassBrush}" />-->
														<ContentPresenter Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}" Height="15" 
													  ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
													</Grid>
												</Border>
											</Grid>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>


							<Style x:Key="MaximizeButton"  TargetType="Button">
								<Setter Property="ContentTemplate">
									<Setter.Value>
										<DataTemplate>
								<Image x:Name="Maximize" Source="/Agent.Interaction.Desktop;component/Images/Maximize1.Disable.png" Height="15" Width="11">
											</Image>
											<DataTemplate.Triggers>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsMouseOver}" Value="True">
										<Setter TargetName="Maximize" Property="Source" Value="/Agent.Interaction.Desktop;component/Images/Maximize1.png"/>
												</DataTrigger>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsPressed}" Value="True">
										<Setter TargetName="Maximize" Property="Source" Value="/Agent.Interaction.Desktop;component/Images/Maximize1.png"/>
												</DataTrigger>
											</DataTemplate.Triggers>
										</DataTemplate>
									</Setter.Value>
								</Setter>
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type Button}">
											<ControlTemplate.Resources>
												<Storyboard x:Key="OnMouseEnter1">
													<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
														<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4"/>
														<SplineDoubleKeyFrame KeyTime="00:00:01" Value="1"/>
													</DoubleAnimationUsingKeyFrames>
													<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
														<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4"/>
														<SplineDoubleKeyFrame KeyTime="00:00:01" Value="1"/>
													</DoubleAnimationUsingKeyFrames>
												</Storyboard>
											</ControlTemplate.Resources>
											<Border Name="Border" Background="Transparent">
												<ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
													<ContentPresenter.RenderTransform>
														<TransformGroup>
															<ScaleTransform ScaleX="1" ScaleY="1"/>
															<SkewTransform AngleX="0" AngleY="0"/>
															<RotateTransform Angle="0"/>
															<TranslateTransform X="0" Y="0"/>
														</TransformGroup>
													</ContentPresenter.RenderTransform>
												</ContentPresenter>
											</Border>
											<ControlTemplate.Triggers>
												<EventTrigger RoutedEvent="Mouse.MouseEnter">
													<BeginStoryboard Storyboard="{StaticResource OnMouseEnter1}"/>
												</EventTrigger>
												<Trigger Property="IsMouseOver" Value="True">
													<Setter TargetName="Border" Property="Background" Value="#d6ebff"/>
												</Trigger>
												<Trigger Property="IsPressed" Value="True">
													<Setter TargetName="Border" Property="Background" Value="#94c3e7"/>
												</Trigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>

							<Style x:Key="RestoreButton"  TargetType="Button">
								<Setter Property="ContentTemplate">
									<Setter.Value>
										<DataTemplate>
											<Image x:Name="Minimize" Source="/Agent.Interaction.Desktop;component/Images/Normal.Disable.png" Height="15" Width="11">
											</Image>
											<DataTemplate.Triggers>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsMouseOver}" Value="True">
													<Setter TargetName="Minimize" Property="Source" Value="/Agent.Interaction.Desktop;component/Images/Normal.png"/>
												</DataTrigger>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsPressed}" Value="True">
													<Setter TargetName="Minimize" Property="Source" Value="/Agent.Interaction.Desktop;component/Images/Normal.Disable.png"/>
												</DataTrigger>
											</DataTemplate.Triggers>
										</DataTemplate>
									</Setter.Value>
								</Setter>
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type Button}">
											<ControlTemplate.Resources>
												<Storyboard x:Key="OnMouseEnter1">
													<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
														<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4"/>
														<SplineDoubleKeyFrame KeyTime="00:00:01" Value="1"/>
													</DoubleAnimationUsingKeyFrames>
													<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
														<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4"/>
														<SplineDoubleKeyFrame KeyTime="00:00:01" Value="1"/>
													</DoubleAnimationUsingKeyFrames>
												</Storyboard>
											</ControlTemplate.Resources>
											<Border Name="Border" Background="Transparent">
												<ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
													<ContentPresenter.RenderTransform>
														<TransformGroup>
															<ScaleTransform ScaleX="1" ScaleY="1"/>
															<SkewTransform AngleX="0" AngleY="0"/>
															<RotateTransform Angle="0"/>
															<TranslateTransform X="0" Y="0"/>
														</TransformGroup>
													</ContentPresenter.RenderTransform>
												</ContentPresenter>
											</Border>
											<ControlTemplate.Triggers>
												<EventTrigger RoutedEvent="Mouse.MouseEnter">
													<BeginStoryboard Storyboard="{StaticResource OnMouseEnter1}"/>
												</EventTrigger>
												<Trigger Property="IsMouseOver" Value="True">
													<Setter TargetName="Border" Property="Background" Value="#d6ebff"/>
												</Trigger>
												<Trigger Property="IsPressed" Value="True">
													<Setter TargetName="Border" Property="Background" Value="#94c3e7"/>
												</Trigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>

							<Style x:Key="SideButton"  TargetType="ToggleButton">
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="ToggleButton">
											<Border x:Name="Border" CornerRadius="2" BorderThickness="1"  Background="#939589" 
																BorderBrush="{StaticResource NormalBorderBrush}">
												<ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center"
																 RecognizesAccessKey="True"/>
											</Border>
											<ControlTemplate.Triggers>
												<Trigger Property="IsMouseOver" Value="true">
													<Setter TargetName="Border" Property="Background" Value="#1398ff" />
													<Setter Property="Cursor" Value="Hand" />
												</Trigger>
												<Trigger Property="IsPressed" Value="true">
													<Setter TargetName="Border" Property="Background" Value="#0061ac" />
												</Trigger>
												<Trigger Property="IsChecked" Value="true">
													<Setter TargetName="Border" Property="Background" Value="#007edf"/>
												</Trigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>

</ResourceDictionary>